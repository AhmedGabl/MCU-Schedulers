
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  00003604  00003698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000dc  008000dc  00003714  2**0
                  ALLOC
  3 .stab         00003e7c  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002902  00000000  00000000  00007590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000da24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000db84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000de11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e5df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_1>
       8:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__vector_2>
       c:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__vector_10>
      2c:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 1a 	call	0x351e	; 0x351e <main>
      8a:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
//static void(*UART_RX_Fptr)(void)=NULLPTR;
//static void(*UART_TX_Fptr)(void)=NULLPTR;


void UART_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//baud rate 9600
	UBRRL=(1000000/(BAUDRATE))-1;
     b4e:	e9 e2       	ldi	r30, 0x29	; 41
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	87 e6       	ldi	r24, 0x67	; 103
     b54:	80 83       	st	Z, r24

	//normal speed
	CLR_BIT(UCSRA,U2X);
     b56:	ab e2       	ldi	r26, 0x2B	; 43
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8c 93       	st	X, r24


	//frame (stop ,data ,parity) 1 STOP NO PARITY 8 DATA

	// ENABLE RX TX
	SET_BIT(UCSRB,RXEN);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 61       	ori	r24, 0x10	; 16
     b70:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     b72:	aa e2       	ldi	r26, 0x2A	; 42
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ea e2       	ldi	r30, 0x2A	; 42
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	8c 93       	st	X, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <UART_Send>:

void UART_Send(u8 data)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA,UDRE));
     b92:	eb e2       	ldi	r30, 0x2B	; 43
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 95       	swap	r24
     b9a:	86 95       	lsr	r24
     b9c:	87 70       	andi	r24, 0x07	; 7
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	90 70       	andi	r25, 0x00	; 0
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	a1 f3       	breq	.-24     	; 0xb92 <UART_Send+0xc>
	UDR=data;
     baa:	ec e2       	ldi	r30, 0x2C	; 44
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 83       	st	Z, r24
}
     bb2:	0f 90       	pop	r0
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <UART_SendNoBlock>:

void UART_SendNoBlock(u8 data)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	0f 92       	push	r0
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
     bc6:	ec e2       	ldi	r30, 0x2C	; 44
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	80 83       	st	Z, r24
}
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     bde:	ec e2       	ldi	r30, 0x2C	; 44
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <UART_Receive>:




u8 UART_Receive(void)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
     bf2:	eb e2       	ldi	r30, 0x2B	; 43
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	88 23       	and	r24, r24
     bfa:	dc f7       	brge	.-10     	; 0xbf2 <UART_Receive+0x8>
	return UDR;
     bfc:	ec e2       	ldi	r30, 0x2C	; 44
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <UART_ReceivePerodic>:


u8 UART_ReceivePerodic(u8*pdata)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <UART_ReceivePerodic+0x6>
     c0e:	0f 92       	push	r0
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(UCSRA,RXC))
     c18:	eb e2       	ldi	r30, 0x2B	; 43
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	88 23       	and	r24, r24
     c20:	4c f4       	brge	.+18     	; 0xc34 <UART_ReceivePerodic+0x2c>
	{

		*pdata=UDR;
     c22:	ec e2       	ldi	r30, 0x2C	; 44
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	80 83       	st	Z, r24
		return 1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	8b 83       	std	Y+3, r24	; 0x03
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <UART_ReceivePerodic+0x2e>
	}
	return 0;
     c34:	1b 82       	std	Y+3, r1	; 0x03
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <TMR0_voidSetDelay_ms_usingCTC+0x6>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
     c52:	ec e5       	ldi	r30, 0x5C	; 92
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	89 ef       	ldi	r24, 0xF9	; 249
     c58:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	cc 01       	movw	r24, r24
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	80 93 e6 00 	sts	0x00E6, r24
     c68:	90 93 e7 00 	sts	0x00E7, r25
     c6c:	a0 93 e8 00 	sts	0x00E8, r26
     c70:	b0 93 e9 00 	sts	0x00E9, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	0f 92       	push	r0
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	// Enable Output Compare Match Interrupt (OCI)
	SET_BIT(TIMSK, OCIE0);

#elif TMR0_MODE == TMR0_NORMAL_MODE
	// Select normal mode
	CLR_BIT(TCCR0, WGM00);
     c9a:	a3 e5       	ldi	r26, 0x53	; 83
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e3 e5       	ldi	r30, 0x53	; 83
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	8f 7b       	andi	r24, 0xBF	; 191
     ca6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
     ca8:	a3 e5       	ldi	r26, 0x53	; 83
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	8c 93       	st	X, r24
	// Initialize timer with a preload value
	TCNT0 = TMR0_PRELOAD_VALUE;
     cb6:	e2 e5       	ldi	r30, 0x52	; 82
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	81 e7       	ldi	r24, 0x71	; 113
     cbc:	80 83       	st	Z, r24
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE0);
     cbe:	a9 e5       	ldi	r26, 0x59	; 89
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e9 e5       	ldi	r30, 0x59	; 89
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);
#endif

#endif
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     cf6:	a3 e5       	ldi	r26, 0x53	; 83
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e3 e5       	ldi	r30, 0x53	; 83
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8b 7f       	andi	r24, 0xFB	; 251
     d02:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
     d12:	a3 e5       	ldi	r26, 0x53	; 83
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e3 e5       	ldi	r30, 0x53	; 83
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     d20:	a3 e5       	ldi	r26, 0x53	; 83
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e3 e5       	ldi	r30, 0x53	; 83
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8d 7f       	andi	r24, 0xFD	; 253
     d2c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
     d2e:	a3 e5       	ldi	r26, 0x53	; 83
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e3 e5       	ldi	r30, 0x53	; 83
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8b 7f       	andi	r24, 0xFB	; 251
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <TMR0_voidSetCallBackOVF+0x6>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	9a 81       	ldd	r25, Y+2	; 0x02
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	31 f0       	breq	.+12     	; 0xd64 <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	90 93 dd 00 	sts	0x00DD, r25
     d60:	80 93 dc 00 	sts	0x00DC, r24
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <TMR0_voidSetCallBackCTC+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	9a 81       	ldd	r25, Y+2	; 0x02
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	31 f0       	breq	.+12     	; 0xd90 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	90 93 df 00 	sts	0x00DF, r25
     d8c:	80 93 de 00 	sts	0x00DE, r24
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
     dc4:	80 91 e0 00 	lds	r24, 0x00E0
     dc8:	90 91 e1 00 	lds	r25, 0x00E1
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	90 93 e1 00 	sts	0x00E1, r25
     dd2:	80 93 e0 00 	sts	0x00E0, r24

	if (TMR0_ovCount == local_u16ovCounter) {
     dd6:	80 91 e0 00 	lds	r24, 0x00E0
     dda:	90 91 e1 00 	lds	r25, 0x00E1
     dde:	8a 30       	cpi	r24, 0x0A	; 10
     de0:	91 05       	cpc	r25, r1
     de2:	99 f4       	brne	.+38     	; 0xe0a <__vector_11+0x70>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
     de4:	e2 e5       	ldi	r30, 0x52	; 82
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	81 e7       	ldi	r24, 0x71	; 113
     dea:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
     dec:	10 92 e1 00 	sts	0x00E1, r1
     df0:	10 92 e0 00 	sts	0x00E0, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
     df4:	80 91 dc 00 	lds	r24, 0x00DC
     df8:	90 91 dd 00 	lds	r25, 0x00DD
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	29 f0       	breq	.+10     	; 0xe0a <__vector_11+0x70>
			TMR0_privatePtrToCAllBackOVF();
     e00:	e0 91 dc 00 	lds	r30, 0x00DC
     e04:	f0 91 dd 00 	lds	r31, 0x00DD
     e08:	09 95       	icall
		}
	}
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	ff 91       	pop	r31
     e10:	ef 91       	pop	r30
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	7f 91       	pop	r23
     e1c:	6f 91       	pop	r22
     e1e:	5f 91       	pop	r21
     e20:	4f 91       	pop	r20
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	2f 93       	push	r18
     e3c:	3f 93       	push	r19
     e3e:	4f 93       	push	r20
     e40:	5f 93       	push	r21
     e42:	6f 93       	push	r22
     e44:	7f 93       	push	r23
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	af 93       	push	r26
     e4c:	bf 93       	push	r27
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
     e5a:	80 91 e2 00 	lds	r24, 0x00E2
     e5e:	90 91 e3 00 	lds	r25, 0x00E3
     e62:	a0 91 e4 00 	lds	r26, 0x00E4
     e66:	b0 91 e5 00 	lds	r27, 0x00E5
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	a1 1d       	adc	r26, r1
     e6e:	b1 1d       	adc	r27, r1
     e70:	80 93 e2 00 	sts	0x00E2, r24
     e74:	90 93 e3 00 	sts	0x00E3, r25
     e78:	a0 93 e4 00 	sts	0x00E4, r26
     e7c:	b0 93 e5 00 	sts	0x00E5, r27

	if (private_ctcCounter == local_u32CTCCounter) {
     e80:	20 91 e6 00 	lds	r18, 0x00E6
     e84:	30 91 e7 00 	lds	r19, 0x00E7
     e88:	40 91 e8 00 	lds	r20, 0x00E8
     e8c:	50 91 e9 00 	lds	r21, 0x00E9
     e90:	80 91 e2 00 	lds	r24, 0x00E2
     e94:	90 91 e3 00 	lds	r25, 0x00E3
     e98:	a0 91 e4 00 	lds	r26, 0x00E4
     e9c:	b0 91 e5 00 	lds	r27, 0x00E5
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	4a 07       	cpc	r20, r26
     ea6:	5b 07       	cpc	r21, r27
     ea8:	99 f4       	brne	.+38     	; 0xed0 <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
     eaa:	10 92 e2 00 	sts	0x00E2, r1
     eae:	10 92 e3 00 	sts	0x00E3, r1
     eb2:	10 92 e4 00 	sts	0x00E4, r1
     eb6:	10 92 e5 00 	sts	0x00E5, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
     eba:	80 91 de 00 	lds	r24, 0x00DE
     ebe:	90 91 df 00 	lds	r25, 0x00DF
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	29 f0       	breq	.+10     	; 0xed0 <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
     ec6:	e0 91 de 00 	lds	r30, 0x00DE
     eca:	f0 91 df 00 	lds	r31, 0x00DF
     ece:	09 95       	icall
		}
	}
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	ff 91       	pop	r31
     ed6:	ef 91       	pop	r30
     ed8:	bf 91       	pop	r27
     eda:	af 91       	pop	r26
     edc:	9f 91       	pop	r25
     ede:	8f 91       	pop	r24
     ee0:	7f 91       	pop	r23
     ee2:	6f 91       	pop	r22
     ee4:	5f 91       	pop	r21
     ee6:	4f 91       	pop	r20
     ee8:	3f 91       	pop	r19
     eea:	2f 91       	pop	r18
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
     f02:	ec e5       	ldi	r30, 0x5C	; 92
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	80 83       	st	Z, r24
}
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <Port_Init+0x6>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <Port_Init+0x8>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <Port_Init+0xa>
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
     f24:	1a 82       	std	Y+2, r1	; 0x02
     f26:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
     f28:	1a 82       	std	Y+2, r1	; 0x02
     f2a:	19 82       	std	Y+1, r1	; 0x01
     f2c:	ea c1       	rjmp	.+980    	; 0x1302 <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	c9 01       	movw	r24, r18
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	fc 01       	movw	r30, r24
     f42:	e2 0f       	add	r30, r18
     f44:	f3 1f       	adc	r31, r19
     f46:	80 81       	ld	r24, Z
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3e 83       	std	Y+6, r19	; 0x06
     f4e:	2d 83       	std	Y+5, r18	; 0x05
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <Port_Init+0x4a>
     f5a:	85 c0       	rjmp	.+266    	; 0x1066 <Port_Init+0x154>
     f5c:	2d 81       	ldd	r18, Y+5	; 0x05
     f5e:	3e 81       	ldd	r19, Y+6	; 0x06
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	2c f4       	brge	.+10     	; 0xf70 <Port_Init+0x5e>
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	9e 81       	ldd	r25, Y+6	; 0x06
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	71 f0       	breq	.+28     	; 0xf8a <Port_Init+0x78>
     f6e:	c4 c1       	rjmp	.+904    	; 0x12f8 <Port_Init+0x3e6>
     f70:	2d 81       	ldd	r18, Y+5	; 0x05
     f72:	3e 81       	ldd	r19, Y+6	; 0x06
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <Port_Init+0x6a>
     f7a:	e3 c0       	rjmp	.+454    	; 0x1142 <Port_Init+0x230>
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <Port_Init+0x76>
     f86:	4b c1       	rjmp	.+662    	; 0x121e <Port_Init+0x30c>
     f88:	b7 c1       	rjmp	.+878    	; 0x12f8 <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
     f8a:	29 81       	ldd	r18, Y+1	; 0x01
     f8c:	3a 81       	ldd	r19, Y+2	; 0x02
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	28 0f       	add	r18, r24
     f96:	39 1f       	adc	r19, r25
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	fc 01       	movw	r30, r24
     f9e:	e2 0f       	add	r30, r18
     fa0:	f3 1f       	adc	r31, r19
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	01 f5       	brne	.+64     	; 0xfe8 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
     fa8:	aa e3       	ldi	r26, 0x3A	; 58
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e3       	ldi	r30, 0x3A	; 58
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	29 81       	ldd	r18, Y+1	; 0x01
     fb6:	3a 81       	ldd	r19, Y+2	; 0x02
     fb8:	c9 01       	movw	r24, r18
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	28 0f       	add	r18, r24
     fc0:	39 1f       	adc	r19, r25
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	fc 01       	movw	r30, r24
     fc8:	e2 0f       	add	r30, r18
     fca:	f3 1f       	adc	r31, r19
     fcc:	81 81       	ldd	r24, Z+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <Port_Init+0xcc>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <Port_Init+0xc8>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	88 c1       	rjmp	.+784    	; 0x12f8 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
     fe8:	aa e3       	ldi	r26, 0x3A	; 58
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea e3       	ldi	r30, 0x3A	; 58
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	29 81       	ldd	r18, Y+1	; 0x01
     ff6:	3a 81       	ldd	r19, Y+2	; 0x02
     ff8:	c9 01       	movw	r24, r18
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	28 0f       	add	r18, r24
    1000:	39 1f       	adc	r19, r25
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	fc 01       	movw	r30, r24
    1008:	e2 0f       	add	r30, r18
    100a:	f3 1f       	adc	r31, r19
    100c:	81 81       	ldd	r24, Z+1	; 0x01
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <Port_Init+0x10a>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <Port_Init+0x106>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    1026:	ab e3       	ldi	r26, 0x3B	; 59
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	eb e3       	ldi	r30, 0x3B	; 59
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	29 81       	ldd	r18, Y+1	; 0x01
    1034:	3a 81       	ldd	r19, Y+2	; 0x02
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	28 0f       	add	r18, r24
    103e:	39 1f       	adc	r19, r25
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	81 81       	ldd	r24, Z+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <Port_Init+0x14a>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <Port_Init+0x146>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	49 c1       	rjmp	.+658    	; 0x12f8 <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1066:	29 81       	ldd	r18, Y+1	; 0x01
    1068:	3a 81       	ldd	r19, Y+2	; 0x02
    106a:	c9 01       	movw	r24, r18
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	28 0f       	add	r18, r24
    1072:	39 1f       	adc	r19, r25
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	fc 01       	movw	r30, r24
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	01 f5       	brne	.+64     	; 0x10c4 <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1084:	a7 e3       	ldi	r26, 0x37	; 55
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e7 e3       	ldi	r30, 0x37	; 55
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	3a 81       	ldd	r19, Y+2	; 0x02
    1094:	c9 01       	movw	r24, r18
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	28 0f       	add	r18, r24
    109c:	39 1f       	adc	r19, r25
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	fc 01       	movw	r30, r24
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	81 81       	ldd	r24, Z+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <Port_Init+0x1a8>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <Port_Init+0x1a4>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	1a c1       	rjmp	.+564    	; 0x12f8 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    10c4:	a7 e3       	ldi	r26, 0x37	; 55
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e7 e3       	ldi	r30, 0x37	; 55
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	29 81       	ldd	r18, Y+1	; 0x01
    10d2:	3a 81       	ldd	r19, Y+2	; 0x02
    10d4:	c9 01       	movw	r24, r18
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	28 0f       	add	r18, r24
    10dc:	39 1f       	adc	r19, r25
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	fc 01       	movw	r30, r24
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	81 81       	ldd	r24, Z+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <Port_Init+0x1e6>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	2a 95       	dec	r18
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <Port_Init+0x1e2>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    1102:	a8 e3       	ldi	r26, 0x38	; 56
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	29 81       	ldd	r18, Y+1	; 0x01
    1110:	3a 81       	ldd	r19, Y+2	; 0x02
    1112:	c9 01       	movw	r24, r18
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	28 0f       	add	r18, r24
    111a:	39 1f       	adc	r19, r25
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	fc 01       	movw	r30, r24
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	81 81       	ldd	r24, Z+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <Port_Init+0x226>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <Port_Init+0x222>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	db c0       	rjmp	.+438    	; 0x12f8 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1142:	29 81       	ldd	r18, Y+1	; 0x01
    1144:	3a 81       	ldd	r19, Y+2	; 0x02
    1146:	c9 01       	movw	r24, r18
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	28 0f       	add	r18, r24
    114e:	39 1f       	adc	r19, r25
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	fc 01       	movw	r30, r24
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	01 f5       	brne	.+64     	; 0x11a0 <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1160:	a4 e3       	ldi	r26, 0x34	; 52
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	29 81       	ldd	r18, Y+1	; 0x01
    116e:	3a 81       	ldd	r19, Y+2	; 0x02
    1170:	c9 01       	movw	r24, r18
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	28 0f       	add	r18, r24
    1178:	39 1f       	adc	r19, r25
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	fc 01       	movw	r30, r24
    1180:	e2 0f       	add	r30, r18
    1182:	f3 1f       	adc	r31, r19
    1184:	81 81       	ldd	r24, Z+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <Port_Init+0x284>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <Port_Init+0x280>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	ac c0       	rjmp	.+344    	; 0x12f8 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    11a0:	a4 e3       	ldi	r26, 0x34	; 52
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e4 e3       	ldi	r30, 0x34	; 52
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	29 81       	ldd	r18, Y+1	; 0x01
    11ae:	3a 81       	ldd	r19, Y+2	; 0x02
    11b0:	c9 01       	movw	r24, r18
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	28 0f       	add	r18, r24
    11b8:	39 1f       	adc	r19, r25
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	fc 01       	movw	r30, r24
    11c0:	e2 0f       	add	r30, r18
    11c2:	f3 1f       	adc	r31, r19
    11c4:	81 81       	ldd	r24, Z+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <Port_Init+0x2c2>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	2a 95       	dec	r18
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <Port_Init+0x2be>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	29 81       	ldd	r18, Y+1	; 0x01
    11ec:	3a 81       	ldd	r19, Y+2	; 0x02
    11ee:	c9 01       	movw	r24, r18
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	28 0f       	add	r18, r24
    11f6:	39 1f       	adc	r19, r25
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	81 81       	ldd	r24, Z+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <Port_Init+0x302>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <Port_Init+0x2fe>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	6d c0       	rjmp	.+218    	; 0x12f8 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    121e:	29 81       	ldd	r18, Y+1	; 0x01
    1220:	3a 81       	ldd	r19, Y+2	; 0x02
    1222:	c9 01       	movw	r24, r18
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	28 0f       	add	r18, r24
    122a:	39 1f       	adc	r19, r25
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	fc 01       	movw	r30, r24
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	01 f5       	brne	.+64     	; 0x127c <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    123c:	a1 e3       	ldi	r26, 0x31	; 49
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e3       	ldi	r30, 0x31	; 49
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	29 81       	ldd	r18, Y+1	; 0x01
    124a:	3a 81       	ldd	r19, Y+2	; 0x02
    124c:	c9 01       	movw	r24, r18
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	28 0f       	add	r18, r24
    1254:	39 1f       	adc	r19, r25
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	fc 01       	movw	r30, r24
    125c:	e2 0f       	add	r30, r18
    125e:	f3 1f       	adc	r31, r19
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <Port_Init+0x360>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <Port_Init+0x35c>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	3e c0       	rjmp	.+124    	; 0x12f8 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    127c:	a1 e3       	ldi	r26, 0x31	; 49
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e1 e3       	ldi	r30, 0x31	; 49
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	29 81       	ldd	r18, Y+1	; 0x01
    128a:	3a 81       	ldd	r19, Y+2	; 0x02
    128c:	c9 01       	movw	r24, r18
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	28 0f       	add	r18, r24
    1294:	39 1f       	adc	r19, r25
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	81 81       	ldd	r24, Z+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <Port_Init+0x39e>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	2a 95       	dec	r18
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <Port_Init+0x39a>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	29 81       	ldd	r18, Y+1	; 0x01
    12c8:	3a 81       	ldd	r19, Y+2	; 0x02
    12ca:	c9 01       	movw	r24, r18
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	28 0f       	add	r18, r24
    12d2:	39 1f       	adc	r19, r25
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	fc 01       	movw	r30, r24
    12da:	e2 0f       	add	r30, r18
    12dc:	f3 1f       	adc	r31, r19
    12de:	81 81       	ldd	r24, Z+1	; 0x01
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <Port_Init+0x3de>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <Port_Init+0x3da>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	80 32       	cpi	r24, 0x20	; 32
    1308:	91 05       	cpc	r25, r1
    130a:	0c f4       	brge	.+2      	; 0x130e <Port_Init+0x3fc>
    130c:	10 ce       	rjmp	.-992    	; 0xf2e <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    130e:	26 96       	adiw	r28, 0x06	; 6
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    1328:	af e5       	ldi	r26, 0x5F	; 95
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ef e5       	ldi	r30, 0x5F	; 95
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 68       	ori	r24, 0x80	; 128
    1334:	8c 93       	st	X, r24
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <GI_voidDisable>:

void GI_voidDisable(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    1344:	af e5       	ldi	r26, 0x5F	; 95
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	ef e5       	ldi	r30, 0x5F	; 95
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8f 77       	andi	r24, 0x7F	; 127
    1350:	8c 93       	st	X, r24
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <EXTI_voidInit>:
static void (*private_pCallBackINT0)(void) = NULL;
static void (*private_pCallBackINT1)(void) = NULL;
static void (*private_pCallBackINT2)(void) = NULL;

// Initialize external interrupt settings
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl) {
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	28 97       	sbiw	r28, 0x08	; 8
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8InterruptSource) {
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	38 87       	std	Y+8, r19	; 0x08
    1378:	2f 83       	std	Y+7, r18	; 0x07
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <EXTI_voidInit+0x2e>
    1384:	5a c0       	rjmp	.+180    	; 0x143a <EXTI_voidInit+0xe2>
    1386:	2f 81       	ldd	r18, Y+7	; 0x07
    1388:	38 85       	ldd	r19, Y+8	; 0x08
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <EXTI_voidInit+0x3a>
    1390:	a3 c0       	rjmp	.+326    	; 0x14d8 <EXTI_voidInit+0x180>
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	09 f0       	breq	.+2      	; 0x139c <EXTI_voidInit+0x44>
    139a:	b3 c0       	rjmp	.+358    	; 0x1502 <EXTI_voidInit+0x1aa>
    case EXTI_INT0:
        switch (copy_u8SenseControl) {
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3e 83       	std	Y+6, r19	; 0x06
    13a4:	2d 83       	std	Y+5, r18	; 0x05
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	91 05       	cpc	r25, r1
    13ae:	39 f1       	breq	.+78     	; 0x13fe <EXTI_voidInit+0xa6>
    13b0:	2d 81       	ldd	r18, Y+5	; 0x05
    13b2:	3e 81       	ldd	r19, Y+6	; 0x06
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	99 f0       	breq	.+38     	; 0x13e0 <EXTI_voidInit+0x88>
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	69 f1       	breq	.+90     	; 0x141c <EXTI_voidInit+0xc4>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC00);
    13c2:	a5 e5       	ldi	r26, 0x55	; 85
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e5       	ldi	r30, 0x55	; 85
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	81 60       	ori	r24, 0x01	; 1
    13ce:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    13d0:	a5 e5       	ldi	r26, 0x55	; 85
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e5       	ldi	r30, 0x55	; 85
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	82 60       	ori	r24, 0x02	; 2
    13dc:	8c 93       	st	X, r24
    13de:	91 c0       	rjmp	.+290    	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC00);
    13e0:	a5 e5       	ldi	r26, 0x55	; 85
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e5       	ldi	r30, 0x55	; 85
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	8e 7f       	andi	r24, 0xFE	; 254
    13ec:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    13ee:	a5 e5       	ldi	r26, 0x55	; 85
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e5 e5       	ldi	r30, 0x55	; 85
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	8c 93       	st	X, r24
    13fc:	82 c0       	rjmp	.+260    	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC00);
    13fe:	a5 e5       	ldi	r26, 0x55	; 85
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e5       	ldi	r30, 0x55	; 85
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    140c:	a5 e5       	ldi	r26, 0x55	; 85
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e5       	ldi	r30, 0x55	; 85
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8d 7f       	andi	r24, 0xFD	; 253
    1418:	8c 93       	st	X, r24
    141a:	73 c0       	rjmp	.+230    	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC00);
    141c:	a5 e5       	ldi	r26, 0x55	; 85
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e5       	ldi	r30, 0x55	; 85
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8e 7f       	andi	r24, 0xFE	; 254
    1428:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC01);
    142a:	a5 e5       	ldi	r26, 0x55	; 85
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e5       	ldi	r30, 0x55	; 85
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8d 7f       	andi	r24, 0xFD	; 253
    1436:	8c 93       	st	X, r24
    1438:	64 c0       	rjmp	.+200    	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT1:
        switch (copy_u8SenseControl) {
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	39 f1       	breq	.+78     	; 0x149c <EXTI_voidInit+0x144>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	99 f0       	breq	.+38     	; 0x147e <EXTI_voidInit+0x126>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f1       	breq	.+90     	; 0x14ba <EXTI_voidInit+0x162>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, ISC10);
    1460:	a5 e5       	ldi	r26, 0x55	; 85
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e5       	ldi	r30, 0x55	; 85
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	84 60       	ori	r24, 0x04	; 4
    146c:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    146e:	a5 e5       	ldi	r26, 0x55	; 85
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e5       	ldi	r30, 0x55	; 85
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	88 60       	ori	r24, 0x08	; 8
    147a:	8c 93       	st	X, r24
    147c:	42 c0       	rjmp	.+132    	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, ISC10);
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8b 7f       	andi	r24, 0xFB	; 251
    148a:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    148c:	a5 e5       	ldi	r26, 0x55	; 85
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e5       	ldi	r30, 0x55	; 85
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	88 60       	ori	r24, 0x08	; 8
    1498:	8c 93       	st	X, r24
    149a:	33 c0       	rjmp	.+102    	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_ANY_LOGICAL_CHANGE:
            SET_BIT(MCUCR, ISC10);
    149c:	a5 e5       	ldi	r26, 0x55	; 85
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e5       	ldi	r30, 0x55	; 85
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	84 60       	ori	r24, 0x04	; 4
    14a8:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	87 7f       	andi	r24, 0xF7	; 247
    14b6:	8c 93       	st	X, r24
    14b8:	24 c0       	rjmp	.+72     	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, ISC10);
    14ba:	a5 e5       	ldi	r26, 0x55	; 85
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e5       	ldi	r30, 0x55	; 85
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8b 7f       	andi	r24, 0xFB	; 251
    14c6:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, ISC11);
    14c8:	a5 e5       	ldi	r26, 0x55	; 85
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e5 e5       	ldi	r30, 0x55	; 85
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	87 7f       	andi	r24, 0xF7	; 247
    14d4:	8c 93       	st	X, r24
    14d6:	15 c0       	rjmp	.+42     	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        }
        break;

    case EXTI_INT2:
        switch (copy_u8SenseControl) {
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	91 05       	cpc	r25, r1
    14e2:	41 f0       	breq	.+16     	; 0x14f4 <EXTI_voidInit+0x19c>
        default:
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, ISC2);
    14e4:	a4 e5       	ldi	r26, 0x54	; 84
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e4 e5       	ldi	r30, 0x54	; 84
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 64       	ori	r24, 0x40	; 64
    14f0:	8c 93       	st	X, r24
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <EXTI_voidInit+0x1aa>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, ISC2);
    14f4:	a4 e5       	ldi	r26, 0x54	; 84
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e4 e5       	ldi	r30, 0x54	; 84
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8f 7b       	andi	r24, 0xBF	; 191
    1500:	8c 93       	st	X, r24
            break;
        }
        break;
    }
}
    1502:	28 96       	adiw	r28, 0x08	; 8
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <EXTI_voidEnable>:

// Enable the specified external interrupt
void EXTI_voidEnable(u8 copy_u8InterruptSource) {
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <EXTI_voidEnable+0x6>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3b 83       	std	Y+3, r19	; 0x03
    152a:	2a 83       	std	Y+2, r18	; 0x02
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	89 f0       	breq	.+34     	; 0x1558 <EXTI_voidEnable+0x44>
    1536:	2a 81       	ldd	r18, Y+2	; 0x02
    1538:	3b 81       	ldd	r19, Y+3	; 0x03
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	a1 f0       	breq	.+40     	; 0x1568 <EXTI_voidEnable+0x54>
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	9b 81       	ldd	r25, Y+3	; 0x03
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	b9 f4       	brne	.+46     	; 0x1576 <EXTI_voidEnable+0x62>
    case EXTI_INT0:
        SET_BIT(GICR, INT0);
    1548:	ab e5       	ldi	r26, 0x5B	; 91
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	eb e5       	ldi	r30, 0x5B	; 91
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 64       	ori	r24, 0x40	; 64
    1554:	8c 93       	st	X, r24
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, INT1);
    1558:	ab e5       	ldi	r26, 0x5B	; 91
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e5       	ldi	r30, 0x5B	; 91
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	80 68       	ori	r24, 0x80	; 128
    1564:	8c 93       	st	X, r24
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <EXTI_voidEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, INT2);
    1568:	ab e5       	ldi	r26, 0x5B	; 91
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	eb e5       	ldi	r30, 0x5B	; 91
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 62       	ori	r24, 0x20	; 32
    1574:	8c 93       	st	X, r24
        break;
    }
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <EXTI_voidDisable>:

// Disable the specified external interrupt
void EXTI_voidDisable(u8 copy_u8InterruptSource) {
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <EXTI_voidDisable+0x6>
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8InterruptSource) {
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3b 83       	std	Y+3, r19	; 0x03
    1598:	2a 83       	std	Y+2, r18	; 0x02
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	9b 81       	ldd	r25, Y+3	; 0x03
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 05       	cpc	r25, r1
    15a2:	89 f0       	breq	.+34     	; 0x15c6 <EXTI_voidDisable+0x44>
    15a4:	2a 81       	ldd	r18, Y+2	; 0x02
    15a6:	3b 81       	ldd	r19, Y+3	; 0x03
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	a1 f0       	breq	.+40     	; 0x15d6 <EXTI_voidDisable+0x54>
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	9b 81       	ldd	r25, Y+3	; 0x03
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	b9 f4       	brne	.+46     	; 0x15e4 <EXTI_voidDisable+0x62>
    case EXTI_INT0:
        CLR_BIT(GICR, INT0);
    15b6:	ab e5       	ldi	r26, 0x5B	; 91
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	eb e5       	ldi	r30, 0x5B	; 91
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 7b       	andi	r24, 0xBF	; 191
    15c2:	8c 93       	st	X, r24
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, INT1);
    15c6:	ab e5       	ldi	r26, 0x5B	; 91
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	eb e5       	ldi	r30, 0x5B	; 91
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 77       	andi	r24, 0x7F	; 127
    15d2:	8c 93       	st	X, r24
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <EXTI_voidDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, INT2);
    15d6:	ab e5       	ldi	r26, 0x5B	; 91
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	eb e5       	ldi	r30, 0x5B	; 91
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 7d       	andi	r24, 0xDF	; 223
    15e2:	8c 93       	st	X, r24
        break;
    }
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <EXTRI_voidSetCallBackINT>:

// Set a callback function for the specified external interrupt
void EXTRI_voidSetCallBackINT(u8 EXTI_Int, void (*ptrToFunction)(void)) {
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <EXTRI_voidSetCallBackINT+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <EXTRI_voidSetCallBackINT+0x8>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	7b 83       	std	Y+3, r23	; 0x03
    1602:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunction != NULL) {
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	39 f1       	breq	.+78     	; 0x165a <EXTRI_voidSetCallBackINT+0x6a>
        switch (EXTI_Int) {
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3d 83       	std	Y+5, r19	; 0x05
    1614:	2c 83       	std	Y+4, r18	; 0x04
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	81 f0       	breq	.+32     	; 0x1640 <EXTRI_voidSetCallBackINT+0x50>
    1620:	2c 81       	ldd	r18, Y+4	; 0x04
    1622:	3d 81       	ldd	r19, Y+5	; 0x05
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	91 f0       	breq	.+36     	; 0x164e <EXTRI_voidSetCallBackINT+0x5e>
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	9d 81       	ldd	r25, Y+5	; 0x05
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	a1 f4       	brne	.+40     	; 0x165a <EXTRI_voidSetCallBackINT+0x6a>
        case EXTI_INT0:
            private_pCallBackINT0 = ptrToFunction;
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	90 93 eb 00 	sts	0x00EB, r25
    163a:	80 93 ea 00 	sts	0x00EA, r24
    163e:	0d c0       	rjmp	.+26     	; 0x165a <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT1:
            private_pCallBackINT1 = ptrToFunction;
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	90 93 ed 00 	sts	0x00ED, r25
    1648:	80 93 ec 00 	sts	0x00EC, r24
    164c:	06 c0       	rjmp	.+12     	; 0x165a <EXTRI_voidSetCallBackINT+0x6a>
            break;
        case EXTI_INT2:
            private_pCallBackINT2 = ptrToFunction;
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	90 93 ef 00 	sts	0x00EF, r25
    1656:	80 93 ee 00 	sts	0x00EE, r24
            break;
        default:
            break;
        }
    }
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <__vector_1>:
 * ISR for external interrupts (0, 1, 2)
 ********************************************************************************************************/

// ISR for External Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    // Execute INT0 callback function
    if (private_pCallBackINT0 != NULL) {
    1694:	80 91 ea 00 	lds	r24, 0x00EA
    1698:	90 91 eb 00 	lds	r25, 0x00EB
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	29 f0       	breq	.+10     	; 0x16aa <__vector_1+0x40>
        private_pCallBackINT0();
    16a0:	e0 91 ea 00 	lds	r30, 0x00EA
    16a4:	f0 91 eb 00 	lds	r31, 0x00EB
    16a8:	09 95       	icall
    }
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	0f 90       	pop	r0
    16cc:	1f 90       	pop	r1
    16ce:	18 95       	reti

000016d0 <__vector_2>:

// ISR for External Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    16d0:	1f 92       	push	r1
    16d2:	0f 92       	push	r0
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	0f 92       	push	r0
    16d8:	11 24       	eor	r1, r1
    16da:	2f 93       	push	r18
    16dc:	3f 93       	push	r19
    16de:	4f 93       	push	r20
    16e0:	5f 93       	push	r21
    16e2:	6f 93       	push	r22
    16e4:	7f 93       	push	r23
    16e6:	8f 93       	push	r24
    16e8:	9f 93       	push	r25
    16ea:	af 93       	push	r26
    16ec:	bf 93       	push	r27
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    // Execute INT1 callback function
    if (private_pCallBackINT1 != NULL) {
    16fa:	80 91 ec 00 	lds	r24, 0x00EC
    16fe:	90 91 ed 00 	lds	r25, 0x00ED
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	29 f0       	breq	.+10     	; 0x1710 <__vector_2+0x40>
        private_pCallBackINT1();
    1706:	e0 91 ec 00 	lds	r30, 0x00EC
    170a:	f0 91 ed 00 	lds	r31, 0x00ED
    170e:	09 95       	icall
    }
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <__vector_3>:

// ISR for External Interrupt 2
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
    1736:	1f 92       	push	r1
    1738:	0f 92       	push	r0
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	0f 92       	push	r0
    173e:	11 24       	eor	r1, r1
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	4f 93       	push	r20
    1746:	5f 93       	push	r21
    1748:	6f 93       	push	r22
    174a:	7f 93       	push	r23
    174c:	8f 93       	push	r24
    174e:	9f 93       	push	r25
    1750:	af 93       	push	r26
    1752:	bf 93       	push	r27
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    // Execute INT2 callback function
    if (private_pCallBackINT2 != NULL) {
    1760:	80 91 ee 00 	lds	r24, 0x00EE
    1764:	90 91 ef 00 	lds	r25, 0x00EF
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	29 f0       	breq	.+10     	; 0x1776 <__vector_3+0x40>
        private_pCallBackINT2();
    176c:	e0 91 ee 00 	lds	r30, 0x00EE
    1770:	f0 91 ef 00 	lds	r31, 0x00EF
    1774:	09 95       	icall
    }
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <Dio_WriteChannel+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <Dio_WriteChannel+0x8>
    17a4:	0f 92       	push	r0
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	8a 83       	std	Y+2, r24	; 0x02
    17ac:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	86 95       	lsr	r24
    17b2:	86 95       	lsr	r24
    17b4:	86 95       	lsr	r24
    17b6:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	3d 83       	std	Y+5, r19	; 0x05
    17c0:	2c 83       	std	Y+4, r18	; 0x04
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	91 05       	cpc	r25, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <Dio_WriteChannel+0x32>
    17cc:	43 c0       	rjmp	.+134    	; 0x1854 <Dio_WriteChannel+0xb8>
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <Dio_WriteChannel+0x46>
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	71 f0       	breq	.+28     	; 0x17fc <Dio_WriteChannel+0x60>
    17e0:	ce c0       	rjmp	.+412    	; 0x197e <Dio_WriteChannel+0x1e2>
    17e2:	2c 81       	ldd	r18, Y+4	; 0x04
    17e4:	3d 81       	ldd	r19, Y+5	; 0x05
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <Dio_WriteChannel+0x52>
    17ec:	65 c0       	rjmp	.+202    	; 0x18b8 <Dio_WriteChannel+0x11c>
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	91 05       	cpc	r25, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <Dio_WriteChannel+0x5e>
    17f8:	91 c0       	rjmp	.+290    	; 0x191c <Dio_WriteChannel+0x180>
    17fa:	c1 c0       	rjmp	.+386    	; 0x197e <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	a1 f4       	brne	.+40     	; 0x182a <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    1802:	ab e3       	ldi	r26, 0x3B	; 59
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e3       	ldi	r30, 0x3B	; 59
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <Dio_WriteChannel+0x84>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <Dio_WriteChannel+0x80>
    1824:	84 2b       	or	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	aa c0       	rjmp	.+340    	; 0x197e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    182a:	ab e3       	ldi	r26, 0x3B	; 59
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	eb e3       	ldi	r30, 0x3B	; 59
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <Dio_WriteChannel+0xac>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <Dio_WriteChannel+0xa8>
    184c:	80 95       	com	r24
    184e:	84 23       	and	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	95 c0       	rjmp	.+298    	; 0x197e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	b9 f4       	brne	.+46     	; 0x1888 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    185a:	a8 e3       	ldi	r26, 0x38	; 56
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 01       	movw	r18, r24
    186e:	27 70       	andi	r18, 0x07	; 7
    1870:	30 70       	andi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <Dio_WriteChannel+0xe2>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <Dio_WriteChannel+0xde>
    1882:	84 2b       	or	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	7b c0       	rjmp	.+246    	; 0x197e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    1888:	a8 e3       	ldi	r26, 0x38	; 56
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e8 e3       	ldi	r30, 0x38	; 56
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9c 01       	movw	r18, r24
    189c:	27 70       	andi	r18, 0x07	; 7
    189e:	30 70       	andi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <Dio_WriteChannel+0x110>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <Dio_WriteChannel+0x10c>
    18b0:	80 95       	com	r24
    18b2:	84 23       	and	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	63 c0       	rjmp	.+198    	; 0x197e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	b9 f4       	brne	.+46     	; 0x18ec <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    18be:	a5 e3       	ldi	r26, 0x35	; 53
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e5 e3       	ldi	r30, 0x35	; 53
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9c 01       	movw	r18, r24
    18d2:	27 70       	andi	r18, 0x07	; 7
    18d4:	30 70       	andi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <Dio_WriteChannel+0x146>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <Dio_WriteChannel+0x142>
    18e6:	84 2b       	or	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	49 c0       	rjmp	.+146    	; 0x197e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    18ec:	a5 e3       	ldi	r26, 0x35	; 53
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9c 01       	movw	r18, r24
    1900:	27 70       	andi	r18, 0x07	; 7
    1902:	30 70       	andi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <Dio_WriteChannel+0x174>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <Dio_WriteChannel+0x170>
    1914:	80 95       	com	r24
    1916:	84 23       	and	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	31 c0       	rjmp	.+98     	; 0x197e <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	b9 f4       	brne	.+46     	; 0x1950 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 01       	movw	r18, r24
    1936:	27 70       	andi	r18, 0x07	; 7
    1938:	30 70       	andi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <Dio_WriteChannel+0x1aa>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <Dio_WriteChannel+0x1a6>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	17 c0       	rjmp	.+46     	; 0x197e <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    1950:	a2 e3       	ldi	r26, 0x32	; 50
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e2 e3       	ldi	r30, 0x32	; 50
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9c 01       	movw	r18, r24
    1964:	27 70       	andi	r18, 0x07	; 7
    1966:	30 70       	andi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 2e       	mov	r0, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <Dio_WriteChannel+0x1d8>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	0a 94       	dec	r0
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <Dio_WriteChannel+0x1d4>
    1978:	80 95       	com	r24
    197a:	84 23       	and	r24, r20
    197c:	8c 93       	st	X, r24
		}
		break;
	}
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <Dio_ReadChannel+0x6>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <Dio_ReadChannel+0x8>
    1996:	0f 92       	push	r0
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	86 95       	lsr	r24
    19a2:	86 95       	lsr	r24
    19a4:	86 95       	lsr	r24
    19a6:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3d 83       	std	Y+5, r19	; 0x05
    19b0:	2c 83       	std	Y+4, r18	; 0x04
    19b2:	4c 81       	ldd	r20, Y+4	; 0x04
    19b4:	5d 81       	ldd	r21, Y+5	; 0x05
    19b6:	41 30       	cpi	r20, 0x01	; 1
    19b8:	51 05       	cpc	r21, r1
    19ba:	49 f1       	breq	.+82     	; 0x1a0e <Dio_ReadChannel+0x80>
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	9d 81       	ldd	r25, Y+5	; 0x05
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	91 05       	cpc	r25, r1
    19c4:	34 f4       	brge	.+12     	; 0x19d2 <Dio_ReadChannel+0x44>
    19c6:	2c 81       	ldd	r18, Y+4	; 0x04
    19c8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ca:	21 15       	cp	r18, r1
    19cc:	31 05       	cpc	r19, r1
    19ce:	69 f0       	breq	.+26     	; 0x19ea <Dio_ReadChannel+0x5c>
    19d0:	59 c0       	rjmp	.+178    	; 0x1a84 <Dio_ReadChannel+0xf6>
    19d2:	4c 81       	ldd	r20, Y+4	; 0x04
    19d4:	5d 81       	ldd	r21, Y+5	; 0x05
    19d6:	42 30       	cpi	r20, 0x02	; 2
    19d8:	51 05       	cpc	r21, r1
    19da:	69 f1       	breq	.+90     	; 0x1a36 <Dio_ReadChannel+0xa8>
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	83 30       	cpi	r24, 0x03	; 3
    19e2:	91 05       	cpc	r25, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <Dio_ReadChannel+0x5a>
    19e6:	3b c0       	rjmp	.+118    	; 0x1a5e <Dio_ReadChannel+0xd0>
    19e8:	4d c0       	rjmp	.+154    	; 0x1a84 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    19ea:	e9 e3       	ldi	r30, 0x39	; 57
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a9 01       	movw	r20, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <Dio_ReadChannel+0x74>
    19fe:	55 95       	asr	r21
    1a00:	47 95       	ror	r20
    1a02:	8a 95       	dec	r24
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <Dio_ReadChannel+0x70>
    1a06:	ca 01       	movw	r24, r20
    1a08:	81 70       	andi	r24, 0x01	; 1
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	3b c0       	rjmp	.+118    	; 0x1a84 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    1a0e:	e6 e3       	ldi	r30, 0x36	; 54
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	87 70       	andi	r24, 0x07	; 7
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	a9 01       	movw	r20, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <Dio_ReadChannel+0x9c>
    1a26:	55 95       	asr	r21
    1a28:	47 95       	ror	r20
    1a2a:	8a 95       	dec	r24
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <Dio_ReadChannel+0x98>
    1a2e:	ca 01       	movw	r24, r20
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	27 c0       	rjmp	.+78     	; 0x1a84 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    1a36:	e3 e3       	ldi	r30, 0x33	; 51
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	87 70       	andi	r24, 0x07	; 7
    1a48:	90 70       	andi	r25, 0x00	; 0
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <Dio_ReadChannel+0xc4>
    1a4e:	55 95       	asr	r21
    1a50:	47 95       	ror	r20
    1a52:	8a 95       	dec	r24
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <Dio_ReadChannel+0xc0>
    1a56:	ca 01       	movw	r24, r20
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    1a5e:	e0 e3       	ldi	r30, 0x30	; 48
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	87 70       	andi	r24, 0x07	; 7
    1a70:	90 70       	andi	r25, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <Dio_ReadChannel+0xec>
    1a76:	55 95       	asr	r21
    1a78:	47 95       	ror	r20
    1a7a:	8a 95       	dec	r24
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <Dio_ReadChannel+0xe8>
    1a7e:	ca 01       	movw	r24, r20
    1a80:	81 70       	andi	r24, 0x01	; 1
    1a82:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <Dio_FlipChannel+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <Dio_FlipChannel+0x8>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	86 95       	lsr	r24
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3c 83       	std	Y+4, r19	; 0x04
    1ab2:	2b 83       	std	Y+3, r18	; 0x03
    1ab4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ab6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ab8:	41 30       	cpi	r20, 0x01	; 1
    1aba:	51 05       	cpc	r21, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <Dio_FlipChannel+0x2a>
    1abe:	3c c0       	rjmp	.+120    	; 0x1b38 <Dio_FlipChannel+0xa2>
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	34 f4       	brge	.+12     	; 0x1ad6 <Dio_FlipChannel+0x40>
    1aca:	2b 81       	ldd	r18, Y+3	; 0x03
    1acc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ace:	21 15       	cp	r18, r1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <Dio_FlipChannel+0x5a>
    1ad4:	ab c0       	rjmp	.+342    	; 0x1c2c <Dio_FlipChannel+0x196>
    1ad6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ad8:	5c 81       	ldd	r21, Y+4	; 0x04
    1ada:	42 30       	cpi	r20, 0x02	; 2
    1adc:	51 05       	cpc	r21, r1
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <Dio_FlipChannel+0x4c>
    1ae0:	54 c0       	rjmp	.+168    	; 0x1b8a <Dio_FlipChannel+0xf4>
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	83 30       	cpi	r24, 0x03	; 3
    1ae8:	91 05       	cpc	r25, r1
    1aea:	09 f4       	brne	.+2      	; 0x1aee <Dio_FlipChannel+0x58>
    1aec:	77 c0       	rjmp	.+238    	; 0x1bdc <Dio_FlipChannel+0x146>
    1aee:	9e c0       	rjmp	.+316    	; 0x1c2c <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    1af0:	ab e3       	ldi	r26, 0x3B	; 59
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	eb e3       	ldi	r30, 0x3B	; 59
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <Dio_FlipChannel+0x76>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	2a 95       	dec	r18
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <Dio_FlipChannel+0x72>
    1b10:	84 27       	eor	r24, r20
    1b12:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    1b14:	eb e3       	ldi	r30, 0x3B	; 59
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a9 01       	movw	r20, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <Dio_FlipChannel+0x96>
    1b28:	55 95       	asr	r21
    1b2a:	47 95       	ror	r20
    1b2c:	8a 95       	dec	r24
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <Dio_FlipChannel+0x92>
    1b30:	ca 01       	movw	r24, r20
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	7a c0       	rjmp	.+244    	; 0x1c2c <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    1b38:	a8 e3       	ldi	r26, 0x38	; 56
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e8 e3       	ldi	r30, 0x38	; 56
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	27 70       	andi	r18, 0x07	; 7
    1b4e:	30 70       	andi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <Dio_FlipChannel+0xc4>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	2a 95       	dec	r18
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <Dio_FlipChannel+0xc0>
    1b5e:	84 27       	eor	r24, r20
    1b60:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    1b62:	e8 e3       	ldi	r30, 0x38	; 56
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	87 70       	andi	r24, 0x07	; 7
    1b74:	90 70       	andi	r25, 0x00	; 0
    1b76:	a9 01       	movw	r20, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <Dio_FlipChannel+0xe8>
    1b7a:	55 95       	asr	r21
    1b7c:	47 95       	ror	r20
    1b7e:	8a 95       	dec	r24
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <Dio_FlipChannel+0xe4>
    1b82:	ca 01       	movw	r24, r20
    1b84:	81 70       	andi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	51 c0       	rjmp	.+162    	; 0x1c2c <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    1b8a:	a5 e3       	ldi	r26, 0x35	; 53
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e3       	ldi	r30, 0x35	; 53
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	27 70       	andi	r18, 0x07	; 7
    1ba0:	30 70       	andi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <Dio_FlipChannel+0x116>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	2a 95       	dec	r18
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <Dio_FlipChannel+0x112>
    1bb0:	84 27       	eor	r24, r20
    1bb2:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    1bb4:	e5 e3       	ldi	r30, 0x35	; 53
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	87 70       	andi	r24, 0x07	; 7
    1bc6:	90 70       	andi	r25, 0x00	; 0
    1bc8:	a9 01       	movw	r20, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <Dio_FlipChannel+0x13a>
    1bcc:	55 95       	asr	r21
    1bce:	47 95       	ror	r20
    1bd0:	8a 95       	dec	r24
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <Dio_FlipChannel+0x136>
    1bd4:	ca 01       	movw	r24, r20
    1bd6:	81 70       	andi	r24, 0x01	; 1
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	28 c0       	rjmp	.+80     	; 0x1c2c <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    1bdc:	a2 e3       	ldi	r26, 0x32	; 50
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e2 e3       	ldi	r30, 0x32	; 50
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9c 01       	movw	r18, r24
    1bf0:	27 70       	andi	r18, 0x07	; 7
    1bf2:	30 70       	andi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <Dio_FlipChannel+0x168>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	2a 95       	dec	r18
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <Dio_FlipChannel+0x164>
    1c02:	84 27       	eor	r24, r20
    1c04:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    1c06:	e2 e3       	ldi	r30, 0x32	; 50
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	87 70       	andi	r24, 0x07	; 7
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <Dio_FlipChannel+0x18c>
    1c1e:	55 95       	asr	r21
    1c20:	47 95       	ror	r20
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <Dio_FlipChannel+0x188>
    1c26:	ca 01       	movw	r24, r20
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <Dio_WritePort+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <Dio_WritePort+0x8>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	3c 83       	std	Y+4, r19	; 0x04
    1c54:	2b 83       	std	Y+3, r18	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	d1 f0       	breq	.+52     	; 0x1c94 <Dio_WritePort+0x58>
    1c60:	2b 81       	ldd	r18, Y+3	; 0x03
    1c62:	3c 81       	ldd	r19, Y+4	; 0x04
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	31 05       	cpc	r19, r1
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <Dio_WritePort+0x38>
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	61 f0       	breq	.+24     	; 0x1c8a <Dio_WritePort+0x4e>
    1c72:	1e c0       	rjmp	.+60     	; 0x1cb0 <Dio_WritePort+0x74>
    1c74:	2b 81       	ldd	r18, Y+3	; 0x03
    1c76:	3c 81       	ldd	r19, Y+4	; 0x04
    1c78:	22 30       	cpi	r18, 0x02	; 2
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	81 f0       	breq	.+32     	; 0x1c9e <Dio_WritePort+0x62>
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	83 30       	cpi	r24, 0x03	; 3
    1c84:	91 05       	cpc	r25, r1
    1c86:	81 f0       	breq	.+32     	; 0x1ca8 <Dio_WritePort+0x6c>
    1c88:	13 c0       	rjmp	.+38     	; 0x1cb0 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    1c8a:	eb e3       	ldi	r30, 0x3B	; 59
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	80 83       	st	Z, r24
    1c92:	0e c0       	rjmp	.+28     	; 0x1cb0 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    1c94:	e8 e3       	ldi	r30, 0x38	; 56
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	80 83       	st	Z, r24
    1c9c:	09 c0       	rjmp	.+18     	; 0x1cb0 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    1c9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	80 83       	st	Z, r24
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    1ca8:	e2 e3       	ldi	r30, 0x32	; 50
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	80 83       	st	Z, r24
		break;
	}
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <ADC_Init>:
 */

#include "../includes/ADC_interface.h"  // Include the ADC interface header file
#include <avr/io.h>         // Include AVR I/O definitions
#include "../../DIO/DIO_interface.h"
void ADC_Init(void) {
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	// Set reference voltage to AVCC with external capacitor at AREF pin
#if ADC_AREF_MODE == ADC_AREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_AREF_MODE == ADC_AVCC
	SET_BIT(ADMUX,REFS0);
    1cc6:	a7 e2       	ldi	r26, 0x27	; 39
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e7 e2       	ldi	r30, 0x27	; 39
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 64       	ori	r24, 0x40	; 64
    1cd2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    1cd4:	a7 e2       	ldi	r26, 0x27	; 39
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e7 e2       	ldi	r30, 0x27	; 39
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8f 77       	andi	r24, 0x7F	; 127
    1ce0:	8c 93       	st	X, r24
#endif

//	ADMUX = (1 << REFS0);

#if 	ADC_RESULT_ADJUSTMENT_MODE ==ADC_LEFT_ADJUST_THE_RESULT
	SET_BIT(ADMUX,ADLAR);
    1ce2:	a7 e2       	ldi	r26, 0x27	; 39
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e7 e2       	ldi	r30, 0x27	; 39
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	80 62       	ori	r24, 0x20	; 32
    1cee:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_32
    SET_BIT(ADCSRA,ADPS0);
    CLR_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_64
    CLR_BIT(ADCSRA,ADPS0);
    1cf0:	a6 e2       	ldi	r26, 0x26	; 38
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e6 e2       	ldi	r30, 0x26	; 38
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8e 7f       	andi	r24, 0xFE	; 254
    1cfc:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    1cfe:	a6 e2       	ldi	r26, 0x26	; 38
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e6 e2       	ldi	r30, 0x26	; 38
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	82 60       	ori	r24, 0x02	; 2
    1d0a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS2);
    1d0c:	a6 e2       	ldi	r26, 0x26	; 38
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e6 e2       	ldi	r30, 0x26	; 38
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	84 60       	ori	r24, 0x04	; 4
    1d18:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADPS1);
    SET_BIT(ADCSRA,ADPS2);
#endif

    // Enable the ADC
   	     SET_BIT(ADCSRA,ADEN);
    1d1a:	a6 e2       	ldi	r26, 0x26	; 38
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e6 e2       	ldi	r30, 0x26	; 38
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 68       	ori	r24, 0x80	; 128
    1d26:	8c 93       	st	X, r24
    //    ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
//	SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);

}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <ADC_ReadChannel>:

u16 ADC_ReadChannel(u8 channel) {
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <ADC_ReadChannel+0x6>
    1d34:	0f 92       	push	r0
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
	u16 result=0;
    1d3c:	1a 82       	std	Y+2, r1	; 0x02
    1d3e:	19 82       	std	Y+1, r1	; 0x01
	// Select the ADC channel           0x00000111
                //    0x1111 1000
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
    1d40:	a7 e2       	ldi	r26, 0x27	; 39
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e7 e2       	ldi	r30, 0x27	; 39
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	98 7f       	andi	r25, 0xF8	; 248
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	87 70       	andi	r24, 0x07	; 7
    1d52:	89 2b       	or	r24, r25
    1d54:	8c 93       	st	X, r24

    // Start the conversion
    SET_BIT(ADCSRA,ADSC);
    1d56:	a6 e2       	ldi	r26, 0x26	; 38
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e6 e2       	ldi	r30, 0x26	; 38
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 64       	ori	r24, 0x40	; 64
    1d62:	8c 93       	st	X, r24
   // ADCSRA |= (1 << ADSC);

    // Wait for the conversion to complete
    while (ADCSRA & (1 << ADSC));
    1d64:	e6 e2       	ldi	r30, 0x26	; 38
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	80 74       	andi	r24, 0x40	; 64
    1d70:	90 70       	andi	r25, 0x00	; 0
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	b9 f7       	brne	.-18     	; 0x1d64 <ADC_ReadChannel+0x36>

#if ADC_RESULT_ADJUSTMENT_MODE == ADC_LEFT_ADJUST_THE_RESULT
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
    result=(ADCL>>6);
    1d76:	e4 e2       	ldi	r30, 0x24	; 36
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	82 95       	swap	r24
    1d7e:	86 95       	lsr	r24
    1d80:	86 95       	lsr	r24
    1d82:	83 70       	andi	r24, 0x03	; 3
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    result|=(ADCH<<2);
    1d8c:	e5 e2       	ldi	r30, 0x25	; 37
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	9c 01       	movw	r18, r24
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	82 2b       	or	r24, r18
    1da6:	93 2b       	or	r25, r19
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
    // Return the ADC result as a 16-bit value (combining ADCL and ADCH)
  result = ADCL;
  result|=(ADCH << 8);
    // result = (ADCH<<8) | ADCL;
    #endif
    return result;
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <SevenSeg_SegEnable>:

#include "SEVEN_SEGMENT.h"
#include <avr/io.h>
#include <avr/delay.h>

void SevenSeg_SegEnable(SegNumber seg) {
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <SevenSeg_SegEnable+0x6>
    1dc2:	0f 92       	push	r0
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	switch (seg) {
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	3b 83       	std	Y+3, r19	; 0x03
    1dd2:	2a 83       	std	Y+2, r18	; 0x02
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	91 05       	cpc	r25, r1
    1ddc:	b1 f0       	breq	.+44     	; 0x1e0a <SevenSeg_SegEnable+0x4e>
    1dde:	2a 81       	ldd	r18, Y+2	; 0x02
    1de0:	3b 81       	ldd	r19, Y+3	; 0x03
    1de2:	24 30       	cpi	r18, 0x04	; 4
    1de4:	31 05       	cpc	r19, r1
    1de6:	34 f4       	brge	.+12     	; 0x1df4 <SevenSeg_SegEnable+0x38>
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	9b 81       	ldd	r25, Y+3	; 0x03
    1dec:	82 30       	cpi	r24, 0x02	; 2
    1dee:	91 05       	cpc	r25, r1
    1df0:	e9 f0       	breq	.+58     	; 0x1e2c <SevenSeg_SegEnable+0x70>
    1df2:	4e c0       	rjmp	.+156    	; 0x1e90 <SevenSeg_SegEnable+0xd4>
    1df4:	2a 81       	ldd	r18, Y+2	; 0x02
    1df6:	3b 81       	ldd	r19, Y+3	; 0x03
    1df8:	2d 30       	cpi	r18, 0x0D	; 13
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	41 f1       	breq	.+80     	; 0x1e4e <SevenSeg_SegEnable+0x92>
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	8e 30       	cpi	r24, 0x0E	; 14
    1e04:	91 05       	cpc	r25, r1
    1e06:	a1 f1       	breq	.+104    	; 0x1e70 <SevenSeg_SegEnable+0xb4>
    1e08:	43 c0       	rjmp	.+134    	; 0x1e90 <SevenSeg_SegEnable+0xd4>
	case SEG_1:
		Dio_WriteChannel(SEG_2, 1);
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1e1a:	8e e0       	ldi	r24, 0x0E	; 14
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 0);
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    1e2a:	32 c0       	rjmp	.+100    	; 0x1e90 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_2:
		Dio_WriteChannel(SEG_1, 1);
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1e34:	8d e0       	ldi	r24, 0x0D	; 13
    1e36:	61 e0       	ldi	r22, 0x01	; 1
    1e38:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1e3c:	8e e0       	ldi	r24, 0x0E	; 14
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_2, 0);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    1e4c:	21 c0       	rjmp	.+66     	; 0x1e90 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_3:
		Dio_WriteChannel(SEG_2, 1);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 1);
    1e5e:	8e e0       	ldi	r24, 0x0E	; 14
    1e60:	61 e0       	ldi	r22, 0x01	; 1
    1e62:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 0);
    1e66:	8d e0       	ldi	r24, 0x0D	; 13
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    1e6e:	10 c0       	rjmp	.+32     	; 0x1e90 <SevenSeg_SegEnable+0xd4>

		break;
	case SEG_4:
		Dio_WriteChannel(SEG_2, 1);
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_3, 1);
    1e78:	8d e0       	ldi	r24, 0x0D	; 13
    1e7a:	61 e0       	ldi	r22, 0x01	; 1
    1e7c:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_1, 1);
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(SEG_4, 0);
    1e88:	8e e0       	ldi	r24, 0x0E	; 14
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>

		break;

	}

}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <SevenSeg_Send>:
//
//void SevenSeg_SegDisable(SegNumber seg){
//	Dio_WriteChannel(seg,1);
//}

void SevenSeg_Send(u8 num1, u8 num2, u8 num3, u8 num4) {
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	ec 97       	sbiw	r28, 0x3c	; 60
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	89 af       	std	Y+57, r24	; 0x39
    1eb2:	6a af       	std	Y+58, r22	; 0x3a
    1eb4:	4b af       	std	Y+59, r20	; 0x3b
    1eb6:	2c af       	std	Y+60, r18	; 0x3c

	SevenSeg_SegEnable(SEG_1);
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num1);
    1ebe:	89 ad       	ldd	r24, Y+57	; 0x39
    1ec0:	0e 94 45 11 	call	0x228a	; 0x228a <SevenSeg_SendOneSeg>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a8 ec       	ldi	r26, 0xC8	; 200
    1eca:	b2 e4       	ldi	r27, 0x42	; 66
    1ecc:	8d ab       	std	Y+53, r24	; 0x35
    1ece:	9e ab       	std	Y+54, r25	; 0x36
    1ed0:	af ab       	std	Y+55, r26	; 0x37
    1ed2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eda:	98 ad       	ldd	r25, Y+56	; 0x38
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a e7       	ldi	r20, 0x7A	; 122
    1ee2:	55 e4       	ldi	r21, 0x45	; 69
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	89 ab       	std	Y+49, r24	; 0x31
    1eee:	9a ab       	std	Y+50, r25	; 0x32
    1ef0:	ab ab       	std	Y+51, r26	; 0x33
    1ef2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef8:	8b a9       	ldd	r24, Y+51	; 0x33
    1efa:	9c a9       	ldd	r25, Y+52	; 0x34
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <SevenSeg_Send+0x7a>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <SevenSeg_Send+0xf8>
	else if (__tmp > 65535)
    1f16:	69 a9       	ldd	r22, Y+49	; 0x31
    1f18:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	4c f5       	brge	.+82     	; 0x1f80 <SevenSeg_Send+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f30:	7e a9       	ldd	r23, Y+54	; 0x36
    1f32:	8f a9       	ldd	r24, Y+55	; 0x37
    1f34:	98 ad       	ldd	r25, Y+56	; 0x38
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <SevenSeg_Send+0xda>
    1f58:	80 e9       	ldi	r24, 0x90	; 144
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	9e a7       	std	Y+46, r25	; 0x2e
    1f5e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f62:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <SevenSeg_Send+0xc8>
    1f68:	9e a7       	std	Y+46, r25	; 0x2e
    1f6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	98 ab       	std	Y+48, r25	; 0x30
    1f74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f78:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <SevenSeg_Send+0xbc>
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <SevenSeg_Send+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	69 a9       	ldd	r22, Y+49	; 0x31
    1f82:	7a a9       	ldd	r23, Y+50	; 0x32
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
    1f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f96:	98 a9       	ldd	r25, Y+48	; 0x30
    1f98:	9c a7       	std	Y+44, r25	; 0x2c
    1f9a:	8b a7       	std	Y+43, r24	; 0x2b
    1f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <SevenSeg_Send+0x104>
    1fa4:	9c a7       	std	Y+44, r25	; 0x2c
    1fa6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_2);
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
    1faa:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num2);
    1fae:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fb0:	0e 94 45 11 	call	0x228a	; 0x228a <SevenSeg_SendOneSeg>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a8 ec       	ldi	r26, 0xC8	; 200
    1fba:	b2 e4       	ldi	r27, 0x42	; 66
    1fbc:	8f a3       	std	Y+39, r24	; 0x27
    1fbe:	98 a7       	std	Y+40, r25	; 0x28
    1fc0:	a9 a7       	std	Y+41, r26	; 0x29
    1fc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	55 e4       	ldi	r21, 0x45	; 69
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8b a3       	std	Y+35, r24	; 0x23
    1fde:	9c a3       	std	Y+36, r25	; 0x24
    1fe0:	ad a3       	std	Y+37, r26	; 0x25
    1fe2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <SevenSeg_Send+0x16a>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9a a3       	std	Y+34, r25	; 0x22
    2002:	89 a3       	std	Y+33, r24	; 0x21
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <SevenSeg_Send+0x1e8>
	else if (__tmp > 65535)
    2006:	6b a1       	ldd	r22, Y+35	; 0x23
    2008:	7c a1       	ldd	r23, Y+36	; 0x24
    200a:	8d a1       	ldd	r24, Y+37	; 0x25
    200c:	9e a1       	ldd	r25, Y+38	; 0x26
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <SevenSeg_Send+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6f a1       	ldd	r22, Y+39	; 0x27
    2020:	78 a5       	ldd	r23, Y+40	; 0x28
    2022:	89 a5       	ldd	r24, Y+41	; 0x29
    2024:	9a a5       	ldd	r25, Y+42	; 0x2a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	9a a3       	std	Y+34, r25	; 0x22
    2044:	89 a3       	std	Y+33, r24	; 0x21
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <SevenSeg_Send+0x1ca>
    2048:	80 e9       	ldi	r24, 0x90	; 144
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	98 a3       	std	Y+32, r25	; 0x20
    204e:	8f 8f       	std	Y+31, r24	; 0x1f
    2050:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2052:	98 a1       	ldd	r25, Y+32	; 0x20
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <SevenSeg_Send+0x1b8>
    2058:	98 a3       	std	Y+32, r25	; 0x20
    205a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	89 a1       	ldd	r24, Y+33	; 0x21
    205e:	9a a1       	ldd	r25, Y+34	; 0x22
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	9a a3       	std	Y+34, r25	; 0x22
    2064:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	89 a1       	ldd	r24, Y+33	; 0x21
    2068:	9a a1       	ldd	r25, Y+34	; 0x22
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <SevenSeg_Send+0x1ac>
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <SevenSeg_Send+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	6b a1       	ldd	r22, Y+35	; 0x23
    2072:	7c a1       	ldd	r23, Y+36	; 0x24
    2074:	8d a1       	ldd	r24, Y+37	; 0x25
    2076:	9e a1       	ldd	r25, Y+38	; 0x26
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9a a3       	std	Y+34, r25	; 0x22
    2082:	89 a3       	std	Y+33, r24	; 0x21
    2084:	89 a1       	ldd	r24, Y+33	; 0x21
    2086:	9a a1       	ldd	r25, Y+34	; 0x22
    2088:	9e 8f       	std	Y+30, r25	; 0x1e
    208a:	8d 8f       	std	Y+29, r24	; 0x1d
    208c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <SevenSeg_Send+0x1f4>
    2094:	9e 8f       	std	Y+30, r25	; 0x1e
    2096:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_3);
    2098:	8d e0       	ldi	r24, 0x0D	; 13
    209a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num3);
    209e:	8b ad       	ldd	r24, Y+59	; 0x3b
    20a0:	0e 94 45 11 	call	0x228a	; 0x228a <SevenSeg_SendOneSeg>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a8 ec       	ldi	r26, 0xC8	; 200
    20aa:	b2 e4       	ldi	r27, 0x42	; 66
    20ac:	89 8f       	std	Y+25, r24	; 0x19
    20ae:	9a 8f       	std	Y+26, r25	; 0x1a
    20b0:	ab 8f       	std	Y+27, r26	; 0x1b
    20b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	69 8d       	ldd	r22, Y+25	; 0x19
    20b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	55 e4       	ldi	r21, 0x45	; 69
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8d 8b       	std	Y+21, r24	; 0x15
    20ce:	9e 8b       	std	Y+22, r25	; 0x16
    20d0:	af 8b       	std	Y+23, r26	; 0x17
    20d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <SevenSeg_Send+0x25a>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 8b       	std	Y+20, r25	; 0x14
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <SevenSeg_Send+0x2d8>
	else if (__tmp > 65535)
    20f6:	6d 89       	ldd	r22, Y+21	; 0x15
    20f8:	7e 89       	ldd	r23, Y+22	; 0x16
    20fa:	8f 89       	ldd	r24, Y+23	; 0x17
    20fc:	98 8d       	ldd	r25, Y+24	; 0x18
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <SevenSeg_Send+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	69 8d       	ldd	r22, Y+25	; 0x19
    2110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9c 8b       	std	Y+20, r25	; 0x14
    2134:	8b 8b       	std	Y+19, r24	; 0x13
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <SevenSeg_Send+0x2ba>
    2138:	80 e9       	ldi	r24, 0x90	; 144
    213a:	91 e0       	ldi	r25, 0x01	; 1
    213c:	9a 8b       	std	Y+18, r25	; 0x12
    213e:	89 8b       	std	Y+17, r24	; 0x11
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	9a 89       	ldd	r25, Y+18	; 0x12
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <SevenSeg_Send+0x2a8>
    2148:	9a 8b       	std	Y+18, r25	; 0x12
    214a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	8b 89       	ldd	r24, Y+19	; 0x13
    214e:	9c 89       	ldd	r25, Y+20	; 0x14
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9c 8b       	std	Y+20, r25	; 0x14
    2154:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <SevenSeg_Send+0x29c>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <SevenSeg_Send+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6d 89       	ldd	r22, Y+21	; 0x15
    2162:	7e 89       	ldd	r23, Y+22	; 0x16
    2164:	8f 89       	ldd	r24, Y+23	; 0x17
    2166:	98 8d       	ldd	r25, Y+24	; 0x18
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	8b 89       	ldd	r24, Y+19	; 0x13
    2176:	9c 89       	ldd	r25, Y+20	; 0x14
    2178:	98 8b       	std	Y+16, r25	; 0x10
    217a:	8f 87       	std	Y+15, r24	; 0x0f
    217c:	8f 85       	ldd	r24, Y+15	; 0x0f
    217e:	98 89       	ldd	r25, Y+16	; 0x10
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <SevenSeg_Send+0x2e4>
    2184:	98 8b       	std	Y+16, r25	; 0x10
    2186:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	SevenSeg_SegEnable(SEG_4);
    2188:	8e e0       	ldi	r24, 0x0E	; 14
    218a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <SevenSeg_SegEnable>

	SevenSeg_SendOneSeg(num4);
    218e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2190:	0e 94 45 11 	call	0x228a	; 0x228a <SevenSeg_SendOneSeg>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a8 ec       	ldi	r26, 0xC8	; 200
    219a:	b2 e4       	ldi	r27, 0x42	; 66
    219c:	8b 87       	std	Y+11, r24	; 0x0b
    219e:	9c 87       	std	Y+12, r25	; 0x0c
    21a0:	ad 87       	std	Y+13, r26	; 0x0d
    21a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	4a e7       	ldi	r20, 0x7A	; 122
    21b2:	55 e4       	ldi	r21, 0x45	; 69
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8f 83       	std	Y+7, r24	; 0x07
    21be:	98 87       	std	Y+8, r25	; 0x08
    21c0:	a9 87       	std	Y+9, r26	; 0x09
    21c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f e3       	ldi	r21, 0x3F	; 63
    21d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d8:	88 23       	and	r24, r24
    21da:	2c f4       	brge	.+10     	; 0x21e6 <SevenSeg_Send+0x34a>
		__ticks = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <SevenSeg_Send+0x3c8>
	else if (__tmp > 65535)
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	4c f5       	brge	.+82     	; 0x2250 <SevenSeg_Send+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2200:	7c 85       	ldd	r23, Y+12	; 0x0c
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <SevenSeg_Send+0x3aa>
    2228:	80 e9       	ldi	r24, 0x90	; 144
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <SevenSeg_Send+0x398>
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <SevenSeg_Send+0x38c>
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <SevenSeg_Send+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <SevenSeg_Send+0x3d4>
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

}
    2278:	ec 96       	adiw	r28, 0x3c	; 60
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <SevenSeg_SendOneSeg>:
void SevenSeg_SendOneSeg(u8 number) //SevenSeg_Type type ,
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	89 83       	std	Y+1, r24	; 0x01
//	SevenSeg_SegEnable(seg);
	Dio_WriteChannel(PB_0, GET_BIT(number, 0));
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	98 2f       	mov	r25, r24
    229a:	91 70       	andi	r25, 0x01	; 1
    229c:	88 e0       	ldi	r24, 0x08	; 8
    229e:	69 2f       	mov	r22, r25
    22a0:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(number, 1));
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	86 95       	lsr	r24
    22a8:	98 2f       	mov	r25, r24
    22aa:	91 70       	andi	r25, 0x01	; 1
    22ac:	89 e0       	ldi	r24, 0x09	; 9
    22ae:	69 2f       	mov	r22, r25
    22b0:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(number, 2));
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	86 95       	lsr	r24
    22b8:	86 95       	lsr	r24
    22ba:	98 2f       	mov	r25, r24
    22bc:	91 70       	andi	r25, 0x01	; 1
    22be:	8a e0       	ldi	r24, 0x0A	; 10
    22c0:	69 2f       	mov	r22, r25
    22c2:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(number, 3));
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	86 95       	lsr	r24
    22ca:	86 95       	lsr	r24
    22cc:	86 95       	lsr	r24
    22ce:	98 2f       	mov	r25, r24
    22d0:	91 70       	andi	r25, 0x01	; 1
    22d2:	8c e0       	ldi	r24, 0x0C	; 12
    22d4:	69 2f       	mov	r22, r25
    22d6:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
}
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <lcd4_Init>:
 * lcd4_Init : This function initializes the LCD 4bit
 * @param	void
 * @return	void
 */
void lcd4_Init(void)
{
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	c6 54       	subi	r28, 0x46	; 70
    22f0:	d0 40       	sbci	r29, 0x00	; 0
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	fe 01       	movw	r30, r28
    22fe:	ed 5b       	subi	r30, 0xBD	; 189
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a8 e4       	ldi	r26, 0x48	; 72
    2308:	b2 e4       	ldi	r27, 0x42	; 66
    230a:	80 83       	st	Z, r24
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	a2 83       	std	Z+2, r26	; 0x02
    2310:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	8e 01       	movw	r16, r28
    2314:	01 5c       	subi	r16, 0xC1	; 193
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	ed 5b       	subi	r30, 0xBD	; 189
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a e7       	ldi	r20, 0x7A	; 122
    232c:	55 e4       	ldi	r21, 0x45	; 69
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	f8 01       	movw	r30, r16
    2338:	80 83       	st	Z, r24
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	a2 83       	std	Z+2, r26	; 0x02
    233e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2340:	fe 01       	movw	r30, r28
    2342:	ff 96       	adiw	r30, 0x3f	; 63
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <lcd4_Init+0x84>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9e af       	std	Y+62, r25	; 0x3e
    2362:	8d af       	std	Y+61, r24	; 0x3d
    2364:	46 c0       	rjmp	.+140    	; 0x23f2 <lcd4_Init+0x110>
	else if (__tmp > 65535)
    2366:	fe 01       	movw	r30, r28
    2368:	ff 96       	adiw	r30, 0x3f	; 63
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	64 f5       	brge	.+88     	; 0x23da <lcd4_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	fe 01       	movw	r30, r28
    2384:	ed 5b       	subi	r30, 0xBD	; 189
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e af       	std	Y+62, r25	; 0x3e
    23ae:	8d af       	std	Y+61, r24	; 0x3d
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <lcd4_Init+0xee>
    23b2:	80 e9       	ldi	r24, 0x90	; 144
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	9c af       	std	Y+60, r25	; 0x3c
    23b8:	8b af       	std	Y+59, r24	; 0x3b
    23ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    23bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <lcd4_Init+0xdc>
    23c2:	9c af       	std	Y+60, r25	; 0x3c
    23c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e af       	std	Y+62, r25	; 0x3e
    23ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <lcd4_Init+0xd0>
    23d8:	16 c0       	rjmp	.+44     	; 0x2406 <lcd4_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	fe 01       	movw	r30, r28
    23dc:	ff 96       	adiw	r30, 0x3f	; 63
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9e af       	std	Y+62, r25	; 0x3e
    23f0:	8d af       	std	Y+61, r24	; 0x3d
    23f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f6:	9a af       	std	Y+58, r25	; 0x3a
    23f8:	89 af       	std	Y+57, r24	; 0x39
    23fa:	89 ad       	ldd	r24, Y+57	; 0x39
    23fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <lcd4_Init+0x11c>
    2402:	9a af       	std	Y+58, r25	; 0x3a
    2404:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD4_Command_Write(LCD_CURSOR_HOME);
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
	LCD4_Command_Write(LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);	//LCD 4bit mode, 2 line
    240c:	88 e2       	ldi	r24, 0x28	; 40
    240e:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 e8       	ldi	r26, 0x80	; 128
    2418:	bf e3       	ldi	r27, 0x3F	; 63
    241a:	8d ab       	std	Y+53, r24	; 0x35
    241c:	9e ab       	std	Y+54, r25	; 0x36
    241e:	af ab       	std	Y+55, r26	; 0x37
    2420:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6d a9       	ldd	r22, Y+53	; 0x35
    2424:	7e a9       	ldd	r23, Y+54	; 0x36
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a e7       	ldi	r20, 0x7A	; 122
    2430:	55 e4       	ldi	r21, 0x45	; 69
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	89 ab       	std	Y+49, r24	; 0x31
    243c:	9a ab       	std	Y+50, r25	; 0x32
    243e:	ab ab       	std	Y+51, r26	; 0x33
    2440:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2442:	69 a9       	ldd	r22, Y+49	; 0x31
    2444:	7a a9       	ldd	r23, Y+50	; 0x32
    2446:	8b a9       	ldd	r24, Y+51	; 0x33
    2448:	9c a9       	ldd	r25, Y+52	; 0x34
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <lcd4_Init+0x182>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	98 ab       	std	Y+48, r25	; 0x30
    2460:	8f a7       	std	Y+47, r24	; 0x2f
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <lcd4_Init+0x200>
	else if (__tmp > 65535)
    2464:	69 a9       	ldd	r22, Y+49	; 0x31
    2466:	7a a9       	ldd	r23, Y+50	; 0x32
    2468:	8b a9       	ldd	r24, Y+51	; 0x33
    246a:	9c a9       	ldd	r25, Y+52	; 0x34
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <lcd4_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6d a9       	ldd	r22, Y+53	; 0x35
    247e:	7e a9       	ldd	r23, Y+54	; 0x36
    2480:	8f a9       	ldd	r24, Y+55	; 0x37
    2482:	98 ad       	ldd	r25, Y+56	; 0x38
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	98 ab       	std	Y+48, r25	; 0x30
    24a2:	8f a7       	std	Y+47, r24	; 0x2f
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <lcd4_Init+0x1e2>
    24a6:	80 e9       	ldi	r24, 0x90	; 144
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	9e a7       	std	Y+46, r25	; 0x2e
    24ac:	8d a7       	std	Y+45, r24	; 0x2d
    24ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <lcd4_Init+0x1d0>
    24b6:	9e a7       	std	Y+46, r25	; 0x2e
    24b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    24bc:	98 a9       	ldd	r25, Y+48	; 0x30
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c6:	98 a9       	ldd	r25, Y+48	; 0x30
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <lcd4_Init+0x1c4>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <lcd4_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	69 a9       	ldd	r22, Y+49	; 0x31
    24d0:	7a a9       	ldd	r23, Y+50	; 0x32
    24d2:	8b a9       	ldd	r24, Y+51	; 0x33
    24d4:	9c a9       	ldd	r25, Y+52	; 0x34
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	98 ab       	std	Y+48, r25	; 0x30
    24e0:	8f a7       	std	Y+47, r24	; 0x2f
    24e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e4:	98 a9       	ldd	r25, Y+48	; 0x30
    24e6:	9c a7       	std	Y+44, r25	; 0x2c
    24e8:	8b a7       	std	Y+43, r24	; 0x2b
    24ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <lcd4_Init+0x20c>
    24f2:	9c a7       	std	Y+44, r25	; 0x2c
    24f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD4_Command_Write(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_ON_BLOCK_CURSOR_ON); //cursor on off,blink  0x0f,0x0c,0x0e
    24f6:	8f e0       	ldi	r24, 0x0F	; 15
    24f8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 e8       	ldi	r26, 0x80	; 128
    2502:	bf e3       	ldi	r27, 0x3F	; 63
    2504:	8f a3       	std	Y+39, r24	; 0x27
    2506:	98 a7       	std	Y+40, r25	; 0x28
    2508:	a9 a7       	std	Y+41, r26	; 0x29
    250a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	6f a1       	ldd	r22, Y+39	; 0x27
    250e:	78 a5       	ldd	r23, Y+40	; 0x28
    2510:	89 a5       	ldd	r24, Y+41	; 0x29
    2512:	9a a5       	ldd	r25, Y+42	; 0x2a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a e7       	ldi	r20, 0x7A	; 122
    251a:	55 e4       	ldi	r21, 0x45	; 69
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	8b a3       	std	Y+35, r24	; 0x23
    2526:	9c a3       	std	Y+36, r25	; 0x24
    2528:	ad a3       	std	Y+37, r26	; 0x25
    252a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2540:	88 23       	and	r24, r24
    2542:	2c f4       	brge	.+10     	; 0x254e <lcd4_Init+0x26c>
		__ticks = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9a a3       	std	Y+34, r25	; 0x22
    254a:	89 a3       	std	Y+33, r24	; 0x21
    254c:	3f c0       	rjmp	.+126    	; 0x25cc <lcd4_Init+0x2ea>
	else if (__tmp > 65535)
    254e:	6b a1       	ldd	r22, Y+35	; 0x23
    2550:	7c a1       	ldd	r23, Y+36	; 0x24
    2552:	8d a1       	ldd	r24, Y+37	; 0x25
    2554:	9e a1       	ldd	r25, Y+38	; 0x26
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2562:	18 16       	cp	r1, r24
    2564:	4c f5       	brge	.+82     	; 0x25b8 <lcd4_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	6f a1       	ldd	r22, Y+39	; 0x27
    2568:	78 a5       	ldd	r23, Y+40	; 0x28
    256a:	89 a5       	ldd	r24, Y+41	; 0x29
    256c:	9a a5       	ldd	r25, Y+42	; 0x2a
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9a a3       	std	Y+34, r25	; 0x22
    258c:	89 a3       	std	Y+33, r24	; 0x21
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <lcd4_Init+0x2cc>
    2590:	80 e9       	ldi	r24, 0x90	; 144
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	98 a3       	std	Y+32, r25	; 0x20
    2596:	8f 8f       	std	Y+31, r24	; 0x1f
    2598:	8f 8d       	ldd	r24, Y+31	; 0x1f
    259a:	98 a1       	ldd	r25, Y+32	; 0x20
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <lcd4_Init+0x2ba>
    25a0:	98 a3       	std	Y+32, r25	; 0x20
    25a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	89 a1       	ldd	r24, Y+33	; 0x21
    25a6:	9a a1       	ldd	r25, Y+34	; 0x22
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9a a3       	std	Y+34, r25	; 0x22
    25ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	89 a1       	ldd	r24, Y+33	; 0x21
    25b0:	9a a1       	ldd	r25, Y+34	; 0x22
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <lcd4_Init+0x2ae>
    25b6:	14 c0       	rjmp	.+40     	; 0x25e0 <lcd4_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ba:	7c a1       	ldd	r23, Y+36	; 0x24
    25bc:	8d a1       	ldd	r24, Y+37	; 0x25
    25be:	9e a1       	ldd	r25, Y+38	; 0x26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	9e 8f       	std	Y+30, r25	; 0x1e
    25d2:	8d 8f       	std	Y+29, r24	; 0x1d
    25d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <lcd4_Init+0x2f6>
    25dc:	9e 8f       	std	Y+30, r25	; 0x1e
    25de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD4_Command_Write(LCD_CLEAR_COMMAND); //clear screen
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e4       	ldi	r27, 0x40	; 64
    25ee:	89 8f       	std	Y+25, r24	; 0x19
    25f0:	9a 8f       	std	Y+26, r25	; 0x1a
    25f2:	ab 8f       	std	Y+27, r26	; 0x1b
    25f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	69 8d       	ldd	r22, Y+25	; 0x19
    25f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	55 e4       	ldi	r21, 0x45	; 69
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8d 8b       	std	Y+21, r24	; 0x15
    2610:	9e 8b       	std	Y+22, r25	; 0x16
    2612:	af 8b       	std	Y+23, r26	; 0x17
    2614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <lcd4_Init+0x356>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <lcd4_Init+0x3d4>
	else if (__tmp > 65535)
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <lcd4_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	69 8d       	ldd	r22, Y+25	; 0x19
    2652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9c 8b       	std	Y+20, r25	; 0x14
    2676:	8b 8b       	std	Y+19, r24	; 0x13
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <lcd4_Init+0x3b6>
    267a:	80 e9       	ldi	r24, 0x90	; 144
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	9a 8b       	std	Y+18, r25	; 0x12
    2680:	89 8b       	std	Y+17, r24	; 0x11
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	9a 89       	ldd	r25, Y+18	; 0x12
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <lcd4_Init+0x3a4>
    268a:	9a 8b       	std	Y+18, r25	; 0x12
    268c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <lcd4_Init+0x398>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <lcd4_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	98 8b       	std	Y+16, r25	; 0x10
    26bc:	8f 87       	std	Y+15, r24	; 0x0f
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	98 89       	ldd	r25, Y+16	; 0x10
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <lcd4_Init+0x3e0>
    26c6:	98 8b       	std	Y+16, r25	; 0x10
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD4_Command_Write(LCD_ENTRY_MODE_INC_SHIFT_OFF);	//increase DDRAM address
    26ca:	86 e0       	ldi	r24, 0x06	; 6
    26cc:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e8       	ldi	r26, 0x80	; 128
    26d6:	bf e3       	ldi	r27, 0x3F	; 63
    26d8:	8b 87       	std	Y+11, r24	; 0x0b
    26da:	9c 87       	std	Y+12, r25	; 0x0c
    26dc:	ad 87       	std	Y+13, r26	; 0x0d
    26de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4a e7       	ldi	r20, 0x7A	; 122
    26ee:	55 e4       	ldi	r21, 0x45	; 69
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	8f 83       	std	Y+7, r24	; 0x07
    26fa:	98 87       	std	Y+8, r25	; 0x08
    26fc:	a9 87       	std	Y+9, r26	; 0x09
    26fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e8       	ldi	r20, 0x80	; 128
    270e:	5f e3       	ldi	r21, 0x3F	; 63
    2710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2714:	88 23       	and	r24, r24
    2716:	2c f4       	brge	.+10     	; 0x2722 <lcd4_Init+0x440>
		__ticks = 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	3f c0       	rjmp	.+126    	; 0x27a0 <lcd4_Init+0x4be>
	else if (__tmp > 65535)
    2722:	6f 81       	ldd	r22, Y+7	; 0x07
    2724:	78 85       	ldd	r23, Y+8	; 0x08
    2726:	89 85       	ldd	r24, Y+9	; 0x09
    2728:	9a 85       	ldd	r25, Y+10	; 0x0a
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	4f e7       	ldi	r20, 0x7F	; 127
    2730:	57 e4       	ldi	r21, 0x47	; 71
    2732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2736:	18 16       	cp	r1, r24
    2738:	4c f5       	brge	.+82     	; 0x278c <lcd4_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e2       	ldi	r20, 0x20	; 32
    2748:	51 e4       	ldi	r21, 0x41	; 65
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <lcd4_Init+0x4a0>
    2764:	80 e9       	ldi	r24, 0x90	; 144
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	9c 83       	std	Y+4, r25	; 0x04
    276a:	8b 83       	std	Y+3, r24	; 0x03
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <lcd4_Init+0x48e>
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	69 f7       	brne	.-38     	; 0x2764 <lcd4_Init+0x482>
    278a:	14 c0       	rjmp	.+40     	; 0x27b4 <lcd4_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278c:	6f 81       	ldd	r22, Y+7	; 0x07
    278e:	78 85       	ldd	r23, Y+8	; 0x08
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <lcd4_Init+0x4ca>
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	LCD4_Command_Write(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    27b4:	8c e0       	ldi	r24, 0x0C	; 12
    27b6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
	LCD4_Command_Write(LCD_DDRAM_START);
    27ba:	80 e8       	ldi	r24, 0x80	; 128
    27bc:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
}
    27c0:	ca 5b       	subi	r28, 0xBA	; 186
    27c2:	df 4f       	sbci	r29, 0xFF	; 255
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	08 95       	ret

000027d8 <lcd4_CLR>:
 * lcd4_Init : This function Clears the LCD 4bit
 * @param	void
 * @return	void
 */
void lcd4_CLR(void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	LCD4_Command_Write(0x01);
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
}
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <lcd4_disply_char>:
 * lcd4_disply_char : This function displays a character on the LCD 4bit
 * @param	data which is the character to display Ex: 'A'
 * @return	void
 */
void lcd4_disply_char (const u8 character)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	89 83       	std	Y+1, r24	; 0x01
	if(current_pos == 20 )
    27f8:	80 91 f0 00 	lds	r24, 0x00F0
    27fc:	84 31       	cpi	r24, 0x14	; 20
    27fe:	29 f4       	brne	.+10     	; 0x280a <lcd4_disply_char+0x1e>
	{
		lcd4_set_cursor(2, 1);
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	61 e0       	ldi	r22, 0x01	; 1
    2804:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd4_set_cursor>
    2808:	11 c0       	rjmp	.+34     	; 0x282c <lcd4_disply_char+0x40>
	}
	else if(current_pos == 40 )
    280a:	80 91 f0 00 	lds	r24, 0x00F0
    280e:	88 32       	cpi	r24, 0x28	; 40
    2810:	29 f4       	brne	.+10     	; 0x281c <lcd4_disply_char+0x30>
	{
		lcd4_set_cursor(3, 1);
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd4_set_cursor>
    281a:	08 c0       	rjmp	.+16     	; 0x282c <lcd4_disply_char+0x40>
	}
	else if(current_pos == 60 )
    281c:	80 91 f0 00 	lds	r24, 0x00F0
    2820:	8c 33       	cpi	r24, 0x3C	; 60
    2822:	21 f4       	brne	.+8      	; 0x282c <lcd4_disply_char+0x40>
	{
		lcd4_set_cursor(4, 1);
    2824:	84 e0       	ldi	r24, 0x04	; 4
    2826:	61 e0       	ldi	r22, 0x01	; 1
    2828:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd4_set_cursor>
	}
	LCD_Data_write(character);
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_Data_write>
	current_pos ++;
    2832:	80 91 f0 00 	lds	r24, 0x00F0
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	80 93 f0 00 	sts	0x00F0, r24
}
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <lcd4_disply_string>:
 * lcd4_disply_string : This function displays whole string on the LCD 4bit
 * @param	data which is the string to display Ex: "Mahmoud El Arabi"
 * @return	void
 */
void lcd4_disply_string (const u8* str)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	00 d0       	rcall	.+0      	; 0x284a <lcd4_disply_string+0x6>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	0a c0       	rjmp	.+20     	; 0x2868 <lcd4_disply_string+0x24>
	 while (*str){
		lcd4_disply_char(*str);
    2854:	e9 81       	ldd	r30, Y+1	; 0x01
    2856:	fa 81       	ldd	r31, Y+2	; 0x02
    2858:	80 81       	ld	r24, Z
    285a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <lcd4_disply_char>
		str++;
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
 * @param	data which is the string to display Ex: "Mahmoud El Arabi"
 * @return	void
 */
void lcd4_disply_string (const u8* str)
{
	 while (*str){
    2868:	e9 81       	ldd	r30, Y+1	; 0x01
    286a:	fa 81       	ldd	r31, Y+2	; 0x02
    286c:	80 81       	ld	r24, Z
    286e:	88 23       	and	r24, r24
    2870:	89 f7       	brne	.-30     	; 0x2854 <lcd4_disply_string+0x10>
		lcd4_disply_char(*str);
		str++;
		}
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <lcd4_disply_char_at_X_Y>:
 * 			3- col : the Column position of the character
 * 			Ex ('A', 2, 3) -> will display A @ [2,3]
 * @return	void
 */
void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <lcd4_disply_char_at_X_Y+0x6>
    2882:	0f 92       	push	r0
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	6a 83       	std	Y+2, r22	; 0x02
    288c:	4b 83       	std	Y+3, r20	; 0x03
	lcd4_set_cursor(row, col);
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	6b 81       	ldd	r22, Y+3	; 0x03
    2892:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd4_set_cursor>
	LCD_Data_write(data);
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_Data_write>
}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <lcd4_disply_string_at_X_Y>:
 * 			3- col : the Column position of the 1st character of the string which is 'M' here
 * 			Ex ("Mahmoud El Arabi", 2, 3) -> will display "Mahmoud El Arabi" @ [2,3]
 * @return	void
 */
void lcd4_disply_string_at_X_Y(u8* data, u8 row, u8 col)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <lcd4_disply_string_at_X_Y+0x6>
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <lcd4_disply_string_at_X_Y+0x8>
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	6b 83       	std	Y+3, r22	; 0x03
    28ba:	4c 83       	std	Y+4, r20	; 0x04
	lcd4_set_cursor(row, col);
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	6c 81       	ldd	r22, Y+4	; 0x04
    28c0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd4_set_cursor>
	lcd4_disply_string(data);
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	0e 94 22 14 	call	0x2844	; 0x2844 <lcd4_disply_string>
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <lcd4_disply_num>:
/**
 * lcd4_disply_num : This function converts the nu,ber to string and displays it on the LCD 4bit
 * @param	num which is the number to display
 * @return	void
 */
void lcd4_disply_num(u32 Number) {
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <lcd4_disply_num+0x6>
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <lcd4_disply_num+0x8>
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	69 83       	std	Y+1, r22	; 0x01
    28e8:	7a 83       	std	Y+2, r23	; 0x02
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	9c 83       	std	Y+4, r25	; 0x04
//    // Display the string on the LCD character by character
//    for (int i = 0; num_str[i] != '\0'; i++) {
//        lcd4_disply_char(num_str[i]);
//    }

		if(Number == 0 )
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	ab 81       	ldd	r26, Y+3	; 0x03
    28f4:	bc 81       	ldd	r27, Y+4	; 0x04
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	a1 05       	cpc	r26, r1
    28fa:	b1 05       	cpc	r27, r1
    28fc:	19 f1       	breq	.+70     	; 0x2944 <lcd4_disply_num+0x6a>
			return ;
		else
			lcd4_disply_num(Number/10);
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	ab 81       	ldd	r26, Y+3	; 0x03
    2904:	bc 81       	ldd	r27, Y+4	; 0x04
    2906:	2a e0       	ldi	r18, 0x0A	; 10
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 a7 1a 	call	0x354e	; 0x354e <__udivmodsi4>
    2916:	da 01       	movw	r26, r20
    2918:	c9 01       	movw	r24, r18
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd4_disply_num>
		///if(Number<255)
		LCD_Data_write((Number%10)+0x30);
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	ab 81       	ldd	r26, Y+3	; 0x03
    2928:	bc 81       	ldd	r27, Y+4	; 0x04
    292a:	2a e0       	ldi	r18, 0x0A	; 10
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 a7 1a 	call	0x354e	; 0x354e <__udivmodsi4>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	80 5d       	subi	r24, 0xD0	; 208
    2940:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_Data_write>

}
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <lcd4_disply_CustomCharacter>:
 * 			Ex: u8 customChar[] = {0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1B, 0x0E};
 * 				lcd4_disply_CustomCharacter(1, 5, customChar, 0);
 * @return	void
 */
void lcd4_disply_CustomCharacter(u8 row, u8 col, u8* CustomCharacter, u8 MemPos)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	27 97       	sbiw	r28, 0x07	; 7
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	8b 83       	std	Y+3, r24	; 0x03
    2968:	6c 83       	std	Y+4, r22	; 0x04
    296a:	5e 83       	std	Y+6, r21	; 0x06
    296c:	4d 83       	std	Y+5, r20	; 0x05
    296e:	2f 83       	std	Y+7, r18	; 0x07
	LCD4_Command_Write(LCD_CGRAM_START + (MemPos * 8));
    2970:	8f 81       	ldd	r24, Y+7	; 0x07
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	08 96       	adiw	r24, 0x08	; 8
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
	for(int i = 0 ; i < 8 ; i++)
    2988:	1a 82       	std	Y+2, r1	; 0x02
    298a:	19 82       	std	Y+1, r1	; 0x01
    298c:	0f c0       	rjmp	.+30     	; 0x29ac <lcd4_disply_CustomCharacter+0x5a>
	{
		LCD_Data_write(CustomCharacter[i]);
    298e:	29 81       	ldd	r18, Y+1	; 0x01
    2990:	3a 81       	ldd	r19, Y+2	; 0x02
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	fc 01       	movw	r30, r24
    2998:	e2 0f       	add	r30, r18
    299a:	f3 1f       	adc	r31, r19
    299c:	80 81       	ld	r24, Z
    299e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_Data_write>
 * @return	void
 */
void lcd4_disply_CustomCharacter(u8 row, u8 col, u8* CustomCharacter, u8 MemPos)
{
	LCD4_Command_Write(LCD_CGRAM_START + (MemPos * 8));
	for(int i = 0 ; i < 8 ; i++)
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	9a 81       	ldd	r25, Y+2	; 0x02
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	88 30       	cpi	r24, 0x08	; 8
    29b2:	91 05       	cpc	r25, r1
    29b4:	64 f3       	brlt	.-40     	; 0x298e <lcd4_disply_CustomCharacter+0x3c>
	{
		LCD_Data_write(CustomCharacter[i]);
	}
	lcd4_disply_char_at_X_Y(MemPos, row, col);
    29b6:	8f 81       	ldd	r24, Y+7	; 0x07
    29b8:	6b 81       	ldd	r22, Y+3	; 0x03
    29ba:	4c 81       	ldd	r20, Y+4	; 0x04
    29bc:	0e 94 3e 14 	call	0x287c	; 0x287c <lcd4_disply_char_at_X_Y>
}
    29c0:	27 96       	adiw	r28, 0x07	; 7
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <LCD_Data_write>:


/* ----------------- Section : Static "Private" Functions Declaration Implementation -----------------*/

static void LCD_Data_write(u8 data)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	e9 97       	sbiw	r28, 0x39	; 57
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	89 af       	std	Y+57, r24	; 0x39
	Dio_WriteChannel(RS,STD_HIGH);
    29e8:	83 e0       	ldi	r24, 0x03	; 3
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>

	Dio_WriteChannel(D4,GET_BIT(data,4));
    29f0:	89 ad       	ldd	r24, Y+57	; 0x39
    29f2:	82 95       	swap	r24
    29f4:	8f 70       	andi	r24, 0x0F	; 15
    29f6:	98 2f       	mov	r25, r24
    29f8:	91 70       	andi	r25, 0x01	; 1
    29fa:	88 e0       	ldi	r24, 0x08	; 8
    29fc:	69 2f       	mov	r22, r25
    29fe:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(data,5));
    2a02:	89 ad       	ldd	r24, Y+57	; 0x39
    2a04:	82 95       	swap	r24
    2a06:	86 95       	lsr	r24
    2a08:	87 70       	andi	r24, 0x07	; 7
    2a0a:	98 2f       	mov	r25, r24
    2a0c:	91 70       	andi	r25, 0x01	; 1
    2a0e:	89 e0       	ldi	r24, 0x09	; 9
    2a10:	69 2f       	mov	r22, r25
    2a12:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(data,6));
    2a16:	89 ad       	ldd	r24, Y+57	; 0x39
    2a18:	82 95       	swap	r24
    2a1a:	86 95       	lsr	r24
    2a1c:	86 95       	lsr	r24
    2a1e:	83 70       	andi	r24, 0x03	; 3
    2a20:	98 2f       	mov	r25, r24
    2a22:	91 70       	andi	r25, 0x01	; 1
    2a24:	8a e0       	ldi	r24, 0x0A	; 10
    2a26:	69 2f       	mov	r22, r25
    2a28:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(data,7));
    2a2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a2e:	98 2f       	mov	r25, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	99 27       	eor	r25, r25
    2a34:	99 1f       	adc	r25, r25
    2a36:	8c e0       	ldi	r24, 0x0C	; 12
    2a38:	69 2f       	mov	r22, r25
    2a3a:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2a3e:	82 e0       	ldi	r24, 0x02	; 2
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	a0 e8       	ldi	r26, 0x80	; 128
    2a4c:	bf e3       	ldi	r27, 0x3F	; 63
    2a4e:	8d ab       	std	Y+53, r24	; 0x35
    2a50:	9e ab       	std	Y+54, r25	; 0x36
    2a52:	af ab       	std	Y+55, r26	; 0x37
    2a54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a56:	6d a9       	ldd	r22, Y+53	; 0x35
    2a58:	7e a9       	ldd	r23, Y+54	; 0x36
    2a5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a e7       	ldi	r20, 0x7A	; 122
    2a64:	55 e4       	ldi	r21, 0x45	; 69
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	89 ab       	std	Y+49, r24	; 0x31
    2a70:	9a ab       	std	Y+50, r25	; 0x32
    2a72:	ab ab       	std	Y+51, r26	; 0x33
    2a74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a76:	69 a9       	ldd	r22, Y+49	; 0x31
    2a78:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e8       	ldi	r20, 0x80	; 128
    2a84:	5f e3       	ldi	r21, 0x3F	; 63
    2a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8a:	88 23       	and	r24, r24
    2a8c:	2c f4       	brge	.+10     	; 0x2a98 <LCD_Data_write+0xc6>
		__ticks = 1;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	98 ab       	std	Y+48, r25	; 0x30
    2a94:	8f a7       	std	Y+47, r24	; 0x2f
    2a96:	3f c0       	rjmp	.+126    	; 0x2b16 <LCD_Data_write+0x144>
	else if (__tmp > 65535)
    2a98:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	3f ef       	ldi	r19, 0xFF	; 255
    2aa4:	4f e7       	ldi	r20, 0x7F	; 127
    2aa6:	57 e4       	ldi	r21, 0x47	; 71
    2aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aac:	18 16       	cp	r1, r24
    2aae:	4c f5       	brge	.+82     	; 0x2b02 <LCD_Data_write+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e2       	ldi	r20, 0x20	; 32
    2abe:	51 e4       	ldi	r21, 0x41	; 65
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	98 ab       	std	Y+48, r25	; 0x30
    2ad6:	8f a7       	std	Y+47, r24	; 0x2f
    2ad8:	0f c0       	rjmp	.+30     	; 0x2af8 <LCD_Data_write+0x126>
    2ada:	80 e9       	ldi	r24, 0x90	; 144
    2adc:	91 e0       	ldi	r25, 0x01	; 1
    2ade:	9e a7       	std	Y+46, r25	; 0x2e
    2ae0:	8d a7       	std	Y+45, r24	; 0x2d
    2ae2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <LCD_Data_write+0x114>
    2aea:	9e a7       	std	Y+46, r25	; 0x2e
    2aec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af0:	98 a9       	ldd	r25, Y+48	; 0x30
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	98 ab       	std	Y+48, r25	; 0x30
    2af6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afa:	98 a9       	ldd	r25, Y+48	; 0x30
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	69 f7       	brne	.-38     	; 0x2ada <LCD_Data_write+0x108>
    2b00:	14 c0       	rjmp	.+40     	; 0x2b2a <LCD_Data_write+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b02:	69 a9       	ldd	r22, Y+49	; 0x31
    2b04:	7a a9       	ldd	r23, Y+50	; 0x32
    2b06:	8b a9       	ldd	r24, Y+51	; 0x33
    2b08:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	98 ab       	std	Y+48, r25	; 0x30
    2b14:	8f a7       	std	Y+47, r24	; 0x2f
    2b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b18:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1a:	9c a7       	std	Y+44, r25	; 0x2c
    2b1c:	8b a7       	std	Y+43, r24	; 0x2b
    2b1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b20:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <LCD_Data_write+0x150>
    2b26:	9c a7       	std	Y+44, r25	; 0x2c
    2b28:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a0 e8       	ldi	r26, 0x80	; 128
    2b38:	bf e3       	ldi	r27, 0x3F	; 63
    2b3a:	8f a3       	std	Y+39, r24	; 0x27
    2b3c:	98 a7       	std	Y+40, r25	; 0x28
    2b3e:	a9 a7       	std	Y+41, r26	; 0x29
    2b40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	6f a1       	ldd	r22, Y+39	; 0x27
    2b44:	78 a5       	ldd	r23, Y+40	; 0x28
    2b46:	89 a5       	ldd	r24, Y+41	; 0x29
    2b48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a e7       	ldi	r20, 0x7A	; 122
    2b50:	55 e4       	ldi	r21, 0x45	; 69
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8b a3       	std	Y+35, r24	; 0x23
    2b5c:	9c a3       	std	Y+36, r25	; 0x24
    2b5e:	ad a3       	std	Y+37, r26	; 0x25
    2b60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b62:	6b a1       	ldd	r22, Y+35	; 0x23
    2b64:	7c a1       	ldd	r23, Y+36	; 0x24
    2b66:	8d a1       	ldd	r24, Y+37	; 0x25
    2b68:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <LCD_Data_write+0x1b2>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9a a3       	std	Y+34, r25	; 0x22
    2b80:	89 a3       	std	Y+33, r24	; 0x21
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <LCD_Data_write+0x230>
	else if (__tmp > 65535)
    2b84:	6b a1       	ldd	r22, Y+35	; 0x23
    2b86:	7c a1       	ldd	r23, Y+36	; 0x24
    2b88:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <LCD_Data_write+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9a a3       	std	Y+34, r25	; 0x22
    2bc2:	89 a3       	std	Y+33, r24	; 0x21
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <LCD_Data_write+0x212>
    2bc6:	80 e9       	ldi	r24, 0x90	; 144
    2bc8:	91 e0       	ldi	r25, 0x01	; 1
    2bca:	98 a3       	std	Y+32, r25	; 0x20
    2bcc:	8f 8f       	std	Y+31, r24	; 0x1f
    2bce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd0:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_Data_write+0x200>
    2bd6:	98 a3       	std	Y+32, r25	; 0x20
    2bd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	89 a1       	ldd	r24, Y+33	; 0x21
    2bdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9a a3       	std	Y+34, r25	; 0x22
    2be2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	89 a1       	ldd	r24, Y+33	; 0x21
    2be6:	9a a1       	ldd	r25, Y+34	; 0x22
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <LCD_Data_write+0x1f4>
    2bec:	14 c0       	rjmp	.+40     	; 0x2c16 <LCD_Data_write+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
    2c02:	89 a1       	ldd	r24, Y+33	; 0x21
    2c04:	9a a1       	ldd	r25, Y+34	; 0x22
    2c06:	9e 8f       	std	Y+30, r25	; 0x1e
    2c08:	8d 8f       	std	Y+29, r24	; 0x1d
    2c0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <LCD_Data_write+0x23c>
    2c12:	9e 8f       	std	Y+30, r25	; 0x1e
    2c14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Dio_WriteChannel(D4,GET_BIT(data,0));
    2c16:	89 ad       	ldd	r24, Y+57	; 0x39
    2c18:	98 2f       	mov	r25, r24
    2c1a:	91 70       	andi	r25, 0x01	; 1
    2c1c:	88 e0       	ldi	r24, 0x08	; 8
    2c1e:	69 2f       	mov	r22, r25
    2c20:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(data,1));
    2c24:	89 ad       	ldd	r24, Y+57	; 0x39
    2c26:	86 95       	lsr	r24
    2c28:	98 2f       	mov	r25, r24
    2c2a:	91 70       	andi	r25, 0x01	; 1
    2c2c:	89 e0       	ldi	r24, 0x09	; 9
    2c2e:	69 2f       	mov	r22, r25
    2c30:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(data,2));
    2c34:	89 ad       	ldd	r24, Y+57	; 0x39
    2c36:	86 95       	lsr	r24
    2c38:	86 95       	lsr	r24
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	91 70       	andi	r25, 0x01	; 1
    2c3e:	8a e0       	ldi	r24, 0x0A	; 10
    2c40:	69 2f       	mov	r22, r25
    2c42:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(data,3));
    2c46:	89 ad       	ldd	r24, Y+57	; 0x39
    2c48:	86 95       	lsr	r24
    2c4a:	86 95       	lsr	r24
    2c4c:	86 95       	lsr	r24
    2c4e:	98 2f       	mov	r25, r24
    2c50:	91 70       	andi	r25, 0x01	; 1
    2c52:	8c e0       	ldi	r24, 0x0C	; 12
    2c54:	69 2f       	mov	r22, r25
    2c56:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a0 e8       	ldi	r26, 0x80	; 128
    2c68:	bf e3       	ldi	r27, 0x3F	; 63
    2c6a:	89 8f       	std	Y+25, r24	; 0x19
    2c6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	69 8d       	ldd	r22, Y+25	; 0x19
    2c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a e7       	ldi	r20, 0x7A	; 122
    2c80:	55 e4       	ldi	r21, 0x45	; 69
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8d 8b       	std	Y+21, r24	; 0x15
    2c8c:	9e 8b       	std	Y+22, r25	; 0x16
    2c8e:	af 8b       	std	Y+23, r26	; 0x17
    2c90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c92:	6d 89       	ldd	r22, Y+21	; 0x15
    2c94:	7e 89       	ldd	r23, Y+22	; 0x16
    2c96:	8f 89       	ldd	r24, Y+23	; 0x17
    2c98:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <LCD_Data_write+0x2e2>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9c 8b       	std	Y+20, r25	; 0x14
    2cb0:	8b 8b       	std	Y+19, r24	; 0x13
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <LCD_Data_write+0x360>
	else if (__tmp > 65535)
    2cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cba:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <LCD_Data_write+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9c 8b       	std	Y+20, r25	; 0x14
    2cf2:	8b 8b       	std	Y+19, r24	; 0x13
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <LCD_Data_write+0x342>
    2cf6:	80 e9       	ldi	r24, 0x90	; 144
    2cf8:	91 e0       	ldi	r25, 0x01	; 1
    2cfa:	9a 8b       	std	Y+18, r25	; 0x12
    2cfc:	89 8b       	std	Y+17, r24	; 0x11
    2cfe:	89 89       	ldd	r24, Y+17	; 0x11
    2d00:	9a 89       	ldd	r25, Y+18	; 0x12
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <LCD_Data_write+0x330>
    2d06:	9a 8b       	std	Y+18, r25	; 0x12
    2d08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9c 8b       	std	Y+20, r25	; 0x14
    2d12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	8b 89       	ldd	r24, Y+19	; 0x13
    2d16:	9c 89       	ldd	r25, Y+20	; 0x14
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <LCD_Data_write+0x324>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <LCD_Data_write+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d20:	7e 89       	ldd	r23, Y+22	; 0x16
    2d22:	8f 89       	ldd	r24, Y+23	; 0x17
    2d24:	98 8d       	ldd	r25, Y+24	; 0x18
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9c 8b       	std	Y+20, r25	; 0x14
    2d30:	8b 8b       	std	Y+19, r24	; 0x13
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	98 8b       	std	Y+16, r25	; 0x10
    2d38:	8f 87       	std	Y+15, r24	; 0x0f
    2d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3c:	98 89       	ldd	r25, Y+16	; 0x10
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_Data_write+0x36c>
    2d42:	98 8b       	std	Y+16, r25	; 0x10
    2d44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    2d46:	82 e0       	ldi	r24, 0x02	; 2
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	a0 e8       	ldi	r26, 0x80	; 128
    2d54:	bf e3       	ldi	r27, 0x3F	; 63
    2d56:	8b 87       	std	Y+11, r24	; 0x0b
    2d58:	9c 87       	std	Y+12, r25	; 0x0c
    2d5a:	ad 87       	std	Y+13, r26	; 0x0d
    2d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a e7       	ldi	r20, 0x7A	; 122
    2d6c:	55 e4       	ldi	r21, 0x45	; 69
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	8f 83       	std	Y+7, r24	; 0x07
    2d78:	98 87       	std	Y+8, r25	; 0x08
    2d7a:	a9 87       	std	Y+9, r26	; 0x09
    2d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d80:	78 85       	ldd	r23, Y+8	; 0x08
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d92:	88 23       	and	r24, r24
    2d94:	2c f4       	brge	.+10     	; 0x2da0 <LCD_Data_write+0x3ce>
		__ticks = 1;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <LCD_Data_write+0x44c>
	else if (__tmp > 65535)
    2da0:	6f 81       	ldd	r22, Y+7	; 0x07
    2da2:	78 85       	ldd	r23, Y+8	; 0x08
    2da4:	89 85       	ldd	r24, Y+9	; 0x09
    2da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	57 e4       	ldi	r21, 0x47	; 71
    2db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	4c f5       	brge	.+82     	; 0x2e0a <LCD_Data_write+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <LCD_Data_write+0x42e>
    2de2:	80 e9       	ldi	r24, 0x90	; 144
    2de4:	91 e0       	ldi	r25, 0x01	; 1
    2de6:	9c 83       	std	Y+4, r25	; 0x04
    2de8:	8b 83       	std	Y+3, r24	; 0x03
    2dea:	8b 81       	ldd	r24, Y+3	; 0x03
    2dec:	9c 81       	ldd	r25, Y+4	; 0x04
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <LCD_Data_write+0x41c>
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	69 f7       	brne	.-38     	; 0x2de2 <LCD_Data_write+0x410>
    2e08:	14 c0       	rjmp	.+40     	; 0x2e32 <LCD_Data_write+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCD_Data_write+0x458>
    2e2e:	9a 83       	std	Y+2, r25	; 0x02
    2e30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2e32:	e9 96       	adiw	r28, 0x39	; 57
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <LCD4_Command_Write>:

static void LCD4_Command_Write(u8 command)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	e9 97       	sbiw	r28, 0x39	; 57
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	89 af       	std	Y+57, r24	; 0x39
	Dio_WriteChannel(RS,STD_LOW);
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>

	Dio_WriteChannel(D4,GET_BIT(command,4));
    2e62:	89 ad       	ldd	r24, Y+57	; 0x39
    2e64:	82 95       	swap	r24
    2e66:	8f 70       	andi	r24, 0x0F	; 15
    2e68:	98 2f       	mov	r25, r24
    2e6a:	91 70       	andi	r25, 0x01	; 1
    2e6c:	88 e0       	ldi	r24, 0x08	; 8
    2e6e:	69 2f       	mov	r22, r25
    2e70:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(command,5));
    2e74:	89 ad       	ldd	r24, Y+57	; 0x39
    2e76:	82 95       	swap	r24
    2e78:	86 95       	lsr	r24
    2e7a:	87 70       	andi	r24, 0x07	; 7
    2e7c:	98 2f       	mov	r25, r24
    2e7e:	91 70       	andi	r25, 0x01	; 1
    2e80:	89 e0       	ldi	r24, 0x09	; 9
    2e82:	69 2f       	mov	r22, r25
    2e84:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(command,6));
    2e88:	89 ad       	ldd	r24, Y+57	; 0x39
    2e8a:	82 95       	swap	r24
    2e8c:	86 95       	lsr	r24
    2e8e:	86 95       	lsr	r24
    2e90:	83 70       	andi	r24, 0x03	; 3
    2e92:	98 2f       	mov	r25, r24
    2e94:	91 70       	andi	r25, 0x01	; 1
    2e96:	8a e0       	ldi	r24, 0x0A	; 10
    2e98:	69 2f       	mov	r22, r25
    2e9a:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(command,7));
    2e9e:	89 ad       	ldd	r24, Y+57	; 0x39
    2ea0:	98 2f       	mov	r25, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	99 27       	eor	r25, r25
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	8c e0       	ldi	r24, 0x0C	; 12
    2eaa:	69 2f       	mov	r22, r25
    2eac:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	61 e0       	ldi	r22, 0x01	; 1
    2eb4:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a0 e8       	ldi	r26, 0x80	; 128
    2ebe:	bf e3       	ldi	r27, 0x3F	; 63
    2ec0:	8d ab       	std	Y+53, r24	; 0x35
    2ec2:	9e ab       	std	Y+54, r25	; 0x36
    2ec4:	af ab       	std	Y+55, r26	; 0x37
    2ec6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec8:	6d a9       	ldd	r22, Y+53	; 0x35
    2eca:	7e a9       	ldd	r23, Y+54	; 0x36
    2ecc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ece:	98 ad       	ldd	r25, Y+56	; 0x38
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	4a e7       	ldi	r20, 0x7A	; 122
    2ed6:	55 e4       	ldi	r21, 0x45	; 69
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	89 ab       	std	Y+49, r24	; 0x31
    2ee2:	9a ab       	std	Y+50, r25	; 0x32
    2ee4:	ab ab       	std	Y+51, r26	; 0x33
    2ee6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eea:	7a a9       	ldd	r23, Y+50	; 0x32
    2eec:	8b a9       	ldd	r24, Y+51	; 0x33
    2eee:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e8       	ldi	r20, 0x80	; 128
    2ef6:	5f e3       	ldi	r21, 0x3F	; 63
    2ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efc:	88 23       	and	r24, r24
    2efe:	2c f4       	brge	.+10     	; 0x2f0a <LCD4_Command_Write+0xc6>
		__ticks = 1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	98 ab       	std	Y+48, r25	; 0x30
    2f06:	8f a7       	std	Y+47, r24	; 0x2f
    2f08:	3f c0       	rjmp	.+126    	; 0x2f88 <LCD4_Command_Write+0x144>
	else if (__tmp > 65535)
    2f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f10:	9c a9       	ldd	r25, Y+52	; 0x34
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	3f ef       	ldi	r19, 0xFF	; 255
    2f16:	4f e7       	ldi	r20, 0x7F	; 127
    2f18:	57 e4       	ldi	r21, 0x47	; 71
    2f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1e:	18 16       	cp	r1, r24
    2f20:	4c f5       	brge	.+82     	; 0x2f74 <LCD4_Command_Write+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f22:	6d a9       	ldd	r22, Y+53	; 0x35
    2f24:	7e a9       	ldd	r23, Y+54	; 0x36
    2f26:	8f a9       	ldd	r24, Y+55	; 0x37
    2f28:	98 ad       	ldd	r25, Y+56	; 0x38
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	98 ab       	std	Y+48, r25	; 0x30
    2f48:	8f a7       	std	Y+47, r24	; 0x2f
    2f4a:	0f c0       	rjmp	.+30     	; 0x2f6a <LCD4_Command_Write+0x126>
    2f4c:	80 e9       	ldi	r24, 0x90	; 144
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	9e a7       	std	Y+46, r25	; 0x2e
    2f52:	8d a7       	std	Y+45, r24	; 0x2d
    2f54:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f56:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD4_Command_Write+0x114>
    2f5c:	9e a7       	std	Y+46, r25	; 0x2e
    2f5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f62:	98 a9       	ldd	r25, Y+48	; 0x30
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	98 ab       	std	Y+48, r25	; 0x30
    2f68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	69 f7       	brne	.-38     	; 0x2f4c <LCD4_Command_Write+0x108>
    2f72:	14 c0       	rjmp	.+40     	; 0x2f9c <LCD4_Command_Write+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	69 a9       	ldd	r22, Y+49	; 0x31
    2f76:	7a a9       	ldd	r23, Y+50	; 0x32
    2f78:	8b a9       	ldd	r24, Y+51	; 0x33
    2f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	98 ab       	std	Y+48, r25	; 0x30
    2f86:	8f a7       	std	Y+47, r24	; 0x2f
    2f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f8c:	9c a7       	std	Y+44, r25	; 0x2c
    2f8e:	8b a7       	std	Y+43, r24	; 0x2b
    2f90:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f92:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <LCD4_Command_Write+0x150>
    2f98:	9c a7       	std	Y+44, r25	; 0x2c
    2f9a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a0 e8       	ldi	r26, 0x80	; 128
    2faa:	bf e3       	ldi	r27, 0x3F	; 63
    2fac:	8f a3       	std	Y+39, r24	; 0x27
    2fae:	98 a7       	std	Y+40, r25	; 0x28
    2fb0:	a9 a7       	std	Y+41, r26	; 0x29
    2fb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2fb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2fb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2fba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a e7       	ldi	r20, 0x7A	; 122
    2fc2:	55 e4       	ldi	r21, 0x45	; 69
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	8b a3       	std	Y+35, r24	; 0x23
    2fce:	9c a3       	std	Y+36, r25	; 0x24
    2fd0:	ad a3       	std	Y+37, r26	; 0x25
    2fd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fda:	9e a1       	ldd	r25, Y+38	; 0x26
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe8:	88 23       	and	r24, r24
    2fea:	2c f4       	brge	.+10     	; 0x2ff6 <LCD4_Command_Write+0x1b2>
		__ticks = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9a a3       	std	Y+34, r25	; 0x22
    2ff2:	89 a3       	std	Y+33, r24	; 0x21
    2ff4:	3f c0       	rjmp	.+126    	; 0x3074 <LCD4_Command_Write+0x230>
	else if (__tmp > 65535)
    2ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e7       	ldi	r20, 0x7F	; 127
    3004:	57 e4       	ldi	r21, 0x47	; 71
    3006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    300a:	18 16       	cp	r1, r24
    300c:	4c f5       	brge	.+82     	; 0x3060 <LCD4_Command_Write+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300e:	6f a1       	ldd	r22, Y+39	; 0x27
    3010:	78 a5       	ldd	r23, Y+40	; 0x28
    3012:	89 a5       	ldd	r24, Y+41	; 0x29
    3014:	9a a5       	ldd	r25, Y+42	; 0x2a
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e2       	ldi	r20, 0x20	; 32
    301c:	51 e4       	ldi	r21, 0x41	; 65
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9a a3       	std	Y+34, r25	; 0x22
    3034:	89 a3       	std	Y+33, r24	; 0x21
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <LCD4_Command_Write+0x212>
    3038:	80 e9       	ldi	r24, 0x90	; 144
    303a:	91 e0       	ldi	r25, 0x01	; 1
    303c:	98 a3       	std	Y+32, r25	; 0x20
    303e:	8f 8f       	std	Y+31, r24	; 0x1f
    3040:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3042:	98 a1       	ldd	r25, Y+32	; 0x20
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <LCD4_Command_Write+0x200>
    3048:	98 a3       	std	Y+32, r25	; 0x20
    304a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304c:	89 a1       	ldd	r24, Y+33	; 0x21
    304e:	9a a1       	ldd	r25, Y+34	; 0x22
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	9a a3       	std	Y+34, r25	; 0x22
    3054:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	89 a1       	ldd	r24, Y+33	; 0x21
    3058:	9a a1       	ldd	r25, Y+34	; 0x22
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f7       	brne	.-38     	; 0x3038 <LCD4_Command_Write+0x1f4>
    305e:	14 c0       	rjmp	.+40     	; 0x3088 <LCD4_Command_Write+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3060:	6b a1       	ldd	r22, Y+35	; 0x23
    3062:	7c a1       	ldd	r23, Y+36	; 0x24
    3064:	8d a1       	ldd	r24, Y+37	; 0x25
    3066:	9e a1       	ldd	r25, Y+38	; 0x26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9a a3       	std	Y+34, r25	; 0x22
    3072:	89 a3       	std	Y+33, r24	; 0x21
    3074:	89 a1       	ldd	r24, Y+33	; 0x21
    3076:	9a a1       	ldd	r25, Y+34	; 0x22
    3078:	9e 8f       	std	Y+30, r25	; 0x1e
    307a:	8d 8f       	std	Y+29, r24	; 0x1d
    307c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    307e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <LCD4_Command_Write+0x23c>
    3084:	9e 8f       	std	Y+30, r25	; 0x1e
    3086:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Dio_WriteChannel(D4,GET_BIT(command,0));
    3088:	89 ad       	ldd	r24, Y+57	; 0x39
    308a:	98 2f       	mov	r25, r24
    308c:	91 70       	andi	r25, 0x01	; 1
    308e:	88 e0       	ldi	r24, 0x08	; 8
    3090:	69 2f       	mov	r22, r25
    3092:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(command,1));
    3096:	89 ad       	ldd	r24, Y+57	; 0x39
    3098:	86 95       	lsr	r24
    309a:	98 2f       	mov	r25, r24
    309c:	91 70       	andi	r25, 0x01	; 1
    309e:	89 e0       	ldi	r24, 0x09	; 9
    30a0:	69 2f       	mov	r22, r25
    30a2:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(command,2));
    30a6:	89 ad       	ldd	r24, Y+57	; 0x39
    30a8:	86 95       	lsr	r24
    30aa:	86 95       	lsr	r24
    30ac:	98 2f       	mov	r25, r24
    30ae:	91 70       	andi	r25, 0x01	; 1
    30b0:	8a e0       	ldi	r24, 0x0A	; 10
    30b2:	69 2f       	mov	r22, r25
    30b4:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(command,3));
    30b8:	89 ad       	ldd	r24, Y+57	; 0x39
    30ba:	86 95       	lsr	r24
    30bc:	86 95       	lsr	r24
    30be:	86 95       	lsr	r24
    30c0:	98 2f       	mov	r25, r24
    30c2:	91 70       	andi	r25, 0x01	; 1
    30c4:	8c e0       	ldi	r24, 0x0C	; 12
    30c6:	69 2f       	mov	r22, r25
    30c8:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    30cc:	82 e0       	ldi	r24, 0x02	; 2
    30ce:	61 e0       	ldi	r22, 0x01	; 1
    30d0:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a0 e8       	ldi	r26, 0x80	; 128
    30da:	bf e3       	ldi	r27, 0x3F	; 63
    30dc:	89 8f       	std	Y+25, r24	; 0x19
    30de:	9a 8f       	std	Y+26, r25	; 0x1a
    30e0:	ab 8f       	std	Y+27, r26	; 0x1b
    30e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e4:	69 8d       	ldd	r22, Y+25	; 0x19
    30e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a e7       	ldi	r20, 0x7A	; 122
    30f2:	55 e4       	ldi	r21, 0x45	; 69
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	8d 8b       	std	Y+21, r24	; 0x15
    30fe:	9e 8b       	std	Y+22, r25	; 0x16
    3100:	af 8b       	std	Y+23, r26	; 0x17
    3102:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3104:	6d 89       	ldd	r22, Y+21	; 0x15
    3106:	7e 89       	ldd	r23, Y+22	; 0x16
    3108:	8f 89       	ldd	r24, Y+23	; 0x17
    310a:	98 8d       	ldd	r25, Y+24	; 0x18
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e8       	ldi	r20, 0x80	; 128
    3112:	5f e3       	ldi	r21, 0x3F	; 63
    3114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3118:	88 23       	and	r24, r24
    311a:	2c f4       	brge	.+10     	; 0x3126 <LCD4_Command_Write+0x2e2>
		__ticks = 1;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9c 8b       	std	Y+20, r25	; 0x14
    3122:	8b 8b       	std	Y+19, r24	; 0x13
    3124:	3f c0       	rjmp	.+126    	; 0x31a4 <LCD4_Command_Write+0x360>
	else if (__tmp > 65535)
    3126:	6d 89       	ldd	r22, Y+21	; 0x15
    3128:	7e 89       	ldd	r23, Y+22	; 0x16
    312a:	8f 89       	ldd	r24, Y+23	; 0x17
    312c:	98 8d       	ldd	r25, Y+24	; 0x18
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	3f ef       	ldi	r19, 0xFF	; 255
    3132:	4f e7       	ldi	r20, 0x7F	; 127
    3134:	57 e4       	ldi	r21, 0x47	; 71
    3136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    313a:	18 16       	cp	r1, r24
    313c:	4c f5       	brge	.+82     	; 0x3190 <LCD4_Command_Write+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313e:	69 8d       	ldd	r22, Y+25	; 0x19
    3140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e2       	ldi	r20, 0x20	; 32
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9c 8b       	std	Y+20, r25	; 0x14
    3164:	8b 8b       	std	Y+19, r24	; 0x13
    3166:	0f c0       	rjmp	.+30     	; 0x3186 <LCD4_Command_Write+0x342>
    3168:	80 e9       	ldi	r24, 0x90	; 144
    316a:	91 e0       	ldi	r25, 0x01	; 1
    316c:	9a 8b       	std	Y+18, r25	; 0x12
    316e:	89 8b       	std	Y+17, r24	; 0x11
    3170:	89 89       	ldd	r24, Y+17	; 0x11
    3172:	9a 89       	ldd	r25, Y+18	; 0x12
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LCD4_Command_Write+0x330>
    3178:	9a 8b       	std	Y+18, r25	; 0x12
    317a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317c:	8b 89       	ldd	r24, Y+19	; 0x13
    317e:	9c 89       	ldd	r25, Y+20	; 0x14
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	9c 8b       	std	Y+20, r25	; 0x14
    3184:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3186:	8b 89       	ldd	r24, Y+19	; 0x13
    3188:	9c 89       	ldd	r25, Y+20	; 0x14
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	69 f7       	brne	.-38     	; 0x3168 <LCD4_Command_Write+0x324>
    318e:	14 c0       	rjmp	.+40     	; 0x31b8 <LCD4_Command_Write+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3190:	6d 89       	ldd	r22, Y+21	; 0x15
    3192:	7e 89       	ldd	r23, Y+22	; 0x16
    3194:	8f 89       	ldd	r24, Y+23	; 0x17
    3196:	98 8d       	ldd	r25, Y+24	; 0x18
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9c 8b       	std	Y+20, r25	; 0x14
    31a2:	8b 8b       	std	Y+19, r24	; 0x13
    31a4:	8b 89       	ldd	r24, Y+19	; 0x13
    31a6:	9c 89       	ldd	r25, Y+20	; 0x14
    31a8:	98 8b       	std	Y+16, r25	; 0x10
    31aa:	8f 87       	std	Y+15, r24	; 0x0f
    31ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ae:	98 89       	ldd	r25, Y+16	; 0x10
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <LCD4_Command_Write+0x36c>
    31b4:	98 8b       	std	Y+16, r25	; 0x10
    31b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	a0 e8       	ldi	r26, 0x80	; 128
    31c6:	bf e3       	ldi	r27, 0x3F	; 63
    31c8:	8b 87       	std	Y+11, r24	; 0x0b
    31ca:	9c 87       	std	Y+12, r25	; 0x0c
    31cc:	ad 87       	std	Y+13, r26	; 0x0d
    31ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	4a e7       	ldi	r20, 0x7A	; 122
    31de:	55 e4       	ldi	r21, 0x45	; 69
    31e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	8f 83       	std	Y+7, r24	; 0x07
    31ea:	98 87       	std	Y+8, r25	; 0x08
    31ec:	a9 87       	std	Y+9, r26	; 0x09
    31ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f0:	6f 81       	ldd	r22, Y+7	; 0x07
    31f2:	78 85       	ldd	r23, Y+8	; 0x08
    31f4:	89 85       	ldd	r24, Y+9	; 0x09
    31f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	40 e8       	ldi	r20, 0x80	; 128
    31fe:	5f e3       	ldi	r21, 0x3F	; 63
    3200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3204:	88 23       	and	r24, r24
    3206:	2c f4       	brge	.+10     	; 0x3212 <LCD4_Command_Write+0x3ce>
		__ticks = 1;
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	9e 83       	std	Y+6, r25	; 0x06
    320e:	8d 83       	std	Y+5, r24	; 0x05
    3210:	3f c0       	rjmp	.+126    	; 0x3290 <LCD4_Command_Write+0x44c>
	else if (__tmp > 65535)
    3212:	6f 81       	ldd	r22, Y+7	; 0x07
    3214:	78 85       	ldd	r23, Y+8	; 0x08
    3216:	89 85       	ldd	r24, Y+9	; 0x09
    3218:	9a 85       	ldd	r25, Y+10	; 0x0a
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	3f ef       	ldi	r19, 0xFF	; 255
    321e:	4f e7       	ldi	r20, 0x7F	; 127
    3220:	57 e4       	ldi	r21, 0x47	; 71
    3222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3226:	18 16       	cp	r1, r24
    3228:	4c f5       	brge	.+82     	; 0x327c <LCD4_Command_Write+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322a:	6b 85       	ldd	r22, Y+11	; 0x0b
    322c:	7c 85       	ldd	r23, Y+12	; 0x0c
    322e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3230:	9e 85       	ldd	r25, Y+14	; 0x0e
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e2       	ldi	r20, 0x20	; 32
    3238:	51 e4       	ldi	r21, 0x41	; 65
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	bc 01       	movw	r22, r24
    3244:	cd 01       	movw	r24, r26
    3246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	9e 83       	std	Y+6, r25	; 0x06
    3250:	8d 83       	std	Y+5, r24	; 0x05
    3252:	0f c0       	rjmp	.+30     	; 0x3272 <LCD4_Command_Write+0x42e>
    3254:	80 e9       	ldi	r24, 0x90	; 144
    3256:	91 e0       	ldi	r25, 0x01	; 1
    3258:	9c 83       	std	Y+4, r25	; 0x04
    325a:	8b 83       	std	Y+3, r24	; 0x03
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	9c 81       	ldd	r25, Y+4	; 0x04
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <LCD4_Command_Write+0x41c>
    3264:	9c 83       	std	Y+4, r25	; 0x04
    3266:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3268:	8d 81       	ldd	r24, Y+5	; 0x05
    326a:	9e 81       	ldd	r25, Y+6	; 0x06
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	9e 83       	std	Y+6, r25	; 0x06
    3270:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	9e 81       	ldd	r25, Y+6	; 0x06
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	69 f7       	brne	.-38     	; 0x3254 <LCD4_Command_Write+0x410>
    327a:	14 c0       	rjmp	.+40     	; 0x32a4 <LCD4_Command_Write+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327c:	6f 81       	ldd	r22, Y+7	; 0x07
    327e:	78 85       	ldd	r23, Y+8	; 0x08
    3280:	89 85       	ldd	r24, Y+9	; 0x09
    3282:	9a 85       	ldd	r25, Y+10	; 0x0a
    3284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	9e 83       	std	Y+6, r25	; 0x06
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	8d 81       	ldd	r24, Y+5	; 0x05
    3292:	9e 81       	ldd	r25, Y+6	; 0x06
    3294:	9a 83       	std	Y+2, r25	; 0x02
    3296:	89 83       	std	Y+1, r24	; 0x01
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	9a 81       	ldd	r25, Y+2	; 0x02
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <LCD4_Command_Write+0x458>
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    32a4:	e9 96       	adiw	r28, 0x39	; 57
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <lcd4_set_cursor>:

static void lcd4_set_cursor(u8 row, u8 coul){
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <lcd4_set_cursor+0x6>
    32bc:	00 d0       	rcall	.+0      	; 0x32be <lcd4_set_cursor+0x8>
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	6a 83       	std	Y+2, r22	; 0x02
    coul--;
    32c6:	8a 81       	ldd	r24, Y+2	; 0x02
    32c8:	81 50       	subi	r24, 0x01	; 1
    32ca:	8a 83       	std	Y+2, r24	; 0x02
    switch (row){
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	3c 83       	std	Y+4, r19	; 0x04
    32d4:	2b 83       	std	Y+3, r18	; 0x03
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	82 30       	cpi	r24, 0x02	; 2
    32dc:	91 05       	cpc	r25, r1
    32de:	d9 f0       	breq	.+54     	; 0x3316 <lcd4_set_cursor+0x60>
    32e0:	2b 81       	ldd	r18, Y+3	; 0x03
    32e2:	3c 81       	ldd	r19, Y+4	; 0x04
    32e4:	23 30       	cpi	r18, 0x03	; 3
    32e6:	31 05       	cpc	r19, r1
    32e8:	34 f4       	brge	.+12     	; 0x32f6 <lcd4_set_cursor+0x40>
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	81 30       	cpi	r24, 0x01	; 1
    32f0:	91 05       	cpc	r25, r1
    32f2:	61 f0       	breq	.+24     	; 0x330c <lcd4_set_cursor+0x56>
    32f4:	1e c0       	rjmp	.+60     	; 0x3332 <lcd4_set_cursor+0x7c>
    32f6:	2b 81       	ldd	r18, Y+3	; 0x03
    32f8:	3c 81       	ldd	r19, Y+4	; 0x04
    32fa:	23 30       	cpi	r18, 0x03	; 3
    32fc:	31 05       	cpc	r19, r1
    32fe:	81 f0       	breq	.+32     	; 0x3320 <lcd4_set_cursor+0x6a>
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	9c 81       	ldd	r25, Y+4	; 0x04
    3304:	84 30       	cpi	r24, 0x04	; 4
    3306:	91 05       	cpc	r25, r1
    3308:	81 f0       	breq	.+32     	; 0x332a <lcd4_set_cursor+0x74>
    330a:	13 c0       	rjmp	.+38     	; 0x3332 <lcd4_set_cursor+0x7c>
        case ROW1:
            LCD4_Command_Write(0x80+coul);
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	80 58       	subi	r24, 0x80	; 128
    3310:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
    3314:	0e c0       	rjmp	.+28     	; 0x3332 <lcd4_set_cursor+0x7c>
        break;
        case ROW2:
            LCD4_Command_Write(0xC0+coul);
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	80 54       	subi	r24, 0x40	; 64
    331a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
    331e:	09 c0       	rjmp	.+18     	; 0x3332 <lcd4_set_cursor+0x7c>
        break;
        case ROW3:
            LCD4_Command_Write(0x94+coul);
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	8c 56       	subi	r24, 0x6C	; 108
    3324:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
    3328:	04 c0       	rjmp	.+8      	; 0x3332 <lcd4_set_cursor+0x7c>
        break;
        case ROW4:
            LCD4_Command_Write(0xD4+coul);
    332a:	8a 81       	ldd	r24, Y+2	; 0x02
    332c:	8c 52       	subi	r24, 0x2C	; 44
    332e:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD4_Command_Write>
        break;
        default:
        	break;
    }
}
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <KP_GetKey>:
#include "avr/delay.h"

u8 Keys[][4] = { { '7', '8', '9', '/' }, { '4', '5', '6', '*' }, { '1', '2',
				'3', '-' }, { '.', '0', '=', '+' } };

u8 KP_GetKey() {
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	27 97       	sbiw	r28, 0x07	; 7
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
	u8 i, j = 0;
    3354:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < 4; i++) {
    3356:	1a 82       	std	Y+2, r1	; 0x02
    3358:	61 c0       	rjmp	.+194    	; 0x341c <KP_GetKey+0xdc>
		Dio_WriteChannel(col1, !(i == 0));
    335a:	8a 81       	ldd	r24, Y+2	; 0x02
    335c:	8f 83       	std	Y+7, r24	; 0x07
    335e:	8f 81       	ldd	r24, Y+7	; 0x07
    3360:	88 23       	and	r24, r24
    3362:	11 f0       	breq	.+4      	; 0x3368 <KP_GetKey+0x28>
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	8f 83       	std	Y+7, r24	; 0x07
    3368:	9f 81       	ldd	r25, Y+7	; 0x07
    336a:	8f e1       	ldi	r24, 0x1F	; 31
    336c:	69 2f       	mov	r22, r25
    336e:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(col2, !(i == 1));
    3372:	1e 82       	std	Y+6, r1	; 0x06
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	81 30       	cpi	r24, 0x01	; 1
    3378:	11 f0       	breq	.+4      	; 0x337e <KP_GetKey+0x3e>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	8e 83       	std	Y+6, r24	; 0x06
    337e:	8e e1       	ldi	r24, 0x1E	; 30
    3380:	6e 81       	ldd	r22, Y+6	; 0x06
    3382:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(col3, !(i == 2));
    3386:	1d 82       	std	Y+5, r1	; 0x05
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	82 30       	cpi	r24, 0x02	; 2
    338c:	11 f0       	breq	.+4      	; 0x3392 <KP_GetKey+0x52>
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	8d 83       	std	Y+5, r24	; 0x05
    3392:	89 e1       	ldi	r24, 0x19	; 25
    3394:	6d 81       	ldd	r22, Y+5	; 0x05
    3396:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
		Dio_WriteChannel(col4, !(i == 3));
    339a:	1c 82       	std	Y+4, r1	; 0x04
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	83 30       	cpi	r24, 0x03	; 3
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <KP_GetKey+0x66>
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	8c 83       	std	Y+4, r24	; 0x04
    33a6:	8c e1       	ldi	r24, 0x1C	; 28
    33a8:	6c 81       	ldd	r22, Y+4	; 0x04
    33aa:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>

		if (!Dio_ReadChannel(row1)) {
    33ae:	85 e1       	ldi	r24, 0x15	; 21
    33b0:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    33b4:	88 23       	and	r24, r24
    33b6:	41 f4       	brne	.+16     	; 0x33c8 <KP_GetKey+0x88>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 1;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row1));break;
    33bc:	85 e1       	ldi	r24, 0x15	; 21
    33be:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    33c2:	88 23       	and	r24, r24
    33c4:	d9 f3       	breq	.-10     	; 0x33bc <KP_GetKey+0x7c>
    33c6:	2e c0       	rjmp	.+92     	; 0x3424 <KP_GetKey+0xe4>

		}
		if (!Dio_ReadChannel(row2)) {
    33c8:	84 e1       	ldi	r24, 0x14	; 20
    33ca:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    33ce:	88 23       	and	r24, r24
    33d0:	41 f4       	brne	.+16     	; 0x33e2 <KP_GetKey+0xa2>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 2;
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row2));break;
    33d6:	84 e1       	ldi	r24, 0x14	; 20
    33d8:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    33dc:	88 23       	and	r24, r24
    33de:	d9 f3       	breq	.-10     	; 0x33d6 <KP_GetKey+0x96>
    33e0:	21 c0       	rjmp	.+66     	; 0x3424 <KP_GetKey+0xe4>


		}
		if (!Dio_ReadChannel(row3)) {
    33e2:	83 e1       	ldi	r24, 0x13	; 19
    33e4:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    33e8:	88 23       	and	r24, r24
    33ea:	41 f4       	brne	.+16     	; 0x33fc <KP_GetKey+0xbc>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 3;
    33ec:	83 e0       	ldi	r24, 0x03	; 3
    33ee:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row3));break;
    33f0:	83 e1       	ldi	r24, 0x13	; 19
    33f2:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    33f6:	88 23       	and	r24, r24
    33f8:	d9 f3       	breq	.-10     	; 0x33f0 <KP_GetKey+0xb0>
    33fa:	14 c0       	rjmp	.+40     	; 0x3424 <KP_GetKey+0xe4>

		}
		if (!Dio_ReadChannel(row4)) {
    33fc:	82 e1       	ldi	r24, 0x12	; 18
    33fe:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    3402:	88 23       	and	r24, r24
    3404:	41 f4       	brne	.+16     	; 0x3416 <KP_GetKey+0xd6>
			//_delay_ms(10); // Introduce a short delay for debouncing
			j = 4;
    3406:	84 e0       	ldi	r24, 0x04	; 4
    3408:	89 83       	std	Y+1, r24	; 0x01
			while (!Dio_ReadChannel(row4));break;
    340a:	82 e1       	ldi	r24, 0x12	; 18
    340c:	0e 94 c7 0c 	call	0x198e	; 0x198e <Dio_ReadChannel>
    3410:	88 23       	and	r24, r24
    3412:	d9 f3       	breq	.-10     	; 0x340a <KP_GetKey+0xca>
    3414:	07 c0       	rjmp	.+14     	; 0x3424 <KP_GetKey+0xe4>
				'3', '-' }, { '.', '0', '=', '+' } };

u8 KP_GetKey() {
	u8 i, j = 0;

	for (i = 0; i < 4; i++) {
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	8f 5f       	subi	r24, 0xFF	; 255
    341a:	8a 83       	std	Y+2, r24	; 0x02
    341c:	8a 81       	ldd	r24, Y+2	; 0x02
    341e:	84 30       	cpi	r24, 0x04	; 4
    3420:	08 f4       	brcc	.+2      	; 0x3424 <KP_GetKey+0xe4>
    3422:	9b cf       	rjmp	.-202    	; 0x335a <KP_GetKey+0x1a>
			j = 4;
			while (!Dio_ReadChannel(row4));break;

		}
	}
	Dio_WriteChannel(col1, STD_HIGH);
    3424:	8f e1       	ldi	r24, 0x1F	; 31
    3426:	61 e0       	ldi	r22, 0x01	; 1
    3428:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(col2, STD_HIGH);
    342c:	8e e1       	ldi	r24, 0x1E	; 30
    342e:	61 e0       	ldi	r22, 0x01	; 1
    3430:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(col3, STD_HIGH);
    3434:	89 e1       	ldi	r24, 0x19	; 25
    3436:	61 e0       	ldi	r22, 0x01	; 1
    3438:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(col4, STD_HIGH);
    343c:	8c e1       	ldi	r24, 0x1C	; 28
    343e:	61 e0       	ldi	r22, 0x01	; 1
    3440:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>


	if (j == 0)
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	88 23       	and	r24, r24
    3448:	11 f4       	brne	.+4      	; 0x344e <KP_GetKey+0x10e>
		return 0;
    344a:	1b 82       	std	Y+3, r1	; 0x03
    344c:	15 c0       	rjmp	.+42     	; 0x3478 <KP_GetKey+0x138>
	else
		return (Keys[j-1][i]);
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	ac 01       	movw	r20, r24
    3456:	41 50       	subi	r20, 0x01	; 1
    3458:	50 40       	sbci	r21, 0x00	; 0
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	ca 01       	movw	r24, r20
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	88 0f       	add	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	82 0f       	add	r24, r18
    346c:	93 1f       	adc	r25, r19
    346e:	fc 01       	movw	r30, r24
    3470:	e5 53       	subi	r30, 0x35	; 53
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	8b 83       	std	Y+3, r24	; 0x03
    3478:	8b 81       	ldd	r24, Y+3	; 0x03
}
    347a:	27 96       	adiw	r28, 0x07	; 7
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	de bf       	out	0x3e, r29	; 62
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	cd bf       	out	0x3d, r28	; 61
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <DCM_voidOn>:
/* MCAL */
#include "../../MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"
#include "DCM_interface.h"

void DCM_voidOn(u8 Copy_u8Direction)
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	00 d0       	rcall	.+0      	; 0x3492 <DCM_voidOn+0x6>
    3492:	0f 92       	push	r0
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	89 83       	std	Y+1, r24	; 0x01
	/* Turn DC motor on using H-Bridge
	 By Setting PWM, Dir and Enable pins with high
	 or Dir Low depend on Copy_u8Direction*/
	Dio_WriteChannel(DCM_EN,STD_HIGH);
    349a:	8e e0       	ldi	r24, 0x0E	; 14
    349c:	61 e0       	ldi	r22, 0x01	; 1
    349e:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
	Dio_WriteChannel(DCM_PWM,STD_HIGH);
    34a2:	8b e0       	ldi	r24, 0x0B	; 11
    34a4:	61 e0       	ldi	r22, 0x01	; 1
    34a6:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>

	switch(Copy_u8Direction)
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	28 2f       	mov	r18, r24
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	3b 83       	std	Y+3, r19	; 0x03
    34b2:	2a 83       	std	Y+2, r18	; 0x02
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	31 f0       	breq	.+12     	; 0x34c8 <DCM_voidOn+0x3c>
    34bc:	2a 81       	ldd	r18, Y+2	; 0x02
    34be:	3b 81       	ldd	r19, Y+3	; 0x03
    34c0:	21 30       	cpi	r18, 0x01	; 1
    34c2:	31 05       	cpc	r19, r1
    34c4:	31 f0       	breq	.+12     	; 0x34d2 <DCM_voidOn+0x46>
    34c6:	09 c0       	rjmp	.+18     	; 0x34da <DCM_voidOn+0x4e>
		{
		case DCM_CW:
			Dio_WriteChannel(DCM_DIR, Copy_u8Direction);
    34c8:	8d e0       	ldi	r24, 0x0D	; 13
    34ca:	69 81       	ldd	r22, Y+1	; 0x01
    34cc:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
    34d0:	04 c0       	rjmp	.+8      	; 0x34da <DCM_voidOn+0x4e>
			break;
		case DCM_CCW:
			Dio_WriteChannel(DCM_DIR,Copy_u8Direction);
    34d2:	8d e0       	ldi	r24, 0x0D	; 13
    34d4:	69 81       	ldd	r22, Y+1	; 0x01
    34d6:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
			break;
		default: break;
		}
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <DCM_voidControlSpeed>:


void DCM_voidControlSpeed(u8 Copy_u8Speed)
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	0f 92       	push	r0
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	89 83       	std	Y+1, r24	; 0x01
	/* Controlling DC motor speed using PWM
	mode from TMR0 by setting Duty Cycle*/
	TMR0_voidInit();
    34f2:	0e 94 49 06 	call	0xc92	; 0xc92 <TMR0_voidInit>
	TMR0_voidStart();
    34f6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <TMR0_voidStart>
	TMR0_voidSetDutyCycleForPWM(Copy_u8Speed);
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <TMR0_voidSetDutyCycleForPWM>
}
    3500:	0f 90       	pop	r0
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <DCM_voidOff>:


void DCM_voidOff(void)
{
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
	/* Turn DC motor off using H-Bridge
	   By Setting Enable pin with low */

	Dio_WriteChannel(DCM_EN,STD_LOW);
    3510:	8e e0       	ldi	r24, 0x0E	; 14
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	0e 94 ce 0b 	call	0x179c	; 0x179c <Dio_WriteChannel>
}
    3518:	cf 91       	pop	r28
    351a:	df 91       	pop	r29
    351c:	08 95       	ret

0000351e <main>:

#include "HAL/LCD/LCD_interface.h"
#include "MCAL/EXTI/includes/EXTI_interface.h"
#include "MCAL/TIMERS/TIMER0/includes/TMR0_interface.h"

int main() {
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	0f 92       	push	r0
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
	Port_Init(pin_cfg);
    3528:	88 e6       	ldi	r24, 0x68	; 104
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	0e 94 89 07 	call	0xf12	; 0xf12 <Port_Init>
	 // Initialize UART with baud rate 9600
	    UART_Init();
    3530:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>

	    // Send a character 'A'
	    UART_Send('A');
    3534:	81 e4       	ldi	r24, 0x41	; 65
    3536:	0e 94 c3 05 	call	0xb86	; 0xb86 <UART_Send>

	    // Receive and store the received character
	    u8 receivedData = UART_Receive();
    353a:	0e 94 f5 05 	call	0xbea	; 0xbea <UART_Receive>
    353e:	89 83       	std	Y+1, r24	; 0x01

	    // Check the received character
	    if (receivedData == 'A')
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	81 34       	cpi	r24, 0x41	; 65
    3544:	19 f4       	brne	.+6      	; 0x354c <main+0x2e>
//	        // If 'A' was received, send a 'B'
	        UART_Send('B');
    3546:	82 e4       	ldi	r24, 0x42	; 66
    3548:	0e 94 c3 05 	call	0xb86	; 0xb86 <UART_Send>
    354c:	ff cf       	rjmp	.-2      	; 0x354c <main+0x2e>

0000354e <__udivmodsi4>:
    354e:	a1 e2       	ldi	r26, 0x21	; 33
    3550:	1a 2e       	mov	r1, r26
    3552:	aa 1b       	sub	r26, r26
    3554:	bb 1b       	sub	r27, r27
    3556:	fd 01       	movw	r30, r26
    3558:	0d c0       	rjmp	.+26     	; 0x3574 <__udivmodsi4_ep>

0000355a <__udivmodsi4_loop>:
    355a:	aa 1f       	adc	r26, r26
    355c:	bb 1f       	adc	r27, r27
    355e:	ee 1f       	adc	r30, r30
    3560:	ff 1f       	adc	r31, r31
    3562:	a2 17       	cp	r26, r18
    3564:	b3 07       	cpc	r27, r19
    3566:	e4 07       	cpc	r30, r20
    3568:	f5 07       	cpc	r31, r21
    356a:	20 f0       	brcs	.+8      	; 0x3574 <__udivmodsi4_ep>
    356c:	a2 1b       	sub	r26, r18
    356e:	b3 0b       	sbc	r27, r19
    3570:	e4 0b       	sbc	r30, r20
    3572:	f5 0b       	sbc	r31, r21

00003574 <__udivmodsi4_ep>:
    3574:	66 1f       	adc	r22, r22
    3576:	77 1f       	adc	r23, r23
    3578:	88 1f       	adc	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	1a 94       	dec	r1
    357e:	69 f7       	brne	.-38     	; 0x355a <__udivmodsi4_loop>
    3580:	60 95       	com	r22
    3582:	70 95       	com	r23
    3584:	80 95       	com	r24
    3586:	90 95       	com	r25
    3588:	9b 01       	movw	r18, r22
    358a:	ac 01       	movw	r20, r24
    358c:	bd 01       	movw	r22, r26
    358e:	cf 01       	movw	r24, r30
    3590:	08 95       	ret

00003592 <__prologue_saves__>:
    3592:	2f 92       	push	r2
    3594:	3f 92       	push	r3
    3596:	4f 92       	push	r4
    3598:	5f 92       	push	r5
    359a:	6f 92       	push	r6
    359c:	7f 92       	push	r7
    359e:	8f 92       	push	r8
    35a0:	9f 92       	push	r9
    35a2:	af 92       	push	r10
    35a4:	bf 92       	push	r11
    35a6:	cf 92       	push	r12
    35a8:	df 92       	push	r13
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	ca 1b       	sub	r28, r26
    35bc:	db 0b       	sbc	r29, r27
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	09 94       	ijmp

000035ca <__epilogue_restores__>:
    35ca:	2a 88       	ldd	r2, Y+18	; 0x12
    35cc:	39 88       	ldd	r3, Y+17	; 0x11
    35ce:	48 88       	ldd	r4, Y+16	; 0x10
    35d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    35d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    35d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    35d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    35d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    35da:	aa 84       	ldd	r10, Y+10	; 0x0a
    35dc:	b9 84       	ldd	r11, Y+9	; 0x09
    35de:	c8 84       	ldd	r12, Y+8	; 0x08
    35e0:	df 80       	ldd	r13, Y+7	; 0x07
    35e2:	ee 80       	ldd	r14, Y+6	; 0x06
    35e4:	fd 80       	ldd	r15, Y+5	; 0x05
    35e6:	0c 81       	ldd	r16, Y+4	; 0x04
    35e8:	1b 81       	ldd	r17, Y+3	; 0x03
    35ea:	aa 81       	ldd	r26, Y+2	; 0x02
    35ec:	b9 81       	ldd	r27, Y+1	; 0x01
    35ee:	ce 0f       	add	r28, r30
    35f0:	d1 1d       	adc	r29, r1
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	ed 01       	movw	r28, r26
    35fe:	08 95       	ret

00003600 <_exit>:
    3600:	f8 94       	cli

00003602 <__stop_program>:
    3602:	ff cf       	rjmp	.-2      	; 0x3602 <__stop_program>
