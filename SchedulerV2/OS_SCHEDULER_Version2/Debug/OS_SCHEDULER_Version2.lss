
OS_SCHEDULER_Version2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  00003ddc  00003e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008001cc  008001cc  00003fdc  2**0
                  ALLOC
  3 .stab         000037bc  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000219a  00000000  00000000  00007798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00009932  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  00009b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  00009d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000c649  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0000dc83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000f000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  0000f506  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000feec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_4>
      14:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_10>
      2c:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 1e 	call	0x3cae	; 0x3cae <main>
      8a:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	e8 59       	subi	r30, 0x98	; 152
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <Scheduler>:

Task OS_Tasks[OS_NUMBER_OF_TASKS];

u32 TickCount = 0;

void Scheduler(void) {
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
    for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	71 c0       	rjmp	.+226    	; 0xfde <Scheduler+0xf0>
        if ((OS_Tasks[i].State == OS_TASK_READY)) {
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	fc 01       	movw	r30, r24
     f12:	e4 51       	subi	r30, 0x14	; 20
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	80 81       	ld	r24, Z
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <Scheduler+0x30>
     f1c:	5d c0       	rjmp	.+186    	; 0xfd8 <Scheduler+0xea>
            if (OS_Tasks[i].InitialDelay == 0) {
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	fc 01       	movw	r30, r24
     f34:	e4 51       	subi	r30, 0x14	; 20
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	81 f5       	brne	.+96     	; 0xf9e <Scheduler+0xb0>
                OS_Tasks[i].InitialDelay = OS_Tasks[i].Periodicity - 1;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	fc 01       	movw	r30, r24
     f58:	e4 51       	subi	r30, 0x14	; 20
     f5a:	fe 4f       	sbci	r31, 0xFE	; 254
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	48 2f       	mov	r20, r24
     f62:	41 50       	subi	r20, 0x01	; 1
     f64:	c9 01       	movw	r24, r18
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	fc 01       	movw	r30, r24
     f76:	e4 51       	subi	r30, 0x14	; 20
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	40 83       	st	Z, r20
                OS_Tasks[i].Fptr();
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	fc 01       	movw	r30, r24
     f90:	ee 50       	subi	r30, 0x0E	; 14
     f92:	fe 4f       	sbci	r31, 0xFE	; 254
     f94:	01 90       	ld	r0, Z+
     f96:	f0 81       	ld	r31, Z
     f98:	e0 2d       	mov	r30, r0
     f9a:	09 95       	icall
     f9c:	1d c0       	rjmp	.+58     	; 0xfd8 <Scheduler+0xea>
            } else {
                OS_Tasks[i].InitialDelay--;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	c9 01       	movw	r24, r18
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	fc 01       	movw	r30, r24
     fb6:	e4 51       	subi	r30, 0x14	; 20
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	41 50       	subi	r20, 0x01	; 1
     fc0:	c9 01       	movw	r24, r18
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	fc 01       	movw	r30, r24
     fd2:	e4 51       	subi	r30, 0x14	; 20
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	40 83       	st	Z, r20
Task OS_Tasks[OS_NUMBER_OF_TASKS];

u32 TickCount = 0;

void Scheduler(void) {
    for (u8 i = 0; i < OS_NUMBER_OF_TASKS; i++) {
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	83 30       	cpi	r24, 0x03	; 3
     fe2:	08 f4       	brcc	.+2      	; 0xfe6 <Scheduler+0xf8>
     fe4:	8b cf       	rjmp	.-234    	; 0xefc <Scheduler+0xe>
            } else {
                OS_Tasks[i].InitialDelay--;
            }
        }
    }
    TickCount++;
     fe6:	80 91 cc 01 	lds	r24, 0x01CC
     fea:	90 91 cd 01 	lds	r25, 0x01CD
     fee:	a0 91 ce 01 	lds	r26, 0x01CE
     ff2:	b0 91 cf 01 	lds	r27, 0x01CF
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	a1 1d       	adc	r26, r1
     ffa:	b1 1d       	adc	r27, r1
     ffc:	80 93 cc 01 	sts	0x01CC, r24
    1000:	90 93 cd 01 	sts	0x01CD, r25
    1004:	a0 93 ce 01 	sts	0x01CE, r26
    1008:	b0 93 cf 01 	sts	0x01CF, r27
}
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <OS_voidCreateTask>:

/*
 * OS_voidCreateTask
 */
void OS_voidCreateTask(u8 Copy_u8ID, u16 Copy_u8Periodicity, u16 Copy_u8InitialDelay, void (*ptr)(void)) {
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	27 97       	sbiw	r28, 0x07	; 7
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	7b 83       	std	Y+3, r23	; 0x03
    102c:	6a 83       	std	Y+2, r22	; 0x02
    102e:	5d 83       	std	Y+5, r21	; 0x05
    1030:	4c 83       	std	Y+4, r20	; 0x04
    1032:	3f 83       	std	Y+7, r19	; 0x07
    1034:	2e 83       	std	Y+6, r18	; 0x06
    OS_Tasks[Copy_u8ID].Fptr = ptr;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	ee 50       	subi	r30, 0x0E	; 14
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	8e 81       	ldd	r24, Y+6	; 0x06
    1050:	9f 81       	ldd	r25, Y+7	; 0x07
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
    OS_Tasks[Copy_u8ID].InitialDelay = Copy_u8InitialDelay;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	fc 01       	movw	r30, r24
    106e:	e4 51       	subi	r30, 0x14	; 20
    1070:	fe 4f       	sbci	r31, 0xFE	; 254
    1072:	20 83       	st	Z, r18
    OS_Tasks[Copy_u8ID].Periodicity = Copy_u8Periodicity;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	fc 01       	movw	r30, r24
    1088:	e4 51       	subi	r30, 0x14	; 20
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
    OS_Tasks[Copy_u8ID].State = OS_TASK_READY;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	e4 51       	subi	r30, 0x14	; 20
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24
    OS_Tasks[Copy_u8ID].TaskID = Copy_u8ID;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	fc 01       	movw	r30, r24
    10c6:	e1 51       	subi	r30, 0x11	; 17
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	80 83       	st	Z, r24
}
    10ce:	27 96       	adiw	r28, 0x07	; 7
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <OS_voidDeleteTask>:

/*
 * OS_voidDeleteTask
 */
void OS_voidDeleteTask(u8 Copy_u8ID) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	89 83       	std	Y+1, r24	; 0x01
    OS_Tasks[Copy_u8ID].State = OS_TASK_DELETED;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	fc 01       	movw	r30, r24
    1102:	e4 51       	subi	r30, 0x14	; 20
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	80 83       	st	Z, r24
}
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <OS_voidSuspendTask>:

/*
 * OS_voidSuspendTask
 */
void OS_voidSuspendTask(u8 Copy_u8ID, u8 Copy_u8SuspendTime) {
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <OS_voidSuspendTask+0x6>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
    OS_Tasks[Copy_u8ID].State = OS_TASK_SUSPENDED;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	fc 01       	movw	r30, r24
    1136:	e4 51       	subi	r30, 0x14	; 20
    1138:	fe 4f       	sbci	r31, 0xFE	; 254
    113a:	10 82       	st	Z, r1
    OS_Tasks[Copy_u8ID].SuspendTime = Copy_u8SuspendTime + TickCount;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	80 91 cc 01 	lds	r24, 0x01CC
    1146:	90 91 cd 01 	lds	r25, 0x01CD
    114a:	a0 91 ce 01 	lds	r26, 0x01CE
    114e:	b0 91 cf 01 	lds	r27, 0x01CF
    1152:	98 2f       	mov	r25, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	49 2f       	mov	r20, r25
    1158:	48 0f       	add	r20, r24
    115a:	c9 01       	movw	r24, r18
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	fc 01       	movw	r30, r24
    116a:	ef 50       	subi	r30, 0x0F	; 15
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	40 83       	st	Z, r20
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <OS_voidStartScheduler>:

/*
 * OS_voidStartScheduler
 */
void OS_voidStartScheduler(void) {
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    // Initialize Timer/Counter 2
    TMR2_voidInit();
    1182:	0e 94 2f 0a 	call	0x145e	; 0x145e <TMR2_voidInit>

    // Start Timer/Counter 2
    TMR2_voidStart();
    1186:	0e 94 4e 0a 	call	0x149c	; 0x149c <TMR2_voidStart>

    // Set a callback function to be called on Timer/Counter 2 overflow
    TMR2_voidSetCallBackOVF(Scheduler);
    118a:	87 e7       	ldi	r24, 0x77	; 119
    118c:	97 e0       	ldi	r25, 0x07	; 7
    118e:	0e 94 86 0a 	call	0x150c	; 0x150c <TMR2_voidSetCallBackOVF>
}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <OS_voidResumeTask>:

/*
 * OS_voidResumeTask
 */
void OS_voidResumeTask(u8 Copy_u8ID) {
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
    OS_Tasks[Copy_u8ID].State = OS_TASK_READY;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	fc 01       	movw	r30, r24
    11ba:	e4 51       	subi	r30, 0x14	; 20
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24
}
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <OS_u8GetTaskState>:

/*
 * OS_u8GetTaskState
 */
u8 OS_u8GetTaskState(u8 Copy_u8ID) {
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
    return OS_Tasks[Copy_u8ID].State;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	fc 01       	movw	r30, r24
    11ec:	e4 51       	subi	r30, 0x14	; 20
    11ee:	fe 4f       	sbci	r31, 0xFE	; 254
    11f0:	80 81       	ld	r24, Z
}
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <WDT_voidEnable>:
 * Description: Enables the Watchdog Timer (WDT) with the specified overflow time.
 * Parameters:
 *   - copy_u8Time: Time for WDT overflow, should be one of the WDT_TIME_X_X_MS options.
 */
void WDT_voidEnable(u8 copy_u8Time)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <WDT_voidEnable+0x6>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8Time)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3b 83       	std	Y+3, r19	; 0x03
    1210:	2a 83       	std	Y+2, r18	; 0x02
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	9b 81       	ldd	r25, Y+3	; 0x03
    1216:	84 30       	cpi	r24, 0x04	; 4
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <WDT_voidEnable+0x24>
    121c:	71 c0       	rjmp	.+226    	; 0x1300 <WDT_voidEnable+0x106>
    121e:	2a 81       	ldd	r18, Y+2	; 0x02
    1220:	3b 81       	ldd	r19, Y+3	; 0x03
    1222:	25 30       	cpi	r18, 0x05	; 5
    1224:	31 05       	cpc	r19, r1
    1226:	8c f4       	brge	.+34     	; 0x124a <WDT_voidEnable+0x50>
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	9b 81       	ldd	r25, Y+3	; 0x03
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	91 05       	cpc	r25, r1
    1230:	d9 f1       	breq	.+118    	; 0x12a8 <WDT_voidEnable+0xae>
    1232:	2a 81       	ldd	r18, Y+2	; 0x02
    1234:	3b 81       	ldd	r19, Y+3	; 0x03
    1236:	23 30       	cpi	r18, 0x03	; 3
    1238:	31 05       	cpc	r19, r1
    123a:	0c f0       	brlt	.+2      	; 0x123e <WDT_voidEnable+0x44>
    123c:	4b c0       	rjmp	.+150    	; 0x12d4 <WDT_voidEnable+0xda>
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	9b 81       	ldd	r25, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	d1 f0       	breq	.+52     	; 0x127c <WDT_voidEnable+0x82>
    1248:	c8 c0       	rjmp	.+400    	; 0x13da <WDT_voidEnable+0x1e0>
    124a:	2a 81       	ldd	r18, Y+2	; 0x02
    124c:	3b 81       	ldd	r19, Y+3	; 0x03
    124e:	26 30       	cpi	r18, 0x06	; 6
    1250:	31 05       	cpc	r19, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <WDT_voidEnable+0x5c>
    1254:	81 c0       	rjmp	.+258    	; 0x1358 <WDT_voidEnable+0x15e>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	86 30       	cpi	r24, 0x06	; 6
    125c:	91 05       	cpc	r25, r1
    125e:	0c f4       	brge	.+2      	; 0x1262 <WDT_voidEnable+0x68>
    1260:	65 c0       	rjmp	.+202    	; 0x132c <WDT_voidEnable+0x132>
    1262:	2a 81       	ldd	r18, Y+2	; 0x02
    1264:	3b 81       	ldd	r19, Y+3	; 0x03
    1266:	27 30       	cpi	r18, 0x07	; 7
    1268:	31 05       	cpc	r19, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <WDT_voidEnable+0x74>
    126c:	8b c0       	rjmp	.+278    	; 0x1384 <WDT_voidEnable+0x18a>
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <WDT_voidEnable+0x80>
    1278:	9b c0       	rjmp	.+310    	; 0x13b0 <WDT_voidEnable+0x1b6>
    127a:	af c0       	rjmp	.+350    	; 0x13da <WDT_voidEnable+0x1e0>
    {
    // Select overflow time as 16.3ms
    case WDT_TIME_16_3_MS:
        CLR_BIT(WDTCR, WDP0);
    127c:	a1 e4       	ldi	r26, 0x41	; 65
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e1 e4       	ldi	r30, 0x41	; 65
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8e 7f       	andi	r24, 0xFE	; 254
    1288:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    128a:	a1 e4       	ldi	r26, 0x41	; 65
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e1 e4       	ldi	r30, 0x41	; 65
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8d 7f       	andi	r24, 0xFD	; 253
    1296:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    1298:	a1 e4       	ldi	r26, 0x41	; 65
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e1 e4       	ldi	r30, 0x41	; 65
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8b 7f       	andi	r24, 0xFB	; 251
    12a4:	8c 93       	st	X, r24
    12a6:	99 c0       	rjmp	.+306    	; 0x13da <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 32.5ms
    case WDT_TIME_32_5_MS:
        SET_BIT(WDTCR, WDP0);
    12a8:	a1 e4       	ldi	r26, 0x41	; 65
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e1 e4       	ldi	r30, 0x41	; 65
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	81 60       	ori	r24, 0x01	; 1
    12b4:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    12b6:	a1 e4       	ldi	r26, 0x41	; 65
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e1 e4       	ldi	r30, 0x41	; 65
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8d 7f       	andi	r24, 0xFD	; 253
    12c2:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    12c4:	a1 e4       	ldi	r26, 0x41	; 65
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e1 e4       	ldi	r30, 0x41	; 65
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8b 7f       	andi	r24, 0xFB	; 251
    12d0:	8c 93       	st	X, r24
    12d2:	83 c0       	rjmp	.+262    	; 0x13da <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 65ms
    case WDT_TIME_65_MS:
        CLR_BIT(WDTCR, WDP0);
    12d4:	a1 e4       	ldi	r26, 0x41	; 65
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e1 e4       	ldi	r30, 0x41	; 65
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8e 7f       	andi	r24, 0xFE	; 254
    12e0:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    12e2:	a1 e4       	ldi	r26, 0x41	; 65
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e1 e4       	ldi	r30, 0x41	; 65
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	82 60       	ori	r24, 0x02	; 2
    12ee:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    12f0:	a1 e4       	ldi	r26, 0x41	; 65
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e1 e4       	ldi	r30, 0x41	; 65
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8b 7f       	andi	r24, 0xFB	; 251
    12fc:	8c 93       	st	X, r24
    12fe:	6d c0       	rjmp	.+218    	; 0x13da <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.13s
    case WDT_TIME_0_13_S:
        SET_BIT(WDTCR, WDP0);
    1300:	a1 e4       	ldi	r26, 0x41	; 65
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e1 e4       	ldi	r30, 0x41	; 65
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	81 60       	ori	r24, 0x01	; 1
    130c:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    130e:	a1 e4       	ldi	r26, 0x41	; 65
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e1 e4       	ldi	r30, 0x41	; 65
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP2);
    131c:	a1 e4       	ldi	r26, 0x41	; 65
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e1 e4       	ldi	r30, 0x41	; 65
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8b 7f       	andi	r24, 0xFB	; 251
    1328:	8c 93       	st	X, r24
    132a:	57 c0       	rjmp	.+174    	; 0x13da <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.26s
    case WDT_TIME_0_26_S:
        CLR_BIT(WDTCR, WDP0);
    132c:	a1 e4       	ldi	r26, 0x41	; 65
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e1 e4       	ldi	r30, 0x41	; 65
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8e 7f       	andi	r24, 0xFE	; 254
    1338:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    133a:	a1 e4       	ldi	r26, 0x41	; 65
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e1 e4       	ldi	r30, 0x41	; 65
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8d 7f       	andi	r24, 0xFD	; 253
    1346:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    1348:	a1 e4       	ldi	r26, 0x41	; 65
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e1 e4       	ldi	r30, 0x41	; 65
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	84 60       	ori	r24, 0x04	; 4
    1354:	8c 93       	st	X, r24
    1356:	41 c0       	rjmp	.+130    	; 0x13da <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 0.52s
    case WDT_TIME_0_52_S:
        SET_BIT(WDTCR, WDP0);
    1358:	a1 e4       	ldi	r26, 0x41	; 65
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e1 e4       	ldi	r30, 0x41	; 65
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	8c 93       	st	X, r24
        CLR_BIT(WDTCR, WDP1);
    1366:	a1 e4       	ldi	r26, 0x41	; 65
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e1 e4       	ldi	r30, 0x41	; 65
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    1374:	a1 e4       	ldi	r26, 0x41	; 65
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e1 e4       	ldi	r30, 0x41	; 65
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	84 60       	ori	r24, 0x04	; 4
    1380:	8c 93       	st	X, r24
    1382:	2b c0       	rjmp	.+86     	; 0x13da <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 1s
    case WDT_TIME_1_S:
        CLR_BIT(WDTCR, WDP0);
    1384:	a1 e4       	ldi	r26, 0x41	; 65
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e1 e4       	ldi	r30, 0x41	; 65
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8e 7f       	andi	r24, 0xFE	; 254
    1390:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    1392:	a1 e4       	ldi	r26, 0x41	; 65
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e1 e4       	ldi	r30, 0x41	; 65
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	82 60       	ori	r24, 0x02	; 2
    139e:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    13a0:	a1 e4       	ldi	r26, 0x41	; 65
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e1 e4       	ldi	r30, 0x41	; 65
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	84 60       	ori	r24, 0x04	; 4
    13ac:	8c 93       	st	X, r24
    13ae:	15 c0       	rjmp	.+42     	; 0x13da <WDT_voidEnable+0x1e0>
        break;

    // Select overflow time as 2.1s
    case WDT_TIME_2_1_S:
        SET_BIT(WDTCR, WDP0);
    13b0:	a1 e4       	ldi	r26, 0x41	; 65
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e1 e4       	ldi	r30, 0x41	; 65
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP1);
    13be:	a1 e4       	ldi	r26, 0x41	; 65
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e1 e4       	ldi	r30, 0x41	; 65
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	82 60       	ori	r24, 0x02	; 2
    13ca:	8c 93       	st	X, r24
        SET_BIT(WDTCR, WDP2);
    13cc:	a1 e4       	ldi	r26, 0x41	; 65
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e1 e4       	ldi	r30, 0x41	; 65
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	84 60       	ori	r24, 0x04	; 4
    13d8:	8c 93       	st	X, r24

    default:
        break;
    }
    //enable watch dog
    SET_BIT(WDTCR , WDE);
    13da:	a1 e4       	ldi	r26, 0x41	; 65
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e1 e4       	ldi	r30, 0x41	; 65
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 60       	ori	r24, 0x08	; 8
    13e6:	8c 93       	st	X, r24
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <WDT_voidDisable>:
/*
 * Function: WDT_voidDisable
 * Description: Disables the Watchdog Timer (WDT).
 */
void WDT_voidDisable(void)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE) | (1<<WDE);
    13fc:	e1 e4       	ldi	r30, 0x41	; 65
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	88 e1       	ldi	r24, 0x18	; 24
    1402:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
    1404:	e1 e4       	ldi	r30, 0x41	; 65
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <TMR2_voidSetDelay_ms_usingCTC+0x6>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
    141e:	e3 e4       	ldi	r30, 0x43	; 67
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	89 ef       	ldi	r24, 0xF9	; 249
    1424:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	cc 01       	movw	r24, r24
    142c:	a0 e0       	ldi	r26, 0x00	; 0
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	80 93 da 01 	sts	0x01DA, r24
    1434:	90 93 db 01 	sts	0x01DB, r25
    1438:	a0 93 dc 01 	sts	0x01DC, r26
    143c:	b0 93 dd 01 	sts	0x01DD, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
	// Enable Output Compare Match Interrupt (OCI)
	SET_BIT(TIMSK, OCIE2);

#elif TMR2_MODE == TMR2_NORMAL_MODE
	// Select normal mode
	CLR_BIT(TCCR2, WGM20);
    1466:	a5 e4       	ldi	r26, 0x45	; 69
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e4       	ldi	r30, 0x45	; 69
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 7b       	andi	r24, 0xBF	; 191
    1472:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM21);
    1474:	a5 e4       	ldi	r26, 0x45	; 69
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e4       	ldi	r30, 0x45	; 69
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	87 7f       	andi	r24, 0xF7	; 247
    1480:	8c 93       	st	X, r24
	// Initialize timer with a preload value
	TCNT2 = TMR2_PRELOAD_VALUE;
    1482:	e4 e4       	ldi	r30, 0x44	; 68
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	10 82       	st	Z, r1
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);
    1488:	a9 e5       	ldi	r26, 0x59	; 89
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e9 e5       	ldi	r30, 0x59	; 89
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 64       	ori	r24, 0x40	; 64
    1494:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    14a4:	a5 e4       	ldi	r26, 0x45	; 69
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e5 e4       	ldi	r30, 0x45	; 69
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	81 60       	ori	r24, 0x01	; 1
    14b0:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    14b2:	a5 e4       	ldi	r26, 0x45	; 69
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e4       	ldi	r30, 0x45	; 69
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	82 60       	ori	r24, 0x02	; 2
    14be:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    14c0:	a5 e4       	ldi	r26, 0x45	; 69
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e5 e4       	ldi	r30, 0x45	; 69
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8b 7f       	andi	r24, 0xFB	; 251
    14cc:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    14dc:	a5 e4       	ldi	r26, 0x45	; 69
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e4       	ldi	r30, 0x45	; 69
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    14ea:	a5 e4       	ldi	r26, 0x45	; 69
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e4       	ldi	r30, 0x45	; 69
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    14f8:	a5 e4       	ldi	r26, 0x45	; 69
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e4       	ldi	r30, 0x45	; 69
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8b 7f       	andi	r24, 0xFB	; 251
    1504:	8c 93       	st	X, r24
}
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <TMR2_voidSetCallBackOVF+0x6>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	31 f0       	breq	.+12     	; 0x152e <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	90 93 d1 01 	sts	0x01D1, r25
    152a:	80 93 d0 01 	sts	0x01D0, r24
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <TMR2_voidSetCallBackCTC+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	31 f0       	breq	.+12     	; 0x155a <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	90 93 d3 01 	sts	0x01D3, r25
    1556:	80 93 d2 01 	sts	0x01D2, r24
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	7f 93       	push	r23
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	af 93       	push	r26
    1580:	bf 93       	push	r27
    1582:	ef 93       	push	r30
    1584:	ff 93       	push	r31
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    158e:	80 91 d4 01 	lds	r24, 0x01D4
    1592:	90 91 d5 01 	lds	r25, 0x01D5
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	90 93 d5 01 	sts	0x01D5, r25
    159c:	80 93 d4 01 	sts	0x01D4, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    15a0:	80 91 d4 01 	lds	r24, 0x01D4
    15a4:	90 91 d5 01 	lds	r25, 0x01D5
    15a8:	86 30       	cpi	r24, 0x06	; 6
    15aa:	91 05       	cpc	r25, r1
    15ac:	91 f4       	brne	.+36     	; 0x15d2 <__vector_5+0x6e>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    15ae:	e4 e4       	ldi	r30, 0x44	; 68
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	10 82       	st	Z, r1
		// Clear the counter
		local_u16ovCounter = 0;
    15b4:	10 92 d5 01 	sts	0x01D5, r1
    15b8:	10 92 d4 01 	sts	0x01D4, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    15bc:	80 91 d0 01 	lds	r24, 0x01D0
    15c0:	90 91 d1 01 	lds	r25, 0x01D1
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	29 f0       	breq	.+10     	; 0x15d2 <__vector_5+0x6e>
			TMR2_privatePtrToCAllBackOVF();
    15c8:	e0 91 d0 01 	lds	r30, 0x01D0
    15cc:	f0 91 d1 01 	lds	r31, 0x01D1
    15d0:	09 95       	icall
		}
	}
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1622:	80 91 d6 01 	lds	r24, 0x01D6
    1626:	90 91 d7 01 	lds	r25, 0x01D7
    162a:	a0 91 d8 01 	lds	r26, 0x01D8
    162e:	b0 91 d9 01 	lds	r27, 0x01D9
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	a1 1d       	adc	r26, r1
    1636:	b1 1d       	adc	r27, r1
    1638:	80 93 d6 01 	sts	0x01D6, r24
    163c:	90 93 d7 01 	sts	0x01D7, r25
    1640:	a0 93 d8 01 	sts	0x01D8, r26
    1644:	b0 93 d9 01 	sts	0x01D9, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1648:	20 91 da 01 	lds	r18, 0x01DA
    164c:	30 91 db 01 	lds	r19, 0x01DB
    1650:	40 91 dc 01 	lds	r20, 0x01DC
    1654:	50 91 dd 01 	lds	r21, 0x01DD
    1658:	80 91 d6 01 	lds	r24, 0x01D6
    165c:	90 91 d7 01 	lds	r25, 0x01D7
    1660:	a0 91 d8 01 	lds	r26, 0x01D8
    1664:	b0 91 d9 01 	lds	r27, 0x01D9
    1668:	28 17       	cp	r18, r24
    166a:	39 07       	cpc	r19, r25
    166c:	4a 07       	cpc	r20, r26
    166e:	5b 07       	cpc	r21, r27
    1670:	99 f4       	brne	.+38     	; 0x1698 <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1672:	10 92 d6 01 	sts	0x01D6, r1
    1676:	10 92 d7 01 	sts	0x01D7, r1
    167a:	10 92 d8 01 	sts	0x01D8, r1
    167e:	10 92 d9 01 	sts	0x01D9, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    1682:	80 91 d2 01 	lds	r24, 0x01D2
    1686:	90 91 d3 01 	lds	r25, 0x01D3
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	29 f0       	breq	.+10     	; 0x1698 <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    168e:	e0 91 d2 01 	lds	r30, 0x01D2
    1692:	f0 91 d3 01 	lds	r31, 0x01D3
    1696:	09 95       	icall
		}
	}
}
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	ff 91       	pop	r31
    169e:	ef 91       	pop	r30
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    16ca:	e3 e4       	ldi	r30, 0x43	; 67
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	80 83       	st	Z, r24
}
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    16ec:	06 e4       	ldi	r16, 0x46	; 70
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	9c 01       	movw	r18, r24
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	80 e9       	ldi	r24, 0x90	; 144
    16fc:	90 ed       	ldi	r25, 0xD0	; 208
    16fe:	a3 e0       	ldi	r26, 0x03	; 3
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__udivmodsi4>
    170a:	da 01       	movw	r26, r20
    170c:	c9 01       	movw	r24, r18
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f8 01       	movw	r30, r16
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret

00001724 <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_u8_duty) {
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	69 83       	std	Y+1, r22	; 0x01
    1736:	7a 83       	std	Y+2, r23	; 0x02
    1738:	8b 83       	std	Y+3, r24	; 0x03
    173a:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_u8_duty <= 100) {
    173c:	69 81       	ldd	r22, Y+1	; 0x01
    173e:	7a 81       	ldd	r23, Y+2	; 0x02
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	48 ec       	ldi	r20, 0xC8	; 200
    174a:	52 e4       	ldi	r21, 0x42	; 66
    174c:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    1750:	18 16       	cp	r1, r24
    1752:	0c f4       	brge	.+2      	; 0x1756 <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    1754:	48 c0       	rjmp	.+144    	; 0x17e6 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_u8_duty == 0) {
    1756:	69 81       	ldd	r22, Y+1	; 0x01
    1758:	7a 81       	ldd	r23, Y+2	; 0x02
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    176a:	88 23       	and	r24, r24
    176c:	29 f4       	brne	.+10     	; 0x1778 <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    176e:	ea e4       	ldi	r30, 0x4A	; 74
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	11 82       	std	Z+1, r1	; 0x01
    1774:	10 82       	st	Z, r1
    1776:	37 c0       	rjmp	.+110    	; 0x17e6 <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_u8_duty * (ICR1 + 1)) / 100) - 1;
    1778:	0a e4       	ldi	r16, 0x4A	; 74
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	e6 e4       	ldi	r30, 0x46	; 70
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	cc 01       	movw	r24, r24
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	29 81       	ldd	r18, Y+1	; 0x01
    179e:	3a 81       	ldd	r19, Y+2	; 0x02
    17a0:	4b 81       	ldd	r20, Y+3	; 0x03
    17a2:	5c 81       	ldd	r21, Y+4	; 0x04
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	48 ec       	ldi	r20, 0xC8	; 200
    17b6:	52 e4       	ldi	r21, 0x42	; 66
    17b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	f8 01       	movw	r30, r16
    17e2:	91 83       	std	Z+1, r25	; 0x01
    17e4:	80 83       	st	Z, r24
			copy_u8_duty = 100 - copy_u8_duty;
			OCR1A = (((float)copy_u8_duty * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <TMR1_voidInit>:


void TMR1_voidInit(void) {
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    1800:	af e4       	ldi	r26, 0x4F	; 79
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ef e4       	ldi	r30, 0x4F	; 79
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8e 7f       	andi	r24, 0xFE	; 254
    180c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    180e:	af e4       	ldi	r26, 0x4F	; 79
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ef e4       	ldi	r30, 0x4F	; 79
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	82 60       	ori	r24, 0x02	; 2
    181a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    181c:	ae e4       	ldi	r26, 0x4E	; 78
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ee e4       	ldi	r30, 0x4E	; 78
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	88 60       	ori	r24, 0x08	; 8
    1828:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    182a:	ae e4       	ldi	r26, 0x4E	; 78
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ee e4       	ldi	r30, 0x4E	; 78
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	80 61       	ori	r24, 0x10	; 16
    1836:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    1838:	af e4       	ldi	r26, 0x4F	; 79
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ef e4       	ldi	r30, 0x4F	; 79
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8f 7b       	andi	r24, 0xBF	; 191
    1844:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1846:	af e4       	ldi	r26, 0x4F	; 79
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	ef e4       	ldi	r30, 0x4F	; 79
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
#endif
	//TMR1_voidSetFrequencyMode14FastPWM(50);

#endif
}
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <TMR1_voidSetCompareMatchValueA+0x6>
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    1868:	ea e4       	ldi	r30, 0x4A	; 74
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    1886:	ae e4       	ldi	r26, 0x4E	; 78
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	ee e4       	ldi	r30, 0x4E	; 78
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	81 60       	ori	r24, 0x01	; 1
    1892:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1894:	ae e4       	ldi	r26, 0x4E	; 78
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ee e4       	ldi	r30, 0x4E	; 78
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	82 60       	ori	r24, 0x02	; 2
    18a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    18a2:	ae e4       	ldi	r26, 0x4E	; 78
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ee e4       	ldi	r30, 0x4E	; 78
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8b 7f       	andi	r24, 0xFB	; 251
    18ae:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    18be:	ae e4       	ldi	r26, 0x4E	; 78
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ee e4       	ldi	r30, 0x4E	; 78
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8e 7f       	andi	r24, 0xFE	; 254
    18ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    18cc:	ae e4       	ldi	r26, 0x4E	; 78
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ee e4       	ldi	r30, 0x4E	; 78
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8d 7f       	andi	r24, 0xFD	; 253
    18d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    18da:	ae e4       	ldi	r26, 0x4E	; 78
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ee e4       	ldi	r30, 0x4E	; 78
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8b 7f       	andi	r24, 0xFB	; 251
    18e6:	8c 93       	st	X, r24
}
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    18fc:	ec e5       	ldi	r30, 0x5C	; 92
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	89 ef       	ldi	r24, 0xF9	; 249
    1902:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	cc 01       	movw	r24, r24
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	80 93 e8 01 	sts	0x01E8, r24
    1912:	90 93 e9 01 	sts	0x01E9, r25
    1916:	a0 93 ea 01 	sts	0x01EA, r26
    191a:	b0 93 eb 01 	sts	0x01EB, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	85 36       	cpi	r24, 0x65	; 101
    1938:	d0 f4       	brcc	.+52     	; 0x196e <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    193a:	ec e5       	ldi	r30, 0x5C	; 92
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	48 2f       	mov	r20, r24
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	ca 01       	movw	r24, r20
    1946:	9c 01       	movw	r18, r24
    1948:	22 0f       	add	r18, r18
    194a:	33 1f       	adc	r19, r19
    194c:	c9 01       	movw	r24, r18
    194e:	96 95       	lsr	r25
    1950:	98 2f       	mov	r25, r24
    1952:	88 27       	eor	r24, r24
    1954:	97 95       	ror	r25
    1956:	87 95       	ror	r24
    1958:	82 1b       	sub	r24, r18
    195a:	93 0b       	sbc	r25, r19
    195c:	84 0f       	add	r24, r20
    195e:	95 1f       	adc	r25, r21
    1960:	24 e6       	ldi	r18, 0x64	; 100
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	b9 01       	movw	r22, r18
    1966:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__udivmodhi4>
    196a:	cb 01       	movw	r24, r22
    196c:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    197e:	a3 e5       	ldi	r26, 0x53	; 83
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e3 e5       	ldi	r30, 0x53	; 83
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 64       	ori	r24, 0x40	; 64
    198a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    198c:	a3 e5       	ldi	r26, 0x53	; 83
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e3 e5       	ldi	r30, 0x53	; 83
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	87 7f       	andi	r24, 0xF7	; 247
    1998:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    199a:	a3 e5       	ldi	r26, 0x53	; 83
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 e5       	ldi	r30, 0x53	; 83
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7e       	andi	r24, 0xEF	; 239
    19a6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    19a8:	a3 e5       	ldi	r26, 0x53	; 83
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e3 e5       	ldi	r30, 0x53	; 83
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 62       	ori	r24, 0x20	; 32
    19b4:	8c 93       	st	X, r24
#endif

#endif
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    19c4:	a3 e5       	ldi	r26, 0x53	; 83
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e3 e5       	ldi	r30, 0x53	; 83
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	81 60       	ori	r24, 0x01	; 1
    19d0:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    19d2:	a3 e5       	ldi	r26, 0x53	; 83
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e3 e5       	ldi	r30, 0x53	; 83
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	82 60       	ori	r24, 0x02	; 2
    19de:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    19e0:	a3 e5       	ldi	r26, 0x53	; 83
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e3 e5       	ldi	r30, 0x53	; 83
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8b 7f       	andi	r24, 0xFB	; 251
    19ec:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    19fc:	a3 e5       	ldi	r26, 0x53	; 83
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e3 e5       	ldi	r30, 0x53	; 83
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8e 7f       	andi	r24, 0xFE	; 254
    1a08:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1a0a:	a3 e5       	ldi	r26, 0x53	; 83
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e3 e5       	ldi	r30, 0x53	; 83
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8d 7f       	andi	r24, 0xFD	; 253
    1a16:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1a18:	a3 e5       	ldi	r26, 0x53	; 83
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e3 e5       	ldi	r30, 0x53	; 83
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8b 7f       	andi	r24, 0xFB	; 251
    1a24:	8c 93       	st	X, r24
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <TMR0_voidSetCallBackOVF+0x6>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	31 f0       	breq	.+12     	; 0x1a4e <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	90 93 df 01 	sts	0x01DF, r25
    1a4a:	80 93 de 01 	sts	0x01DE, r24
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <TMR0_voidSetCallBackCTC+0x6>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	31 f0       	breq	.+12     	; 0x1a7a <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	90 93 e1 01 	sts	0x01E1, r25
    1a76:	80 93 e0 01 	sts	0x01E0, r24
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1a84:	1f 92       	push	r1
    1a86:	0f 92       	push	r0
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	0f 92       	push	r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	2f 93       	push	r18
    1a90:	3f 93       	push	r19
    1a92:	4f 93       	push	r20
    1a94:	5f 93       	push	r21
    1a96:	6f 93       	push	r22
    1a98:	7f 93       	push	r23
    1a9a:	8f 93       	push	r24
    1a9c:	9f 93       	push	r25
    1a9e:	af 93       	push	r26
    1aa0:	bf 93       	push	r27
    1aa2:	ef 93       	push	r30
    1aa4:	ff 93       	push	r31
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    1aae:	80 91 e2 01 	lds	r24, 0x01E2
    1ab2:	90 91 e3 01 	lds	r25, 0x01E3
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	90 93 e3 01 	sts	0x01E3, r25
    1abc:	80 93 e2 01 	sts	0x01E2, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    1ac0:	80 91 e2 01 	lds	r24, 0x01E2
    1ac4:	90 91 e3 01 	lds	r25, 0x01E3
    1ac8:	23 e0       	ldi	r18, 0x03	; 3
    1aca:	81 3d       	cpi	r24, 0xD1	; 209
    1acc:	92 07       	cpc	r25, r18
    1ace:	99 f4       	brne	.+38     	; 0x1af6 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    1ad0:	e2 e5       	ldi	r30, 0x52	; 82
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	81 e7       	ldi	r24, 0x71	; 113
    1ad6:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1ad8:	10 92 e3 01 	sts	0x01E3, r1
    1adc:	10 92 e2 01 	sts	0x01E2, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    1ae0:	80 91 de 01 	lds	r24, 0x01DE
    1ae4:	90 91 df 01 	lds	r25, 0x01DF
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	29 f0       	breq	.+10     	; 0x1af6 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    1aec:	e0 91 de 01 	lds	r30, 0x01DE
    1af0:	f0 91 df 01 	lds	r31, 0x01DF
    1af4:	09 95       	icall
		}
	}
}
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	ff 91       	pop	r31
    1afc:	ef 91       	pop	r30
    1afe:	bf 91       	pop	r27
    1b00:	af 91       	pop	r26
    1b02:	9f 91       	pop	r25
    1b04:	8f 91       	pop	r24
    1b06:	7f 91       	pop	r23
    1b08:	6f 91       	pop	r22
    1b0a:	5f 91       	pop	r21
    1b0c:	4f 91       	pop	r20
    1b0e:	3f 91       	pop	r19
    1b10:	2f 91       	pop	r18
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1b1c:	1f 92       	push	r1
    1b1e:	0f 92       	push	r0
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	2f 93       	push	r18
    1b28:	3f 93       	push	r19
    1b2a:	4f 93       	push	r20
    1b2c:	5f 93       	push	r21
    1b2e:	6f 93       	push	r22
    1b30:	7f 93       	push	r23
    1b32:	8f 93       	push	r24
    1b34:	9f 93       	push	r25
    1b36:	af 93       	push	r26
    1b38:	bf 93       	push	r27
    1b3a:	ef 93       	push	r30
    1b3c:	ff 93       	push	r31
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1b46:	80 91 e4 01 	lds	r24, 0x01E4
    1b4a:	90 91 e5 01 	lds	r25, 0x01E5
    1b4e:	a0 91 e6 01 	lds	r26, 0x01E6
    1b52:	b0 91 e7 01 	lds	r27, 0x01E7
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	a1 1d       	adc	r26, r1
    1b5a:	b1 1d       	adc	r27, r1
    1b5c:	80 93 e4 01 	sts	0x01E4, r24
    1b60:	90 93 e5 01 	sts	0x01E5, r25
    1b64:	a0 93 e6 01 	sts	0x01E6, r26
    1b68:	b0 93 e7 01 	sts	0x01E7, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1b6c:	20 91 e8 01 	lds	r18, 0x01E8
    1b70:	30 91 e9 01 	lds	r19, 0x01E9
    1b74:	40 91 ea 01 	lds	r20, 0x01EA
    1b78:	50 91 eb 01 	lds	r21, 0x01EB
    1b7c:	80 91 e4 01 	lds	r24, 0x01E4
    1b80:	90 91 e5 01 	lds	r25, 0x01E5
    1b84:	a0 91 e6 01 	lds	r26, 0x01E6
    1b88:	b0 91 e7 01 	lds	r27, 0x01E7
    1b8c:	28 17       	cp	r18, r24
    1b8e:	39 07       	cpc	r19, r25
    1b90:	4a 07       	cpc	r20, r26
    1b92:	5b 07       	cpc	r21, r27
    1b94:	99 f4       	brne	.+38     	; 0x1bbc <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1b96:	10 92 e4 01 	sts	0x01E4, r1
    1b9a:	10 92 e5 01 	sts	0x01E5, r1
    1b9e:	10 92 e6 01 	sts	0x01E6, r1
    1ba2:	10 92 e7 01 	sts	0x01E7, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    1ba6:	80 91 e0 01 	lds	r24, 0x01E0
    1baa:	90 91 e1 01 	lds	r25, 0x01E1
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	29 f0       	breq	.+10     	; 0x1bbc <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    1bb2:	e0 91 e0 01 	lds	r30, 0x01E0
    1bb6:	f0 91 e1 01 	lds	r31, 0x01E1
    1bba:	09 95       	icall
		}
	}
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	ff 91       	pop	r31
    1bc2:	ef 91       	pop	r30
    1bc4:	bf 91       	pop	r27
    1bc6:	af 91       	pop	r26
    1bc8:	9f 91       	pop	r25
    1bca:	8f 91       	pop	r24
    1bcc:	7f 91       	pop	r23
    1bce:	6f 91       	pop	r22
    1bd0:	5f 91       	pop	r21
    1bd2:	4f 91       	pop	r20
    1bd4:	3f 91       	pop	r19
    1bd6:	2f 91       	pop	r18
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 90       	pop	r0
    1bde:	1f 90       	pop	r1
    1be0:	18 95       	reti

00001be2 <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	0f 92       	push	r0
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    1bee:	ec e5       	ldi	r30, 0x5C	; 92
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	80 83       	st	Z, r24
}
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <Port_Init+0x6>
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <Port_Init+0x8>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <Port_Init+0xa>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    1c10:	1a 82       	std	Y+2, r1	; 0x02
    1c12:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
    1c14:	1a 82       	std	Y+2, r1	; 0x02
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	ea c1       	rjmp	.+980    	; 0x1fee <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1c1a:	29 81       	ldd	r18, Y+1	; 0x01
    1c1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c1e:	c9 01       	movw	r24, r18
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	28 0f       	add	r18, r24
    1c26:	39 1f       	adc	r19, r25
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	e2 0f       	add	r30, r18
    1c30:	f3 1f       	adc	r31, r19
    1c32:	80 81       	ld	r24, Z
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	3e 83       	std	Y+6, r19	; 0x06
    1c3a:	2d 83       	std	Y+5, r18	; 0x05
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <Port_Init+0x4a>
    1c46:	85 c0       	rjmp	.+266    	; 0x1d52 <Port_Init+0x154>
    1c48:	2d 81       	ldd	r18, Y+5	; 0x05
    1c4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4c:	22 30       	cpi	r18, 0x02	; 2
    1c4e:	31 05       	cpc	r19, r1
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <Port_Init+0x5e>
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	71 f0       	breq	.+28     	; 0x1c76 <Port_Init+0x78>
    1c5a:	c4 c1       	rjmp	.+904    	; 0x1fe4 <Port_Init+0x3e6>
    1c5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <Port_Init+0x6a>
    1c66:	e3 c0       	rjmp	.+454    	; 0x1e2e <Port_Init+0x230>
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	91 05       	cpc	r25, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <Port_Init+0x76>
    1c72:	4b c1       	rjmp	.+662    	; 0x1f0a <Port_Init+0x30c>
    1c74:	b7 c1       	rjmp	.+878    	; 0x1fe4 <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1c76:	29 81       	ldd	r18, Y+1	; 0x01
    1c78:	3a 81       	ldd	r19, Y+2	; 0x02
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	28 0f       	add	r18, r24
    1c82:	39 1f       	adc	r19, r25
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	fc 01       	movw	r30, r24
    1c8a:	e2 0f       	add	r30, r18
    1c8c:	f3 1f       	adc	r31, r19
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	01 f5       	brne	.+64     	; 0x1cd4 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1c94:	aa e3       	ldi	r26, 0x3A	; 58
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	ea e3       	ldi	r30, 0x3A	; 58
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	29 81       	ldd	r18, Y+1	; 0x01
    1ca2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ca4:	c9 01       	movw	r24, r18
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	28 0f       	add	r18, r24
    1cac:	39 1f       	adc	r19, r25
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	e2 0f       	add	r30, r18
    1cb6:	f3 1f       	adc	r31, r19
    1cb8:	81 81       	ldd	r24, Z+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <Port_Init+0xcc>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <Port_Init+0xc8>
    1cce:	84 2b       	or	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	88 c1       	rjmp	.+784    	; 0x1fe4 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    1cd4:	aa e3       	ldi	r26, 0x3A	; 58
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	ea e3       	ldi	r30, 0x3A	; 58
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	29 81       	ldd	r18, Y+1	; 0x01
    1ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce4:	c9 01       	movw	r24, r18
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	28 0f       	add	r18, r24
    1cec:	39 1f       	adc	r19, r25
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e2 0f       	add	r30, r18
    1cf6:	f3 1f       	adc	r31, r19
    1cf8:	81 81       	ldd	r24, Z+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <Port_Init+0x10a>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	2a 95       	dec	r18
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <Port_Init+0x106>
    1d0c:	80 95       	com	r24
    1d0e:	84 23       	and	r24, r20
    1d10:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    1d12:	ab e3       	ldi	r26, 0x3B	; 59
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	eb e3       	ldi	r30, 0x3B	; 59
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	29 81       	ldd	r18, Y+1	; 0x01
    1d20:	3a 81       	ldd	r19, Y+2	; 0x02
    1d22:	c9 01       	movw	r24, r18
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	28 0f       	add	r18, r24
    1d2a:	39 1f       	adc	r19, r25
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	fc 01       	movw	r30, r24
    1d32:	e2 0f       	add	r30, r18
    1d34:	f3 1f       	adc	r31, r19
    1d36:	81 81       	ldd	r24, Z+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <Port_Init+0x14a>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <Port_Init+0x146>
    1d4c:	84 2b       	or	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	49 c1       	rjmp	.+658    	; 0x1fe4 <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1d52:	29 81       	ldd	r18, Y+1	; 0x01
    1d54:	3a 81       	ldd	r19, Y+2	; 0x02
    1d56:	c9 01       	movw	r24, r18
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	28 0f       	add	r18, r24
    1d5e:	39 1f       	adc	r19, r25
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	fc 01       	movw	r30, r24
    1d66:	e2 0f       	add	r30, r18
    1d68:	f3 1f       	adc	r31, r19
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	01 f5       	brne	.+64     	; 0x1db0 <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    1d70:	a7 e3       	ldi	r26, 0x37	; 55
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e7 e3       	ldi	r30, 0x37	; 55
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	29 81       	ldd	r18, Y+1	; 0x01
    1d7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d80:	c9 01       	movw	r24, r18
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	28 0f       	add	r18, r24
    1d88:	39 1f       	adc	r19, r25
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e2 0f       	add	r30, r18
    1d92:	f3 1f       	adc	r31, r19
    1d94:	81 81       	ldd	r24, Z+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <Port_Init+0x1a8>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <Port_Init+0x1a4>
    1daa:	84 2b       	or	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	1a c1       	rjmp	.+564    	; 0x1fe4 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    1db0:	a7 e3       	ldi	r26, 0x37	; 55
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e7 e3       	ldi	r30, 0x37	; 55
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	29 81       	ldd	r18, Y+1	; 0x01
    1dbe:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc0:	c9 01       	movw	r24, r18
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	28 0f       	add	r18, r24
    1dc8:	39 1f       	adc	r19, r25
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	81 81       	ldd	r24, Z+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <Port_Init+0x1e6>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	2a 95       	dec	r18
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <Port_Init+0x1e2>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    1dee:	a8 e3       	ldi	r26, 0x38	; 56
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e8 e3       	ldi	r30, 0x38	; 56
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	29 81       	ldd	r18, Y+1	; 0x01
    1dfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfe:	c9 01       	movw	r24, r18
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	28 0f       	add	r18, r24
    1e06:	39 1f       	adc	r19, r25
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f3 1f       	adc	r31, r19
    1e12:	81 81       	ldd	r24, Z+1	; 0x01
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <Port_Init+0x226>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <Port_Init+0x222>
    1e28:	84 2b       	or	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	db c0       	rjmp	.+438    	; 0x1fe4 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1e2e:	29 81       	ldd	r18, Y+1	; 0x01
    1e30:	3a 81       	ldd	r19, Y+2	; 0x02
    1e32:	c9 01       	movw	r24, r18
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	28 0f       	add	r18, r24
    1e3a:	39 1f       	adc	r19, r25
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	fc 01       	movw	r30, r24
    1e42:	e2 0f       	add	r30, r18
    1e44:	f3 1f       	adc	r31, r19
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	01 f5       	brne	.+64     	; 0x1e8c <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1e4c:	a4 e3       	ldi	r26, 0x34	; 52
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e4 e3       	ldi	r30, 0x34	; 52
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	29 81       	ldd	r18, Y+1	; 0x01
    1e5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e5c:	c9 01       	movw	r24, r18
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	28 0f       	add	r18, r24
    1e64:	39 1f       	adc	r19, r25
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e2 0f       	add	r30, r18
    1e6e:	f3 1f       	adc	r31, r19
    1e70:	81 81       	ldd	r24, Z+1	; 0x01
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	02 2e       	mov	r0, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <Port_Init+0x284>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <Port_Init+0x280>
    1e86:	84 2b       	or	r24, r20
    1e88:	8c 93       	st	X, r24
    1e8a:	ac c0       	rjmp	.+344    	; 0x1fe4 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1e8c:	a4 e3       	ldi	r26, 0x34	; 52
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e4 e3       	ldi	r30, 0x34	; 52
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	48 2f       	mov	r20, r24
    1e98:	29 81       	ldd	r18, Y+1	; 0x01
    1e9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	28 0f       	add	r18, r24
    1ea4:	39 1f       	adc	r19, r25
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 1f       	adc	r31, r19
    1eb0:	81 81       	ldd	r24, Z+1	; 0x01
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <Port_Init+0x2c2>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	2a 95       	dec	r18
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <Port_Init+0x2be>
    1ec4:	80 95       	com	r24
    1ec6:	84 23       	and	r24, r20
    1ec8:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    1eca:	a5 e3       	ldi	r26, 0x35	; 53
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e5 e3       	ldi	r30, 0x35	; 53
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	29 81       	ldd	r18, Y+1	; 0x01
    1ed8:	3a 81       	ldd	r19, Y+2	; 0x02
    1eda:	c9 01       	movw	r24, r18
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	28 0f       	add	r18, r24
    1ee2:	39 1f       	adc	r19, r25
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	81 81       	ldd	r24, Z+1	; 0x01
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <Port_Init+0x302>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <Port_Init+0x2fe>
    1f04:	84 2b       	or	r24, r20
    1f06:	8c 93       	st	X, r24
    1f08:	6d c0       	rjmp	.+218    	; 0x1fe4 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1f0a:	29 81       	ldd	r18, Y+1	; 0x01
    1f0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f0e:	c9 01       	movw	r24, r18
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	e2 0f       	add	r30, r18
    1f20:	f3 1f       	adc	r31, r19
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	01 f5       	brne	.+64     	; 0x1f68 <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1f28:	a1 e3       	ldi	r26, 0x31	; 49
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e1 e3       	ldi	r30, 0x31	; 49
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	29 81       	ldd	r18, Y+1	; 0x01
    1f36:	3a 81       	ldd	r19, Y+2	; 0x02
    1f38:	c9 01       	movw	r24, r18
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	fc 01       	movw	r30, r24
    1f48:	e2 0f       	add	r30, r18
    1f4a:	f3 1f       	adc	r31, r19
    1f4c:	81 81       	ldd	r24, Z+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <Port_Init+0x360>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <Port_Init+0x35c>
    1f62:	84 2b       	or	r24, r20
    1f64:	8c 93       	st	X, r24
    1f66:	3e c0       	rjmp	.+124    	; 0x1fe4 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1f68:	a1 e3       	ldi	r26, 0x31	; 49
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e1 e3       	ldi	r30, 0x31	; 49
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	48 2f       	mov	r20, r24
    1f74:	29 81       	ldd	r18, Y+1	; 0x01
    1f76:	3a 81       	ldd	r19, Y+2	; 0x02
    1f78:	c9 01       	movw	r24, r18
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	28 0f       	add	r18, r24
    1f80:	39 1f       	adc	r19, r25
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	fc 01       	movw	r30, r24
    1f88:	e2 0f       	add	r30, r18
    1f8a:	f3 1f       	adc	r31, r19
    1f8c:	81 81       	ldd	r24, Z+1	; 0x01
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <Port_Init+0x39e>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	2a 95       	dec	r18
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <Port_Init+0x39a>
    1fa0:	80 95       	com	r24
    1fa2:	84 23       	and	r24, r20
    1fa4:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    1fa6:	a2 e3       	ldi	r26, 0x32	; 50
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e2 e3       	ldi	r30, 0x32	; 50
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	29 81       	ldd	r18, Y+1	; 0x01
    1fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	28 0f       	add	r18, r24
    1fbe:	39 1f       	adc	r19, r25
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	e2 0f       	add	r30, r18
    1fc8:	f3 1f       	adc	r31, r19
    1fca:	81 81       	ldd	r24, Z+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <Port_Init+0x3de>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <Port_Init+0x3da>
    1fe0:	84 2b       	or	r24, r20
    1fe2:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	80 32       	cpi	r24, 0x20	; 32
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	0c f4       	brge	.+2      	; 0x1ffa <Port_Init+0x3fc>
    1ff8:	10 ce       	rjmp	.-992    	; 0x1c1a <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1ffa:	26 96       	adiw	r28, 0x06	; 6
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <GI_voidEnable>:
#include "GI_register.h"
#include "../../utils/BIT_MATH.h"
#include "../../utils/STD_TYPES.h"

void GI_voidEnable(void)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLE);
    2014:	af e5       	ldi	r26, 0x5F	; 95
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	ef e5       	ldi	r30, 0x5F	; 95
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	80 68       	ori	r24, 0x80	; 128
    2020:	8c 93       	st	X, r24
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <GI_voidDisable>:

void GI_voidDisable(void)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLE);
    2030:	af e5       	ldi	r26, 0x5F	; 95
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ef e5       	ldi	r30, 0x5F	; 95
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8f 77       	andi	r24, 0x7F	; 127
    203c:	8c 93       	st	X, r24
}
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <Dio_WriteChannel+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <Dio_WriteChannel+0x8>
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	6b 83       	std	Y+3, r22	; 0x03

	unsigned char port = ChannelId / 8;
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	86 95       	lsr	r24
    205a:	86 95       	lsr	r24
    205c:	86 95       	lsr	r24
    205e:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	3d 83       	std	Y+5, r19	; 0x05
    2068:	2c 83       	std	Y+4, r18	; 0x04
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	9d 81       	ldd	r25, Y+5	; 0x05
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	91 05       	cpc	r25, r1
    2072:	09 f4       	brne	.+2      	; 0x2076 <Dio_WriteChannel+0x32>
    2074:	43 c0       	rjmp	.+134    	; 0x20fc <Dio_WriteChannel+0xb8>
    2076:	2c 81       	ldd	r18, Y+4	; 0x04
    2078:	3d 81       	ldd	r19, Y+5	; 0x05
    207a:	22 30       	cpi	r18, 0x02	; 2
    207c:	31 05       	cpc	r19, r1
    207e:	2c f4       	brge	.+10     	; 0x208a <Dio_WriteChannel+0x46>
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	9d 81       	ldd	r25, Y+5	; 0x05
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	71 f0       	breq	.+28     	; 0x20a4 <Dio_WriteChannel+0x60>
    2088:	ce c0       	rjmp	.+412    	; 0x2226 <Dio_WriteChannel+0x1e2>
    208a:	2c 81       	ldd	r18, Y+4	; 0x04
    208c:	3d 81       	ldd	r19, Y+5	; 0x05
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	31 05       	cpc	r19, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <Dio_WriteChannel+0x52>
    2094:	65 c0       	rjmp	.+202    	; 0x2160 <Dio_WriteChannel+0x11c>
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	9d 81       	ldd	r25, Y+5	; 0x05
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <Dio_WriteChannel+0x5e>
    20a0:	91 c0       	rjmp	.+290    	; 0x21c4 <Dio_WriteChannel+0x180>
    20a2:	c1 c0       	rjmp	.+386    	; 0x2226 <Dio_WriteChannel+0x1e2>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	a1 f4       	brne	.+40     	; 0x20d2 <Dio_WriteChannel+0x8e>
			SET_BIT(PORTA, ChannelId);
    20aa:	ab e3       	ldi	r26, 0x3B	; 59
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	eb e3       	ldi	r30, 0x3B	; 59
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	48 2f       	mov	r20, r24
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 2e       	mov	r0, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <Dio_WriteChannel+0x84>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	0a 94       	dec	r0
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <Dio_WriteChannel+0x80>
    20cc:	84 2b       	or	r24, r20
    20ce:	8c 93       	st	X, r24
    20d0:	aa c0       	rjmp	.+340    	; 0x2226 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTA, ChannelId);
    20d2:	ab e3       	ldi	r26, 0x3B	; 59
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	eb e3       	ldi	r30, 0x3B	; 59
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <Dio_WriteChannel+0xac>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <Dio_WriteChannel+0xa8>
    20f4:	80 95       	com	r24
    20f6:	84 23       	and	r24, r20
    20f8:	8c 93       	st	X, r24
    20fa:	95 c0       	rjmp	.+298    	; 0x2226 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	b9 f4       	brne	.+46     	; 0x2130 <Dio_WriteChannel+0xec>
			SET_BIT(PORTB, ChannelId % 8);
    2102:	a8 e3       	ldi	r26, 0x38	; 56
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e8 e3       	ldi	r30, 0x38	; 56
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	48 2f       	mov	r20, r24
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9c 01       	movw	r18, r24
    2116:	27 70       	andi	r18, 0x07	; 7
    2118:	30 70       	andi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 2e       	mov	r0, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <Dio_WriteChannel+0xe2>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <Dio_WriteChannel+0xde>
    212a:	84 2b       	or	r24, r20
    212c:	8c 93       	st	X, r24
    212e:	7b c0       	rjmp	.+246    	; 0x2226 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    2130:	a8 e3       	ldi	r26, 0x38	; 56
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e8 e3       	ldi	r30, 0x38	; 56
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	48 2f       	mov	r20, r24
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9c 01       	movw	r18, r24
    2144:	27 70       	andi	r18, 0x07	; 7
    2146:	30 70       	andi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <Dio_WriteChannel+0x110>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <Dio_WriteChannel+0x10c>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
    215e:	63 c0       	rjmp	.+198    	; 0x2226 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	b9 f4       	brne	.+46     	; 0x2194 <Dio_WriteChannel+0x150>
			SET_BIT(PORTC, ChannelId % 8);
    2166:	a5 e3       	ldi	r26, 0x35	; 53
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e5 e3       	ldi	r30, 0x35	; 53
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	48 2f       	mov	r20, r24
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9c 01       	movw	r18, r24
    217a:	27 70       	andi	r18, 0x07	; 7
    217c:	30 70       	andi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 2e       	mov	r0, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <Dio_WriteChannel+0x146>
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	0a 94       	dec	r0
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <Dio_WriteChannel+0x142>
    218e:	84 2b       	or	r24, r20
    2190:	8c 93       	st	X, r24
    2192:	49 c0       	rjmp	.+146    	; 0x2226 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    2194:	a5 e3       	ldi	r26, 0x35	; 53
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e5 e3       	ldi	r30, 0x35	; 53
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	48 2f       	mov	r20, r24
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9c 01       	movw	r18, r24
    21a8:	27 70       	andi	r18, 0x07	; 7
    21aa:	30 70       	andi	r19, 0x00	; 0
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	02 2e       	mov	r0, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <Dio_WriteChannel+0x174>
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	0a 94       	dec	r0
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <Dio_WriteChannel+0x170>
    21bc:	80 95       	com	r24
    21be:	84 23       	and	r24, r20
    21c0:	8c 93       	st	X, r24
    21c2:	31 c0       	rjmp	.+98     	; 0x2226 <Dio_WriteChannel+0x1e2>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	b9 f4       	brne	.+46     	; 0x21f8 <Dio_WriteChannel+0x1b4>
			SET_BIT(PORTD, ChannelId % 8);
    21ca:	a2 e3       	ldi	r26, 0x32	; 50
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e2 e3       	ldi	r30, 0x32	; 50
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	48 2f       	mov	r20, r24
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 01       	movw	r18, r24
    21de:	27 70       	andi	r18, 0x07	; 7
    21e0:	30 70       	andi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 2e       	mov	r0, r18
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <Dio_WriteChannel+0x1aa>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	0a 94       	dec	r0
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <Dio_WriteChannel+0x1a6>
    21f2:	84 2b       	or	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	17 c0       	rjmp	.+46     	; 0x2226 <Dio_WriteChannel+0x1e2>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    21f8:	a2 e3       	ldi	r26, 0x32	; 50
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e2 e3       	ldi	r30, 0x32	; 50
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9c 01       	movw	r18, r24
    220c:	27 70       	andi	r18, 0x07	; 7
    220e:	30 70       	andi	r19, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 2e       	mov	r0, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <Dio_WriteChannel+0x1d8>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <Dio_WriteChannel+0x1d4>
    2220:	80 95       	com	r24
    2222:	84 23       	and	r24, r20
    2224:	8c 93       	st	X, r24
		}
		break;
	}
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <Dio_ReadChannel+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <Dio_ReadChannel+0x8>
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	86 95       	lsr	r24
    224a:	86 95       	lsr	r24
    224c:	86 95       	lsr	r24
    224e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	3d 83       	std	Y+5, r19	; 0x05
    2258:	2c 83       	std	Y+4, r18	; 0x04
    225a:	4c 81       	ldd	r20, Y+4	; 0x04
    225c:	5d 81       	ldd	r21, Y+5	; 0x05
    225e:	41 30       	cpi	r20, 0x01	; 1
    2260:	51 05       	cpc	r21, r1
    2262:	49 f1       	breq	.+82     	; 0x22b6 <Dio_ReadChannel+0x80>
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	82 30       	cpi	r24, 0x02	; 2
    226a:	91 05       	cpc	r25, r1
    226c:	34 f4       	brge	.+12     	; 0x227a <Dio_ReadChannel+0x44>
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	3d 81       	ldd	r19, Y+5	; 0x05
    2272:	21 15       	cp	r18, r1
    2274:	31 05       	cpc	r19, r1
    2276:	69 f0       	breq	.+26     	; 0x2292 <Dio_ReadChannel+0x5c>
    2278:	59 c0       	rjmp	.+178    	; 0x232c <Dio_ReadChannel+0xf6>
    227a:	4c 81       	ldd	r20, Y+4	; 0x04
    227c:	5d 81       	ldd	r21, Y+5	; 0x05
    227e:	42 30       	cpi	r20, 0x02	; 2
    2280:	51 05       	cpc	r21, r1
    2282:	69 f1       	breq	.+90     	; 0x22de <Dio_ReadChannel+0xa8>
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	91 05       	cpc	r25, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <Dio_ReadChannel+0x5a>
    228e:	3b c0       	rjmp	.+118    	; 0x2306 <Dio_ReadChannel+0xd0>
    2290:	4d c0       	rjmp	.+154    	; 0x232c <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2292:	e9 e3       	ldi	r30, 0x39	; 57
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a9 01       	movw	r20, r18
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <Dio_ReadChannel+0x74>
    22a6:	55 95       	asr	r21
    22a8:	47 95       	ror	r20
    22aa:	8a 95       	dec	r24
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <Dio_ReadChannel+0x70>
    22ae:	ca 01       	movw	r24, r20
    22b0:	81 70       	andi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	3b c0       	rjmp	.+118    	; 0x232c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    22b6:	e6 e3       	ldi	r30, 0x36	; 54
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	87 70       	andi	r24, 0x07	; 7
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	a9 01       	movw	r20, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <Dio_ReadChannel+0x9c>
    22ce:	55 95       	asr	r21
    22d0:	47 95       	ror	r20
    22d2:	8a 95       	dec	r24
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <Dio_ReadChannel+0x98>
    22d6:	ca 01       	movw	r24, r20
    22d8:	81 70       	andi	r24, 0x01	; 1
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	27 c0       	rjmp	.+78     	; 0x232c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    22de:	e3 e3       	ldi	r30, 0x33	; 51
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	87 70       	andi	r24, 0x07	; 7
    22f0:	90 70       	andi	r25, 0x00	; 0
    22f2:	a9 01       	movw	r20, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <Dio_ReadChannel+0xc4>
    22f6:	55 95       	asr	r21
    22f8:	47 95       	ror	r20
    22fa:	8a 95       	dec	r24
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <Dio_ReadChannel+0xc0>
    22fe:	ca 01       	movw	r24, r20
    2300:	81 70       	andi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	13 c0       	rjmp	.+38     	; 0x232c <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    2306:	e0 e3       	ldi	r30, 0x30	; 48
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	87 70       	andi	r24, 0x07	; 7
    2318:	90 70       	andi	r25, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <Dio_ReadChannel+0xec>
    231e:	55 95       	asr	r21
    2320:	47 95       	ror	r20
    2322:	8a 95       	dec	r24
    2324:	e2 f7       	brpl	.-8      	; 0x231e <Dio_ReadChannel+0xe8>
    2326:	ca 01       	movw	r24, r20
    2328:	81 70       	andi	r24, 0x01	; 1
    232a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    232c:	89 81       	ldd	r24, Y+1	; 0x01
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	00 d0       	rcall	.+0      	; 0x2344 <Dio_FlipChannel+0x6>
    2344:	00 d0       	rcall	.+0      	; 0x2346 <Dio_FlipChannel+0x8>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	86 95       	lsr	r24
    2350:	86 95       	lsr	r24
    2352:	86 95       	lsr	r24
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	3c 83       	std	Y+4, r19	; 0x04
    235a:	2b 83       	std	Y+3, r18	; 0x03
    235c:	4b 81       	ldd	r20, Y+3	; 0x03
    235e:	5c 81       	ldd	r21, Y+4	; 0x04
    2360:	41 30       	cpi	r20, 0x01	; 1
    2362:	51 05       	cpc	r21, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <Dio_FlipChannel+0x2a>
    2366:	3c c0       	rjmp	.+120    	; 0x23e0 <Dio_FlipChannel+0xa2>
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	82 30       	cpi	r24, 0x02	; 2
    236e:	91 05       	cpc	r25, r1
    2370:	34 f4       	brge	.+12     	; 0x237e <Dio_FlipChannel+0x40>
    2372:	2b 81       	ldd	r18, Y+3	; 0x03
    2374:	3c 81       	ldd	r19, Y+4	; 0x04
    2376:	21 15       	cp	r18, r1
    2378:	31 05       	cpc	r19, r1
    237a:	71 f0       	breq	.+28     	; 0x2398 <Dio_FlipChannel+0x5a>
    237c:	ab c0       	rjmp	.+342    	; 0x24d4 <Dio_FlipChannel+0x196>
    237e:	4b 81       	ldd	r20, Y+3	; 0x03
    2380:	5c 81       	ldd	r21, Y+4	; 0x04
    2382:	42 30       	cpi	r20, 0x02	; 2
    2384:	51 05       	cpc	r21, r1
    2386:	09 f4       	brne	.+2      	; 0x238a <Dio_FlipChannel+0x4c>
    2388:	54 c0       	rjmp	.+168    	; 0x2432 <Dio_FlipChannel+0xf4>
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	83 30       	cpi	r24, 0x03	; 3
    2390:	91 05       	cpc	r25, r1
    2392:	09 f4       	brne	.+2      	; 0x2396 <Dio_FlipChannel+0x58>
    2394:	77 c0       	rjmp	.+238    	; 0x2484 <Dio_FlipChannel+0x146>
    2396:	9e c0       	rjmp	.+316    	; 0x24d4 <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    2398:	ab e3       	ldi	r26, 0x3B	; 59
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	eb e3       	ldi	r30, 0x3B	; 59
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	48 2f       	mov	r20, r24
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <Dio_FlipChannel+0x76>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	2a 95       	dec	r18
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <Dio_FlipChannel+0x72>
    23b8:	84 27       	eor	r24, r20
    23ba:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    23bc:	eb e3       	ldi	r30, 0x3B	; 59
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a9 01       	movw	r20, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <Dio_FlipChannel+0x96>
    23d0:	55 95       	asr	r21
    23d2:	47 95       	ror	r20
    23d4:	8a 95       	dec	r24
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <Dio_FlipChannel+0x92>
    23d8:	ca 01       	movw	r24, r20
    23da:	81 70       	andi	r24, 0x01	; 1
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	7a c0       	rjmp	.+244    	; 0x24d4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    23e0:	a8 e3       	ldi	r26, 0x38	; 56
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e8 e3       	ldi	r30, 0x38	; 56
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	48 2f       	mov	r20, r24
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9c 01       	movw	r18, r24
    23f4:	27 70       	andi	r18, 0x07	; 7
    23f6:	30 70       	andi	r19, 0x00	; 0
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <Dio_FlipChannel+0xc4>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	2a 95       	dec	r18
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <Dio_FlipChannel+0xc0>
    2406:	84 27       	eor	r24, r20
    2408:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    240a:	e8 e3       	ldi	r30, 0x38	; 56
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	87 70       	andi	r24, 0x07	; 7
    241c:	90 70       	andi	r25, 0x00	; 0
    241e:	a9 01       	movw	r20, r18
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <Dio_FlipChannel+0xe8>
    2422:	55 95       	asr	r21
    2424:	47 95       	ror	r20
    2426:	8a 95       	dec	r24
    2428:	e2 f7       	brpl	.-8      	; 0x2422 <Dio_FlipChannel+0xe4>
    242a:	ca 01       	movw	r24, r20
    242c:	81 70       	andi	r24, 0x01	; 1
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	51 c0       	rjmp	.+162    	; 0x24d4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    2432:	a5 e3       	ldi	r26, 0x35	; 53
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e5 e3       	ldi	r30, 0x35	; 53
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	48 2f       	mov	r20, r24
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9c 01       	movw	r18, r24
    2446:	27 70       	andi	r18, 0x07	; 7
    2448:	30 70       	andi	r19, 0x00	; 0
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <Dio_FlipChannel+0x116>
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	2a 95       	dec	r18
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <Dio_FlipChannel+0x112>
    2458:	84 27       	eor	r24, r20
    245a:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    245c:	e5 e3       	ldi	r30, 0x35	; 53
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	87 70       	andi	r24, 0x07	; 7
    246e:	90 70       	andi	r25, 0x00	; 0
    2470:	a9 01       	movw	r20, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <Dio_FlipChannel+0x13a>
    2474:	55 95       	asr	r21
    2476:	47 95       	ror	r20
    2478:	8a 95       	dec	r24
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <Dio_FlipChannel+0x136>
    247c:	ca 01       	movw	r24, r20
    247e:	81 70       	andi	r24, 0x01	; 1
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	28 c0       	rjmp	.+80     	; 0x24d4 <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    2484:	a2 e3       	ldi	r26, 0x32	; 50
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e2 e3       	ldi	r30, 0x32	; 50
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 01       	movw	r18, r24
    2498:	27 70       	andi	r18, 0x07	; 7
    249a:	30 70       	andi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <Dio_FlipChannel+0x168>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	2a 95       	dec	r18
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <Dio_FlipChannel+0x164>
    24aa:	84 27       	eor	r24, r20
    24ac:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    24ae:	e2 e3       	ldi	r30, 0x32	; 50
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	87 70       	andi	r24, 0x07	; 7
    24c0:	90 70       	andi	r25, 0x00	; 0
    24c2:	a9 01       	movw	r20, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <Dio_FlipChannel+0x18c>
    24c6:	55 95       	asr	r21
    24c8:	47 95       	ror	r20
    24ca:	8a 95       	dec	r24
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <Dio_FlipChannel+0x188>
    24ce:	ca 01       	movw	r24, r20
    24d0:	81 70       	andi	r24, 0x01	; 1
    24d2:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <Dio_WritePort+0x6>
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <Dio_WritePort+0x8>
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	3c 83       	std	Y+4, r19	; 0x04
    24fc:	2b 83       	std	Y+3, r18	; 0x03
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	91 05       	cpc	r25, r1
    2506:	d1 f0       	breq	.+52     	; 0x253c <Dio_WritePort+0x58>
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	3c 81       	ldd	r19, Y+4	; 0x04
    250c:	22 30       	cpi	r18, 0x02	; 2
    250e:	31 05       	cpc	r19, r1
    2510:	2c f4       	brge	.+10     	; 0x251c <Dio_WritePort+0x38>
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	61 f0       	breq	.+24     	; 0x2532 <Dio_WritePort+0x4e>
    251a:	1e c0       	rjmp	.+60     	; 0x2558 <Dio_WritePort+0x74>
    251c:	2b 81       	ldd	r18, Y+3	; 0x03
    251e:	3c 81       	ldd	r19, Y+4	; 0x04
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 05       	cpc	r19, r1
    2524:	81 f0       	breq	.+32     	; 0x2546 <Dio_WritePort+0x62>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	83 30       	cpi	r24, 0x03	; 3
    252c:	91 05       	cpc	r25, r1
    252e:	81 f0       	breq	.+32     	; 0x2550 <Dio_WritePort+0x6c>
    2530:	13 c0       	rjmp	.+38     	; 0x2558 <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    2532:	eb e3       	ldi	r30, 0x3B	; 59
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	80 83       	st	Z, r24
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    253c:	e8 e3       	ldi	r30, 0x38	; 56
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	80 83       	st	Z, r24
    2544:	09 c0       	rjmp	.+18     	; 0x2558 <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    2546:	e5 e3       	ldi	r30, 0x35	; 53
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	80 83       	st	Z, r24
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    2550:	e2 e3       	ldi	r30, 0x32	; 50
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	80 83       	st	Z, r24
		break;
	}
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <Lcd_SendCMD>:
 *      Author: AhmedAbogabl
 */

#include "LCD.h"

void Lcd_SendCMD(u8 cmd) {
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	c1 56       	subi	r28, 0x61	; 97
    2574:	d0 40       	sbci	r29, 0x00	; 0
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	fe 01       	movw	r30, r28
    2582:	ef 59       	subi	r30, 0x9F	; 159
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 83       	st	Z, r24
	// Set RS to command mode
	Dio_WriteChannel(LCD_RS, STD_LOW);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>

	// Send the high nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 4));
    2590:	fe 01       	movw	r30, r28
    2592:	ef 59       	subi	r30, 0x9F	; 159
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	82 95       	swap	r24
    259a:	8f 70       	andi	r24, 0x0F	; 15
    259c:	98 2f       	mov	r25, r24
    259e:	91 70       	andi	r25, 0x01	; 1
    25a0:	88 e0       	ldi	r24, 0x08	; 8
    25a2:	69 2f       	mov	r22, r25
    25a4:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 5));
    25a8:	fe 01       	movw	r30, r28
    25aa:	ef 59       	subi	r30, 0x9F	; 159
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	82 95       	swap	r24
    25b2:	86 95       	lsr	r24
    25b4:	87 70       	andi	r24, 0x07	; 7
    25b6:	98 2f       	mov	r25, r24
    25b8:	91 70       	andi	r25, 0x01	; 1
    25ba:	89 e0       	ldi	r24, 0x09	; 9
    25bc:	69 2f       	mov	r22, r25
    25be:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 6));
    25c2:	fe 01       	movw	r30, r28
    25c4:	ef 59       	subi	r30, 0x9F	; 159
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	82 95       	swap	r24
    25cc:	86 95       	lsr	r24
    25ce:	86 95       	lsr	r24
    25d0:	83 70       	andi	r24, 0x03	; 3
    25d2:	98 2f       	mov	r25, r24
    25d4:	91 70       	andi	r25, 0x01	; 1
    25d6:	8a e0       	ldi	r24, 0x0A	; 10
    25d8:	69 2f       	mov	r22, r25
    25da:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 7));
    25de:	fe 01       	movw	r30, r28
    25e0:	ef 59       	subi	r30, 0x9F	; 159
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	98 2f       	mov	r25, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	99 27       	eor	r25, r25
    25ec:	99 1f       	adc	r25, r25
    25ee:	8c e0       	ldi	r24, 0x0C	; 12
    25f0:	69 2f       	mov	r22, r25
    25f2:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    25fe:	fe 01       	movw	r30, r28
    2600:	e3 5a       	subi	r30, 0xA3	; 163
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	80 83       	st	Z, r24
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	a2 83       	std	Z+2, r26	; 0x02
    2612:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2614:	8e 01       	movw	r16, r28
    2616:	07 5a       	subi	r16, 0xA7	; 167
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	fe 01       	movw	r30, r28
    261c:	e3 5a       	subi	r30, 0xA3	; 163
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	2b ea       	ldi	r18, 0xAB	; 171
    262a:	3a ea       	ldi	r19, 0xAA	; 170
    262c:	4a ea       	ldi	r20, 0xAA	; 170
    262e:	50 e4       	ldi	r21, 0x40	; 64
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	f8 01       	movw	r30, r16
    263a:	80 83       	st	Z, r24
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	a2 83       	std	Z+2, r26	; 0x02
    2640:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2642:	fe 01       	movw	r30, r28
    2644:	e7 5a       	subi	r30, 0xA7	; 167
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    265c:	88 23       	and	r24, r24
    265e:	34 f4       	brge	.+12     	; 0x266c <Lcd_SendCMD+0x106>
		__ticks = 1;
    2660:	fe 01       	movw	r30, r28
    2662:	e8 5a       	subi	r30, 0xA8	; 168
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	80 83       	st	Z, r24
    266a:	e0 c0       	rjmp	.+448    	; 0x282c <Lcd_SendCMD+0x2c6>
	else if (__tmp > 255)
    266c:	fe 01       	movw	r30, r28
    266e:	e7 5a       	subi	r30, 0xA7	; 167
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	53 e4       	ldi	r21, 0x43	; 67
    2682:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	0c f0       	brlt	.+2      	; 0x268c <Lcd_SendCMD+0x126>
    268a:	c0 c0       	rjmp	.+384    	; 0x280c <Lcd_SendCMD+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    268c:	fe 01       	movw	r30, r28
    268e:	e3 5a       	subi	r30, 0xA3	; 163
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4a e7       	ldi	r20, 0x7A	; 122
    26a0:	54 e4       	ldi	r21, 0x44	; 68
    26a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	fe 01       	movw	r30, r28
    26ac:	ec 5a       	subi	r30, 0xAC	; 172
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 83       	st	Z, r24
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	a2 83       	std	Z+2, r26	; 0x02
    26b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	8e 01       	movw	r16, r28
    26ba:	00 5b       	subi	r16, 0xB0	; 176
    26bc:	1f 4f       	sbci	r17, 0xFF	; 255
    26be:	fe 01       	movw	r30, r28
    26c0:	ec 5a       	subi	r30, 0xAC	; 172
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a e7       	ldi	r20, 0x7A	; 122
    26d2:	55 e4       	ldi	r21, 0x45	; 69
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	f8 01       	movw	r30, r16
    26de:	80 83       	st	Z, r24
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	a2 83       	std	Z+2, r26	; 0x02
    26e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e6:	fe 01       	movw	r30, r28
    26e8:	e0 5b       	subi	r30, 0xB0	; 176
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2700:	88 23       	and	r24, r24
    2702:	44 f4       	brge	.+16     	; 0x2714 <Lcd_SendCMD+0x1ae>
		__ticks = 1;
    2704:	fe 01       	movw	r30, r28
    2706:	e2 5b       	subi	r30, 0xB2	; 178
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	64 c0       	rjmp	.+200    	; 0x27dc <Lcd_SendCMD+0x276>
	else if (__tmp > 65535)
    2714:	fe 01       	movw	r30, r28
    2716:	e0 5b       	subi	r30, 0xB0	; 176
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	60 81       	ld	r22, Z
    271c:	71 81       	ldd	r23, Z+1	; 0x01
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f e7       	ldi	r20, 0x7F	; 127
    2728:	57 e4       	ldi	r21, 0x47	; 71
    272a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    272e:	18 16       	cp	r1, r24
    2730:	0c f0       	brlt	.+2      	; 0x2734 <Lcd_SendCMD+0x1ce>
    2732:	43 c0       	rjmp	.+134    	; 0x27ba <Lcd_SendCMD+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2734:	fe 01       	movw	r30, r28
    2736:	ec 5a       	subi	r30, 0xAC	; 172
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e2       	ldi	r20, 0x20	; 32
    2748:	51 e4       	ldi	r21, 0x41	; 65
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8e 01       	movw	r16, r28
    2754:	02 5b       	subi	r16, 0xB2	; 178
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	f8 01       	movw	r30, r16
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	1f c0       	rjmp	.+62     	; 0x27aa <Lcd_SendCMD+0x244>
    276c:	fe 01       	movw	r30, r28
    276e:	e4 5b       	subi	r30, 0xB4	; 180
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 e9       	ldi	r24, 0x90	; 144
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    277a:	fe 01       	movw	r30, r28
    277c:	e4 5b       	subi	r30, 0xB4	; 180
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <Lcd_SendCMD+0x21e>
    2788:	fe 01       	movw	r30, r28
    278a:	e4 5b       	subi	r30, 0xB4	; 180
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	de 01       	movw	r26, r28
    2794:	a2 5b       	subi	r26, 0xB2	; 178
    2796:	bf 4f       	sbci	r27, 0xFF	; 255
    2798:	fe 01       	movw	r30, r28
    279a:	e2 5b       	subi	r30, 0xB2	; 178
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 81       	ld	r24, Z
    27a0:	91 81       	ldd	r25, Z+1	; 0x01
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	11 96       	adiw	r26, 0x01	; 1
    27a6:	9c 93       	st	X, r25
    27a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	fe 01       	movw	r30, r28
    27ac:	e2 5b       	subi	r30, 0xB2	; 178
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	d1 f6       	brne	.-76     	; 0x276c <Lcd_SendCMD+0x206>
    27b8:	4b c0       	rjmp	.+150    	; 0x2850 <Lcd_SendCMD+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ba:	8e 01       	movw	r16, r28
    27bc:	02 5b       	subi	r16, 0xB2	; 178
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	e0 5b       	subi	r30, 0xB0	; 176
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	f8 01       	movw	r30, r16
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
    27dc:	de 01       	movw	r26, r28
    27de:	a6 5b       	subi	r26, 0xB6	; 182
    27e0:	bf 4f       	sbci	r27, 0xFF	; 255
    27e2:	fe 01       	movw	r30, r28
    27e4:	e2 5b       	subi	r30, 0xB2	; 178
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	11 96       	adiw	r26, 0x01	; 1
    27ee:	9c 93       	st	X, r25
    27f0:	8e 93       	st	-X, r24
    27f2:	fe 01       	movw	r30, r28
    27f4:	e6 5b       	subi	r30, 0xB6	; 182
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <Lcd_SendCMD+0x296>
    2800:	fe 01       	movw	r30, r28
    2802:	e6 5b       	subi	r30, 0xB6	; 182
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
    280a:	22 c0       	rjmp	.+68     	; 0x2850 <Lcd_SendCMD+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    280c:	8e 01       	movw	r16, r28
    280e:	08 5a       	subi	r16, 0xA8	; 168
    2810:	1f 4f       	sbci	r17, 0xFF	; 255
    2812:	fe 01       	movw	r30, r28
    2814:	e7 5a       	subi	r30, 0xA7	; 167
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	f8 01       	movw	r30, r16
    282a:	80 83       	st	Z, r24
    282c:	de 01       	movw	r26, r28
    282e:	a7 5b       	subi	r26, 0xB7	; 183
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	e8 5a       	subi	r30, 0xA8	; 168
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    283c:	fe 01       	movw	r30, r28
    283e:	e7 5b       	subi	r30, 0xB7	; 183
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	8a 95       	dec	r24
    2846:	f1 f7       	brne	.-4      	; 0x2844 <Lcd_SendCMD+0x2de>
    2848:	fe 01       	movw	r30, r28
    284a:	e7 5b       	subi	r30, 0xB7	; 183
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    2858:	fe 01       	movw	r30, r28
    285a:	eb 5b       	subi	r30, 0xBB	; 187
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a0 e8       	ldi	r26, 0x80	; 128
    2864:	bf e3       	ldi	r27, 0x3F	; 63
    2866:	80 83       	st	Z, r24
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	a2 83       	std	Z+2, r26	; 0x02
    286c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    286e:	8e 01       	movw	r16, r28
    2870:	0f 5b       	subi	r16, 0xBF	; 191
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	fe 01       	movw	r30, r28
    2876:	eb 5b       	subi	r30, 0xBB	; 187
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	2b ea       	ldi	r18, 0xAB	; 171
    2884:	3a ea       	ldi	r19, 0xAA	; 170
    2886:	4a ea       	ldi	r20, 0xAA	; 170
    2888:	50 e4       	ldi	r21, 0x40	; 64
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	f8 01       	movw	r30, r16
    2894:	80 83       	st	Z, r24
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	a2 83       	std	Z+2, r26	; 0x02
    289a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    289c:	fe 01       	movw	r30, r28
    289e:	ef 5b       	subi	r30, 0xBF	; 191
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	5f e3       	ldi	r21, 0x3F	; 63
    28b2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	34 f4       	brge	.+12     	; 0x28c6 <Lcd_SendCMD+0x360>
		__ticks = 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	fe 01       	movw	r30, r28
    28be:	e0 5c       	subi	r30, 0xC0	; 192
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 83       	st	Z, r24
    28c4:	9d c0       	rjmp	.+314    	; 0x2a00 <Lcd_SendCMD+0x49a>
	else if (__tmp > 255)
    28c6:	fe 01       	movw	r30, r28
    28c8:	ef 5b       	subi	r30, 0xBF	; 191
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	53 e4       	ldi	r21, 0x43	; 67
    28dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28e0:	18 16       	cp	r1, r24
    28e2:	0c f0       	brlt	.+2      	; 0x28e6 <Lcd_SendCMD+0x380>
    28e4:	7e c0       	rjmp	.+252    	; 0x29e2 <Lcd_SendCMD+0x47c>
	{
		_delay_ms(__us / 1000.0);
    28e6:	fe 01       	movw	r30, r28
    28e8:	eb 5b       	subi	r30, 0xBB	; 187
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a e7       	ldi	r20, 0x7A	; 122
    28fa:	54 e4       	ldi	r21, 0x44	; 68
    28fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8c af       	std	Y+60, r24	; 0x3c
    2906:	9d af       	std	Y+61, r25	; 0x3d
    2908:	ae af       	std	Y+62, r26	; 0x3e
    290a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6c ad       	ldd	r22, Y+60	; 0x3c
    290e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2910:	8e ad       	ldd	r24, Y+62	; 0x3e
    2912:	9f ad       	ldd	r25, Y+63	; 0x3f
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a e7       	ldi	r20, 0x7A	; 122
    291a:	55 e4       	ldi	r21, 0x45	; 69
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	88 af       	std	Y+56, r24	; 0x38
    2926:	99 af       	std	Y+57, r25	; 0x39
    2928:	aa af       	std	Y+58, r26	; 0x3a
    292a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    292c:	68 ad       	ldd	r22, Y+56	; 0x38
    292e:	79 ad       	ldd	r23, Y+57	; 0x39
    2930:	8a ad       	ldd	r24, Y+58	; 0x3a
    2932:	9b ad       	ldd	r25, Y+59	; 0x3b
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <Lcd_SendCMD+0x3e8>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9f ab       	std	Y+55, r25	; 0x37
    294a:	8e ab       	std	Y+54, r24	; 0x36
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <Lcd_SendCMD+0x466>
	else if (__tmp > 65535)
    294e:	68 ad       	ldd	r22, Y+56	; 0x38
    2950:	79 ad       	ldd	r23, Y+57	; 0x39
    2952:	8a ad       	ldd	r24, Y+58	; 0x3a
    2954:	9b ad       	ldd	r25, Y+59	; 0x3b
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <Lcd_SendCMD+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6c ad       	ldd	r22, Y+60	; 0x3c
    2968:	7d ad       	ldd	r23, Y+61	; 0x3d
    296a:	8e ad       	ldd	r24, Y+62	; 0x3e
    296c:	9f ad       	ldd	r25, Y+63	; 0x3f
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9f ab       	std	Y+55, r25	; 0x37
    298c:	8e ab       	std	Y+54, r24	; 0x36
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <Lcd_SendCMD+0x448>
    2990:	80 e9       	ldi	r24, 0x90	; 144
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	9d ab       	std	Y+53, r25	; 0x35
    2996:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2998:	8c a9       	ldd	r24, Y+52	; 0x34
    299a:	9d a9       	ldd	r25, Y+53	; 0x35
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <Lcd_SendCMD+0x436>
    29a0:	9d ab       	std	Y+53, r25	; 0x35
    29a2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8e a9       	ldd	r24, Y+54	; 0x36
    29a6:	9f a9       	ldd	r25, Y+55	; 0x37
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9f ab       	std	Y+55, r25	; 0x37
    29ac:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8e a9       	ldd	r24, Y+54	; 0x36
    29b0:	9f a9       	ldd	r25, Y+55	; 0x37
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <Lcd_SendCMD+0x42a>
    29b6:	2d c0       	rjmp	.+90     	; 0x2a12 <Lcd_SendCMD+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	68 ad       	ldd	r22, Y+56	; 0x38
    29ba:	79 ad       	ldd	r23, Y+57	; 0x39
    29bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    29be:	9b ad       	ldd	r25, Y+59	; 0x3b
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9f ab       	std	Y+55, r25	; 0x37
    29ca:	8e ab       	std	Y+54, r24	; 0x36
    29cc:	8e a9       	ldd	r24, Y+54	; 0x36
    29ce:	9f a9       	ldd	r25, Y+55	; 0x37
    29d0:	9b ab       	std	Y+51, r25	; 0x33
    29d2:	8a ab       	std	Y+50, r24	; 0x32
    29d4:	8a a9       	ldd	r24, Y+50	; 0x32
    29d6:	9b a9       	ldd	r25, Y+51	; 0x33
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <Lcd_SendCMD+0x472>
    29dc:	9b ab       	std	Y+51, r25	; 0x33
    29de:	8a ab       	std	Y+50, r24	; 0x32
    29e0:	18 c0       	rjmp	.+48     	; 0x2a12 <Lcd_SendCMD+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29e2:	fe 01       	movw	r30, r28
    29e4:	ef 5b       	subi	r30, 0xBF	; 191
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	fe 01       	movw	r30, r28
    29fa:	e0 5c       	subi	r30, 0xC0	; 192
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 83       	st	Z, r24
    2a00:	fe 01       	movw	r30, r28
    2a02:	e0 5c       	subi	r30, 0xC0	; 192
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a0a:	89 a9       	ldd	r24, Y+49	; 0x31
    2a0c:	8a 95       	dec	r24
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <Lcd_SendCMD+0x4a6>
    2a10:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(cmd, 0));
    2a12:	fe 01       	movw	r30, r28
    2a14:	ef 59       	subi	r30, 0x9F	; 159
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	91 70       	andi	r25, 0x01	; 1
    2a1e:	88 e0       	ldi	r24, 0x08	; 8
    2a20:	69 2f       	mov	r22, r25
    2a22:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(cmd, 1));
    2a26:	fe 01       	movw	r30, r28
    2a28:	ef 59       	subi	r30, 0x9F	; 159
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	86 95       	lsr	r24
    2a30:	98 2f       	mov	r25, r24
    2a32:	91 70       	andi	r25, 0x01	; 1
    2a34:	89 e0       	ldi	r24, 0x09	; 9
    2a36:	69 2f       	mov	r22, r25
    2a38:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(cmd, 2));
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ef 59       	subi	r30, 0x9F	; 159
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	86 95       	lsr	r24
    2a46:	86 95       	lsr	r24
    2a48:	98 2f       	mov	r25, r24
    2a4a:	91 70       	andi	r25, 0x01	; 1
    2a4c:	8a e0       	ldi	r24, 0x0A	; 10
    2a4e:	69 2f       	mov	r22, r25
    2a50:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(cmd, 3));
    2a54:	fe 01       	movw	r30, r28
    2a56:	ef 59       	subi	r30, 0x9F	; 159
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	86 95       	lsr	r24
    2a5e:	86 95       	lsr	r24
    2a60:	86 95       	lsr	r24
    2a62:	98 2f       	mov	r25, r24
    2a64:	91 70       	andi	r25, 0x01	; 1
    2a66:	8c e0       	ldi	r24, 0x0C	; 12
    2a68:	69 2f       	mov	r22, r25
    2a6a:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	61 e0       	ldi	r22, 0x01	; 1
    2a72:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 e8       	ldi	r26, 0x80	; 128
    2a7c:	bf e3       	ldi	r27, 0x3F	; 63
    2a7e:	8d a7       	std	Y+45, r24	; 0x2d
    2a80:	9e a7       	std	Y+46, r25	; 0x2e
    2a82:	af a7       	std	Y+47, r26	; 0x2f
    2a84:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a86:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a88:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a8e:	2b ea       	ldi	r18, 0xAB	; 171
    2a90:	3a ea       	ldi	r19, 0xAA	; 170
    2a92:	4a ea       	ldi	r20, 0xAA	; 170
    2a94:	50 e4       	ldi	r21, 0x40	; 64
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	89 a7       	std	Y+41, r24	; 0x29
    2aa0:	9a a7       	std	Y+42, r25	; 0x2a
    2aa2:	ab a7       	std	Y+43, r26	; 0x2b
    2aa4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2aa6:	69 a5       	ldd	r22, Y+41	; 0x29
    2aa8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2aaa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aac:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	1c f4       	brge	.+6      	; 0x2ac4 <Lcd_SendCMD+0x55e>
		__ticks = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	88 a7       	std	Y+40, r24	; 0x28
    2ac2:	91 c0       	rjmp	.+290    	; 0x2be6 <Lcd_SendCMD+0x680>
	else if (__tmp > 255)
    2ac4:	69 a5       	ldd	r22, Y+41	; 0x29
    2ac6:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ac8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aca:	9c a5       	ldd	r25, Y+44	; 0x2c
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	53 e4       	ldi	r21, 0x43	; 67
    2ad4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	0c f0       	brlt	.+2      	; 0x2ade <Lcd_SendCMD+0x578>
    2adc:	7b c0       	rjmp	.+246    	; 0x2bd4 <Lcd_SendCMD+0x66e>
	{
		_delay_ms(__us / 1000.0);
    2ade:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ae0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a e7       	ldi	r20, 0x7A	; 122
    2aec:	54 e4       	ldi	r21, 0x44	; 68
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8c a3       	std	Y+36, r24	; 0x24
    2af8:	9d a3       	std	Y+37, r25	; 0x25
    2afa:	ae a3       	std	Y+38, r26	; 0x26
    2afc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6c a1       	ldd	r22, Y+36	; 0x24
    2b00:	7d a1       	ldd	r23, Y+37	; 0x25
    2b02:	8e a1       	ldd	r24, Y+38	; 0x26
    2b04:	9f a1       	ldd	r25, Y+39	; 0x27
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a e7       	ldi	r20, 0x7A	; 122
    2b0c:	55 e4       	ldi	r21, 0x45	; 69
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	88 a3       	std	Y+32, r24	; 0x20
    2b18:	99 a3       	std	Y+33, r25	; 0x21
    2b1a:	aa a3       	std	Y+34, r26	; 0x22
    2b1c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b1e:	68 a1       	ldd	r22, Y+32	; 0x20
    2b20:	79 a1       	ldd	r23, Y+33	; 0x21
    2b22:	8a a1       	ldd	r24, Y+34	; 0x22
    2b24:	9b a1       	ldd	r25, Y+35	; 0x23
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <Lcd_SendCMD+0x5da>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9f 8f       	std	Y+31, r25	; 0x1f
    2b3c:	8e 8f       	std	Y+30, r24	; 0x1e
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <Lcd_SendCMD+0x658>
	else if (__tmp > 65535)
    2b40:	68 a1       	ldd	r22, Y+32	; 0x20
    2b42:	79 a1       	ldd	r23, Y+33	; 0x21
    2b44:	8a a1       	ldd	r24, Y+34	; 0x22
    2b46:	9b a1       	ldd	r25, Y+35	; 0x23
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <Lcd_SendCMD+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6c a1       	ldd	r22, Y+36	; 0x24
    2b5a:	7d a1       	ldd	r23, Y+37	; 0x25
    2b5c:	8e a1       	ldd	r24, Y+38	; 0x26
    2b5e:	9f a1       	ldd	r25, Y+39	; 0x27
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9f 8f       	std	Y+31, r25	; 0x1f
    2b7e:	8e 8f       	std	Y+30, r24	; 0x1e
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <Lcd_SendCMD+0x63a>
    2b82:	80 e9       	ldi	r24, 0x90	; 144
    2b84:	91 e0       	ldi	r25, 0x01	; 1
    2b86:	9d 8f       	std	Y+29, r25	; 0x1d
    2b88:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <Lcd_SendCMD+0x628>
    2b92:	9d 8f       	std	Y+29, r25	; 0x1d
    2b94:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b98:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9f 8f       	std	Y+31, r25	; 0x1f
    2b9e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ba2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <Lcd_SendCMD+0x61c>
    2ba8:	24 c0       	rjmp	.+72     	; 0x2bf2 <Lcd_SendCMD+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	68 a1       	ldd	r22, Y+32	; 0x20
    2bac:	79 a1       	ldd	r23, Y+33	; 0x21
    2bae:	8a a1       	ldd	r24, Y+34	; 0x22
    2bb0:	9b a1       	ldd	r25, Y+35	; 0x23
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9f 8f       	std	Y+31, r25	; 0x1f
    2bbc:	8e 8f       	std	Y+30, r24	; 0x1e
    2bbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bc0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bc2:	9b 8f       	std	Y+27, r25	; 0x1b
    2bc4:	8a 8f       	std	Y+26, r24	; 0x1a
    2bc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bc8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <Lcd_SendCMD+0x664>
    2bce:	9b 8f       	std	Y+27, r25	; 0x1b
    2bd0:	8a 8f       	std	Y+26, r24	; 0x1a
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <Lcd_SendCMD+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bd4:	69 a5       	ldd	r22, Y+41	; 0x29
    2bd6:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bda:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	88 a7       	std	Y+40, r24	; 0x28
    2be6:	88 a5       	ldd	r24, Y+40	; 0x28
    2be8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bea:	89 8d       	ldd	r24, Y+25	; 0x19
    2bec:	8a 95       	dec	r24
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <Lcd_SendCMD+0x686>
    2bf0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	a0 e8       	ldi	r26, 0x80	; 128
    2c00:	bf e3       	ldi	r27, 0x3F	; 63
    2c02:	8d 8b       	std	Y+21, r24	; 0x15
    2c04:	9e 8b       	std	Y+22, r25	; 0x16
    2c06:	af 8b       	std	Y+23, r26	; 0x17
    2c08:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c10:	98 8d       	ldd	r25, Y+24	; 0x18
    2c12:	2b ea       	ldi	r18, 0xAB	; 171
    2c14:	3a ea       	ldi	r19, 0xAA	; 170
    2c16:	4a ea       	ldi	r20, 0xAA	; 170
    2c18:	50 e4       	ldi	r21, 0x40	; 64
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	89 8b       	std	Y+17, r24	; 0x11
    2c24:	9a 8b       	std	Y+18, r25	; 0x12
    2c26:	ab 8b       	std	Y+19, r26	; 0x13
    2c28:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c2a:	69 89       	ldd	r22, Y+17	; 0x11
    2c2c:	7a 89       	ldd	r23, Y+18	; 0x12
    2c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c30:	9c 89       	ldd	r25, Y+20	; 0x14
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e8       	ldi	r20, 0x80	; 128
    2c38:	5f e3       	ldi	r21, 0x3F	; 63
    2c3a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	1c f4       	brge	.+6      	; 0x2c48 <Lcd_SendCMD+0x6e2>
		__ticks = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	88 8b       	std	Y+16, r24	; 0x10
    2c46:	91 c0       	rjmp	.+290    	; 0x2d6a <Lcd_SendCMD+0x804>
	else if (__tmp > 255)
    2c48:	69 89       	ldd	r22, Y+17	; 0x11
    2c4a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4f e7       	ldi	r20, 0x7F	; 127
    2c56:	53 e4       	ldi	r21, 0x43	; 67
    2c58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c5c:	18 16       	cp	r1, r24
    2c5e:	0c f0       	brlt	.+2      	; 0x2c62 <Lcd_SendCMD+0x6fc>
    2c60:	7b c0       	rjmp	.+246    	; 0x2d58 <Lcd_SendCMD+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    2c62:	6d 89       	ldd	r22, Y+21	; 0x15
    2c64:	7e 89       	ldd	r23, Y+22	; 0x16
    2c66:	8f 89       	ldd	r24, Y+23	; 0x17
    2c68:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	4a e7       	ldi	r20, 0x7A	; 122
    2c70:	54 e4       	ldi	r21, 0x44	; 68
    2c72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	8c 87       	std	Y+12, r24	; 0x0c
    2c7c:	9d 87       	std	Y+13, r25	; 0x0d
    2c7e:	ae 87       	std	Y+14, r26	; 0x0e
    2c80:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c82:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c84:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c86:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c88:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	4a e7       	ldi	r20, 0x7A	; 122
    2c90:	55 e4       	ldi	r21, 0x45	; 69
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	88 87       	std	Y+8, r24	; 0x08
    2c9c:	99 87       	std	Y+9, r25	; 0x09
    2c9e:	aa 87       	std	Y+10, r26	; 0x0a
    2ca0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ca2:	68 85       	ldd	r22, Y+8	; 0x08
    2ca4:	79 85       	ldd	r23, Y+9	; 0x09
    2ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e8       	ldi	r20, 0x80	; 128
    2cb0:	5f e3       	ldi	r21, 0x3F	; 63
    2cb2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cb6:	88 23       	and	r24, r24
    2cb8:	2c f4       	brge	.+10     	; 0x2cc4 <Lcd_SendCMD+0x75e>
		__ticks = 1;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	9f 83       	std	Y+7, r25	; 0x07
    2cc0:	8e 83       	std	Y+6, r24	; 0x06
    2cc2:	3f c0       	rjmp	.+126    	; 0x2d42 <Lcd_SendCMD+0x7dc>
	else if (__tmp > 65535)
    2cc4:	68 85       	ldd	r22, Y+8	; 0x08
    2cc6:	79 85       	ldd	r23, Y+9	; 0x09
    2cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cca:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	3f ef       	ldi	r19, 0xFF	; 255
    2cd0:	4f e7       	ldi	r20, 0x7F	; 127
    2cd2:	57 e4       	ldi	r21, 0x47	; 71
    2cd4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2cd8:	18 16       	cp	r1, r24
    2cda:	4c f5       	brge	.+82     	; 0x2d2e <Lcd_SendCMD+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cdc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cde:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ce0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ce2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e2       	ldi	r20, 0x20	; 32
    2cea:	51 e4       	ldi	r21, 0x41	; 65
    2cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	bc 01       	movw	r22, r24
    2cf6:	cd 01       	movw	r24, r26
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9f 83       	std	Y+7, r25	; 0x07
    2d02:	8e 83       	std	Y+6, r24	; 0x06
    2d04:	0f c0       	rjmp	.+30     	; 0x2d24 <Lcd_SendCMD+0x7be>
    2d06:	80 e9       	ldi	r24, 0x90	; 144
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	9d 83       	std	Y+5, r25	; 0x05
    2d0c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	9d 81       	ldd	r25, Y+5	; 0x05
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <Lcd_SendCMD+0x7ac>
    2d16:	9d 83       	std	Y+5, r25	; 0x05
    2d18:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	9f 83       	std	Y+7, r25	; 0x07
    2d22:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d24:	8e 81       	ldd	r24, Y+6	; 0x06
    2d26:	9f 81       	ldd	r25, Y+7	; 0x07
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	69 f7       	brne	.-38     	; 0x2d06 <Lcd_SendCMD+0x7a0>
    2d2c:	24 c0       	rjmp	.+72     	; 0x2d76 <Lcd_SendCMD+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2e:	68 85       	ldd	r22, Y+8	; 0x08
    2d30:	79 85       	ldd	r23, Y+9	; 0x09
    2d32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	9f 83       	std	Y+7, r25	; 0x07
    2d40:	8e 83       	std	Y+6, r24	; 0x06
    2d42:	8e 81       	ldd	r24, Y+6	; 0x06
    2d44:	9f 81       	ldd	r25, Y+7	; 0x07
    2d46:	9b 83       	std	Y+3, r25	; 0x03
    2d48:	8a 83       	std	Y+2, r24	; 0x02
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	f1 f7       	brne	.-4      	; 0x2d4e <Lcd_SendCMD+0x7e8>
    2d52:	9b 83       	std	Y+3, r25	; 0x03
    2d54:	8a 83       	std	Y+2, r24	; 0x02
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <Lcd_SendCMD+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d58:	69 89       	ldd	r22, Y+17	; 0x11
    2d5a:	7a 89       	ldd	r23, Y+18	; 0x12
    2d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	88 8b       	std	Y+16, r24	; 0x10
    2d6a:	88 89       	ldd	r24, Y+16	; 0x10
    2d6c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	8a 95       	dec	r24
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <Lcd_SendCMD+0x80a>
    2d74:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);  // Wait for the command to execute
}
    2d76:	cf 59       	subi	r28, 0x9F	; 159
    2d78:	df 4f       	sbci	r29, 0xFF	; 255
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	08 95       	ret

00002d8e <Lcd_SendData>:

void Lcd_SendData(u8 data) {
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	c1 56       	subi	r28, 0x61	; 97
    2d9c:	d0 40       	sbci	r29, 0x00	; 0
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	fe 01       	movw	r30, r28
    2daa:	ef 59       	subi	r30, 0x9F	; 159
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 83       	st	Z, r24

	// Set RS to data mode
//	SET_BIT(PORTA, LCD_RS);
	Dio_WriteChannel(LCD_RS, STD_HIGH);
    2db0:	83 e0       	ldi	r24, 0x03	; 3
    2db2:	61 e0       	ldi	r22, 0x01	; 1
    2db4:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	// Send the high nibble

	Dio_WriteChannel(PB_0, GET_BIT(data, 4));
    2db8:	fe 01       	movw	r30, r28
    2dba:	ef 59       	subi	r30, 0x9F	; 159
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 81       	ld	r24, Z
    2dc0:	82 95       	swap	r24
    2dc2:	8f 70       	andi	r24, 0x0F	; 15
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	91 70       	andi	r25, 0x01	; 1
    2dc8:	88 e0       	ldi	r24, 0x08	; 8
    2dca:	69 2f       	mov	r22, r25
    2dcc:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 5));
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ef 59       	subi	r30, 0x9F	; 159
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 81       	ld	r24, Z
    2dd8:	82 95       	swap	r24
    2dda:	86 95       	lsr	r24
    2ddc:	87 70       	andi	r24, 0x07	; 7
    2dde:	98 2f       	mov	r25, r24
    2de0:	91 70       	andi	r25, 0x01	; 1
    2de2:	89 e0       	ldi	r24, 0x09	; 9
    2de4:	69 2f       	mov	r22, r25
    2de6:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 6));
    2dea:	fe 01       	movw	r30, r28
    2dec:	ef 59       	subi	r30, 0x9F	; 159
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 81       	ld	r24, Z
    2df2:	82 95       	swap	r24
    2df4:	86 95       	lsr	r24
    2df6:	86 95       	lsr	r24
    2df8:	83 70       	andi	r24, 0x03	; 3
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	91 70       	andi	r25, 0x01	; 1
    2dfe:	8a e0       	ldi	r24, 0x0A	; 10
    2e00:	69 2f       	mov	r22, r25
    2e02:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 7));
    2e06:	fe 01       	movw	r30, r28
    2e08:	ef 59       	subi	r30, 0x9F	; 159
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 81       	ld	r24, Z
    2e0e:	98 2f       	mov	r25, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	99 27       	eor	r25, r25
    2e14:	99 1f       	adc	r25, r25
    2e16:	8c e0       	ldi	r24, 0x0C	; 12
    2e18:	69 2f       	mov	r22, r25
    2e1a:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN, STD_HIGH);
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	61 e0       	ldi	r22, 0x01	; 1
    2e22:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    2e26:	fe 01       	movw	r30, r28
    2e28:	e3 5a       	subi	r30, 0xA3	; 163
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a0 e8       	ldi	r26, 0x80	; 128
    2e32:	bf e3       	ldi	r27, 0x3F	; 63
    2e34:	80 83       	st	Z, r24
    2e36:	91 83       	std	Z+1, r25	; 0x01
    2e38:	a2 83       	std	Z+2, r26	; 0x02
    2e3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e3c:	8e 01       	movw	r16, r28
    2e3e:	07 5a       	subi	r16, 0xA7	; 167
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	fe 01       	movw	r30, r28
    2e44:	e3 5a       	subi	r30, 0xA3	; 163
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	60 81       	ld	r22, Z
    2e4a:	71 81       	ldd	r23, Z+1	; 0x01
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	2b ea       	ldi	r18, 0xAB	; 171
    2e52:	3a ea       	ldi	r19, 0xAA	; 170
    2e54:	4a ea       	ldi	r20, 0xAA	; 170
    2e56:	50 e4       	ldi	r21, 0x40	; 64
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	f8 01       	movw	r30, r16
    2e62:	80 83       	st	Z, r24
    2e64:	91 83       	std	Z+1, r25	; 0x01
    2e66:	a2 83       	std	Z+2, r26	; 0x02
    2e68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e7 5a       	subi	r30, 0xA7	; 167
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	60 81       	ld	r22, Z
    2e72:	71 81       	ldd	r23, Z+1	; 0x01
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	93 81       	ldd	r25, Z+3	; 0x03
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e8       	ldi	r20, 0x80	; 128
    2e7e:	5f e3       	ldi	r21, 0x3F	; 63
    2e80:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e84:	88 23       	and	r24, r24
    2e86:	34 f4       	brge	.+12     	; 0x2e94 <Lcd_SendData+0x106>
		__ticks = 1;
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e8 5a       	subi	r30, 0xA8	; 168
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	80 83       	st	Z, r24
    2e92:	e0 c0       	rjmp	.+448    	; 0x3054 <Lcd_SendData+0x2c6>
	else if (__tmp > 255)
    2e94:	fe 01       	movw	r30, r28
    2e96:	e7 5a       	subi	r30, 0xA7	; 167
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <Lcd_SendData+0x126>
    2eb2:	c0 c0       	rjmp	.+384    	; 0x3034 <Lcd_SendData+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e3 5a       	subi	r30, 0xA3	; 163
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	4a e7       	ldi	r20, 0x7A	; 122
    2ec8:	54 e4       	ldi	r21, 0x44	; 68
    2eca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ec 5a       	subi	r30, 0xAC	; 172
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 83       	st	Z, r24
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	a2 83       	std	Z+2, r26	; 0x02
    2ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	8e 01       	movw	r16, r28
    2ee2:	00 5b       	subi	r16, 0xB0	; 176
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ec 5a       	subi	r30, 0xAC	; 172
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a e7       	ldi	r20, 0x7A	; 122
    2efa:	55 e4       	ldi	r21, 0x45	; 69
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	f8 01       	movw	r30, r16
    2f06:	80 83       	st	Z, r24
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	a2 83       	std	Z+2, r26	; 0x02
    2f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e0 5b       	subi	r30, 0xB0	; 176
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	44 f4       	brge	.+16     	; 0x2f3c <Lcd_SendData+0x1ae>
		__ticks = 1;
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e2 5b       	subi	r30, 0xB2	; 178
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
    2f3a:	64 c0       	rjmp	.+200    	; 0x3004 <Lcd_SendData+0x276>
	else if (__tmp > 65535)
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e0 5b       	subi	r30, 0xB0	; 176
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	60 81       	ld	r22, Z
    2f44:	71 81       	ldd	r23, Z+1	; 0x01
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	0c f0       	brlt	.+2      	; 0x2f5c <Lcd_SendData+0x1ce>
    2f5a:	43 c0       	rjmp	.+134    	; 0x2fe2 <Lcd_SendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	ec 5a       	subi	r30, 0xAC	; 172
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e2       	ldi	r20, 0x20	; 32
    2f70:	51 e4       	ldi	r21, 0x41	; 65
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	02 5b       	subi	r16, 0xB2	; 178
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
    2f92:	1f c0       	rjmp	.+62     	; 0x2fd2 <Lcd_SendData+0x244>
    2f94:	fe 01       	movw	r30, r28
    2f96:	e4 5b       	subi	r30, 0xB4	; 180
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 e9       	ldi	r24, 0x90	; 144
    2f9c:	91 e0       	ldi	r25, 0x01	; 1
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e4 5b       	subi	r30, 0xB4	; 180
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <Lcd_SendData+0x21e>
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e4 5b       	subi	r30, 0xB4	; 180
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fba:	de 01       	movw	r26, r28
    2fbc:	a2 5b       	subi	r26, 0xB2	; 178
    2fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e2 5b       	subi	r30, 0xB2	; 178
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 81       	ld	r24, Z
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	11 96       	adiw	r26, 0x01	; 1
    2fce:	9c 93       	st	X, r25
    2fd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e2 5b       	subi	r30, 0xB2	; 178
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	80 81       	ld	r24, Z
    2fda:	91 81       	ldd	r25, Z+1	; 0x01
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	d1 f6       	brne	.-76     	; 0x2f94 <Lcd_SendData+0x206>
    2fe0:	4b c0       	rjmp	.+150    	; 0x3078 <Lcd_SendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe2:	8e 01       	movw	r16, r28
    2fe4:	02 5b       	subi	r16, 0xB2	; 178
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e0 5b       	subi	r30, 0xB0	; 176
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	f8 01       	movw	r30, r16
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
    3004:	de 01       	movw	r26, r28
    3006:	a6 5b       	subi	r26, 0xB6	; 182
    3008:	bf 4f       	sbci	r27, 0xFF	; 255
    300a:	fe 01       	movw	r30, r28
    300c:	e2 5b       	subi	r30, 0xB2	; 178
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	11 96       	adiw	r26, 0x01	; 1
    3016:	9c 93       	st	X, r25
    3018:	8e 93       	st	-X, r24
    301a:	fe 01       	movw	r30, r28
    301c:	e6 5b       	subi	r30, 0xB6	; 182
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <Lcd_SendData+0x296>
    3028:	fe 01       	movw	r30, r28
    302a:	e6 5b       	subi	r30, 0xB6	; 182
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
    3032:	22 c0       	rjmp	.+68     	; 0x3078 <Lcd_SendData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3034:	8e 01       	movw	r16, r28
    3036:	08 5a       	subi	r16, 0xA8	; 168
    3038:	1f 4f       	sbci	r17, 0xFF	; 255
    303a:	fe 01       	movw	r30, r28
    303c:	e7 5a       	subi	r30, 0xA7	; 167
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	60 81       	ld	r22, Z
    3042:	71 81       	ldd	r23, Z+1	; 0x01
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	93 81       	ldd	r25, Z+3	; 0x03
    3048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	f8 01       	movw	r30, r16
    3052:	80 83       	st	Z, r24
    3054:	de 01       	movw	r26, r28
    3056:	a7 5b       	subi	r26, 0xB7	; 183
    3058:	bf 4f       	sbci	r27, 0xFF	; 255
    305a:	fe 01       	movw	r30, r28
    305c:	e8 5a       	subi	r30, 0xA8	; 168
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3064:	fe 01       	movw	r30, r28
    3066:	e7 5b       	subi	r30, 0xB7	; 183
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	80 81       	ld	r24, Z
    306c:	8a 95       	dec	r24
    306e:	f1 f7       	brne	.-4      	; 0x306c <Lcd_SendData+0x2de>
    3070:	fe 01       	movw	r30, r28
    3072:	e7 5b       	subi	r30, 0xB7	; 183
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 83       	st	Z, r24
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    3078:	82 e0       	ldi	r24, 0x02	; 2
    307a:	60 e0       	ldi	r22, 0x00	; 0
    307c:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    3080:	fe 01       	movw	r30, r28
    3082:	eb 5b       	subi	r30, 0xBB	; 187
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	a0 e8       	ldi	r26, 0x80	; 128
    308c:	bf e3       	ldi	r27, 0x3F	; 63
    308e:	80 83       	st	Z, r24
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	a2 83       	std	Z+2, r26	; 0x02
    3094:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3096:	8e 01       	movw	r16, r28
    3098:	0f 5b       	subi	r16, 0xBF	; 191
    309a:	1f 4f       	sbci	r17, 0xFF	; 255
    309c:	fe 01       	movw	r30, r28
    309e:	eb 5b       	subi	r30, 0xBB	; 187
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	2b ea       	ldi	r18, 0xAB	; 171
    30ac:	3a ea       	ldi	r19, 0xAA	; 170
    30ae:	4a ea       	ldi	r20, 0xAA	; 170
    30b0:	50 e4       	ldi	r21, 0x40	; 64
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	f8 01       	movw	r30, r16
    30bc:	80 83       	st	Z, r24
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	a2 83       	std	Z+2, r26	; 0x02
    30c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30c4:	fe 01       	movw	r30, r28
    30c6:	ef 5b       	subi	r30, 0xBF	; 191
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	5f e3       	ldi	r21, 0x3F	; 63
    30da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30de:	88 23       	and	r24, r24
    30e0:	34 f4       	brge	.+12     	; 0x30ee <Lcd_SendData+0x360>
		__ticks = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	fe 01       	movw	r30, r28
    30e6:	e0 5c       	subi	r30, 0xC0	; 192
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 83       	st	Z, r24
    30ec:	9d c0       	rjmp	.+314    	; 0x3228 <Lcd_SendData+0x49a>
	else if (__tmp > 255)
    30ee:	fe 01       	movw	r30, r28
    30f0:	ef 5b       	subi	r30, 0xBF	; 191
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	60 81       	ld	r22, Z
    30f6:	71 81       	ldd	r23, Z+1	; 0x01
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	93 81       	ldd	r25, Z+3	; 0x03
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	4f e7       	ldi	r20, 0x7F	; 127
    3102:	53 e4       	ldi	r21, 0x43	; 67
    3104:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3108:	18 16       	cp	r1, r24
    310a:	0c f0       	brlt	.+2      	; 0x310e <Lcd_SendData+0x380>
    310c:	7e c0       	rjmp	.+252    	; 0x320a <Lcd_SendData+0x47c>
	{
		_delay_ms(__us / 1000.0);
    310e:	fe 01       	movw	r30, r28
    3110:	eb 5b       	subi	r30, 0xBB	; 187
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	60 81       	ld	r22, Z
    3116:	71 81       	ldd	r23, Z+1	; 0x01
    3118:	82 81       	ldd	r24, Z+2	; 0x02
    311a:	93 81       	ldd	r25, Z+3	; 0x03
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	4a e7       	ldi	r20, 0x7A	; 122
    3122:	54 e4       	ldi	r21, 0x44	; 68
    3124:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	8c af       	std	Y+60, r24	; 0x3c
    312e:	9d af       	std	Y+61, r25	; 0x3d
    3130:	ae af       	std	Y+62, r26	; 0x3e
    3132:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3134:	6c ad       	ldd	r22, Y+60	; 0x3c
    3136:	7d ad       	ldd	r23, Y+61	; 0x3d
    3138:	8e ad       	ldd	r24, Y+62	; 0x3e
    313a:	9f ad       	ldd	r25, Y+63	; 0x3f
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4a e7       	ldi	r20, 0x7A	; 122
    3142:	55 e4       	ldi	r21, 0x45	; 69
    3144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	88 af       	std	Y+56, r24	; 0x38
    314e:	99 af       	std	Y+57, r25	; 0x39
    3150:	aa af       	std	Y+58, r26	; 0x3a
    3152:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3154:	68 ad       	ldd	r22, Y+56	; 0x38
    3156:	79 ad       	ldd	r23, Y+57	; 0x39
    3158:	8a ad       	ldd	r24, Y+58	; 0x3a
    315a:	9b ad       	ldd	r25, Y+59	; 0x3b
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e8       	ldi	r20, 0x80	; 128
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3168:	88 23       	and	r24, r24
    316a:	2c f4       	brge	.+10     	; 0x3176 <Lcd_SendData+0x3e8>
		__ticks = 1;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	9f ab       	std	Y+55, r25	; 0x37
    3172:	8e ab       	std	Y+54, r24	; 0x36
    3174:	3f c0       	rjmp	.+126    	; 0x31f4 <Lcd_SendData+0x466>
	else if (__tmp > 65535)
    3176:	68 ad       	ldd	r22, Y+56	; 0x38
    3178:	79 ad       	ldd	r23, Y+57	; 0x39
    317a:	8a ad       	ldd	r24, Y+58	; 0x3a
    317c:	9b ad       	ldd	r25, Y+59	; 0x3b
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	3f ef       	ldi	r19, 0xFF	; 255
    3182:	4f e7       	ldi	r20, 0x7F	; 127
    3184:	57 e4       	ldi	r21, 0x47	; 71
    3186:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    318a:	18 16       	cp	r1, r24
    318c:	4c f5       	brge	.+82     	; 0x31e0 <Lcd_SendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3190:	7d ad       	ldd	r23, Y+61	; 0x3d
    3192:	8e ad       	ldd	r24, Y+62	; 0x3e
    3194:	9f ad       	ldd	r25, Y+63	; 0x3f
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e2       	ldi	r20, 0x20	; 32
    319c:	51 e4       	ldi	r21, 0x41	; 65
    319e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9f ab       	std	Y+55, r25	; 0x37
    31b4:	8e ab       	std	Y+54, r24	; 0x36
    31b6:	0f c0       	rjmp	.+30     	; 0x31d6 <Lcd_SendData+0x448>
    31b8:	80 e9       	ldi	r24, 0x90	; 144
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	9d ab       	std	Y+53, r25	; 0x35
    31be:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31c0:	8c a9       	ldd	r24, Y+52	; 0x34
    31c2:	9d a9       	ldd	r25, Y+53	; 0x35
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <Lcd_SendData+0x436>
    31c8:	9d ab       	std	Y+53, r25	; 0x35
    31ca:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31cc:	8e a9       	ldd	r24, Y+54	; 0x36
    31ce:	9f a9       	ldd	r25, Y+55	; 0x37
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	9f ab       	std	Y+55, r25	; 0x37
    31d4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d6:	8e a9       	ldd	r24, Y+54	; 0x36
    31d8:	9f a9       	ldd	r25, Y+55	; 0x37
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	69 f7       	brne	.-38     	; 0x31b8 <Lcd_SendData+0x42a>
    31de:	2d c0       	rjmp	.+90     	; 0x323a <Lcd_SendData+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e0:	68 ad       	ldd	r22, Y+56	; 0x38
    31e2:	79 ad       	ldd	r23, Y+57	; 0x39
    31e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    31e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9f ab       	std	Y+55, r25	; 0x37
    31f2:	8e ab       	std	Y+54, r24	; 0x36
    31f4:	8e a9       	ldd	r24, Y+54	; 0x36
    31f6:	9f a9       	ldd	r25, Y+55	; 0x37
    31f8:	9b ab       	std	Y+51, r25	; 0x33
    31fa:	8a ab       	std	Y+50, r24	; 0x32
    31fc:	8a a9       	ldd	r24, Y+50	; 0x32
    31fe:	9b a9       	ldd	r25, Y+51	; 0x33
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <Lcd_SendData+0x472>
    3204:	9b ab       	std	Y+51, r25	; 0x33
    3206:	8a ab       	std	Y+50, r24	; 0x32
    3208:	18 c0       	rjmp	.+48     	; 0x323a <Lcd_SendData+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    320a:	fe 01       	movw	r30, r28
    320c:	ef 5b       	subi	r30, 0xBF	; 191
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	fe 01       	movw	r30, r28
    3222:	e0 5c       	subi	r30, 0xC0	; 192
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 83       	st	Z, r24
    3228:	fe 01       	movw	r30, r28
    322a:	e0 5c       	subi	r30, 0xC0	; 192
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	80 81       	ld	r24, Z
    3230:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3232:	89 a9       	ldd	r24, Y+49	; 0x31
    3234:	8a 95       	dec	r24
    3236:	f1 f7       	brne	.-4      	; 0x3234 <Lcd_SendData+0x4a6>
    3238:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Send the low nibble
	Dio_WriteChannel(PB_0, GET_BIT(data, 0));
    323a:	fe 01       	movw	r30, r28
    323c:	ef 59       	subi	r30, 0x9F	; 159
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	98 2f       	mov	r25, r24
    3244:	91 70       	andi	r25, 0x01	; 1
    3246:	88 e0       	ldi	r24, 0x08	; 8
    3248:	69 2f       	mov	r22, r25
    324a:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_1, GET_BIT(data, 1));
    324e:	fe 01       	movw	r30, r28
    3250:	ef 59       	subi	r30, 0x9F	; 159
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	86 95       	lsr	r24
    3258:	98 2f       	mov	r25, r24
    325a:	91 70       	andi	r25, 0x01	; 1
    325c:	89 e0       	ldi	r24, 0x09	; 9
    325e:	69 2f       	mov	r22, r25
    3260:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_2, GET_BIT(data, 2));
    3264:	fe 01       	movw	r30, r28
    3266:	ef 59       	subi	r30, 0x9F	; 159
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	86 95       	lsr	r24
    326e:	86 95       	lsr	r24
    3270:	98 2f       	mov	r25, r24
    3272:	91 70       	andi	r25, 0x01	; 1
    3274:	8a e0       	ldi	r24, 0x0A	; 10
    3276:	69 2f       	mov	r22, r25
    3278:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
	Dio_WriteChannel(PB_4, GET_BIT(data, 3));
    327c:	fe 01       	movw	r30, r28
    327e:	ef 59       	subi	r30, 0x9F	; 159
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	86 95       	lsr	r24
    3286:	86 95       	lsr	r24
    3288:	86 95       	lsr	r24
    328a:	98 2f       	mov	r25, r24
    328c:	91 70       	andi	r25, 0x01	; 1
    328e:	8c e0       	ldi	r24, 0x0C	; 12
    3290:	69 2f       	mov	r22, r25
    3292:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>

	Dio_WriteChannel(LCD_EN, STD_HIGH);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	61 e0       	ldi	r22, 0x01	; 1
    329a:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 e8       	ldi	r26, 0x80	; 128
    32a4:	bf e3       	ldi	r27, 0x3F	; 63
    32a6:	8d a7       	std	Y+45, r24	; 0x2d
    32a8:	9e a7       	std	Y+46, r25	; 0x2e
    32aa:	af a7       	std	Y+47, r26	; 0x2f
    32ac:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    32b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    32b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b4:	98 a9       	ldd	r25, Y+48	; 0x30
    32b6:	2b ea       	ldi	r18, 0xAB	; 171
    32b8:	3a ea       	ldi	r19, 0xAA	; 170
    32ba:	4a ea       	ldi	r20, 0xAA	; 170
    32bc:	50 e4       	ldi	r21, 0x40	; 64
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	89 a7       	std	Y+41, r24	; 0x29
    32c8:	9a a7       	std	Y+42, r25	; 0x2a
    32ca:	ab a7       	std	Y+43, r26	; 0x2b
    32cc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    32ce:	69 a5       	ldd	r22, Y+41	; 0x29
    32d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    32d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32e2:	88 23       	and	r24, r24
    32e4:	1c f4       	brge	.+6      	; 0x32ec <Lcd_SendData+0x55e>
		__ticks = 1;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	88 a7       	std	Y+40, r24	; 0x28
    32ea:	91 c0       	rjmp	.+290    	; 0x340e <Lcd_SendData+0x680>
	else if (__tmp > 255)
    32ec:	69 a5       	ldd	r22, Y+41	; 0x29
    32ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    32f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	4f e7       	ldi	r20, 0x7F	; 127
    32fa:	53 e4       	ldi	r21, 0x43	; 67
    32fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3300:	18 16       	cp	r1, r24
    3302:	0c f0       	brlt	.+2      	; 0x3306 <Lcd_SendData+0x578>
    3304:	7b c0       	rjmp	.+246    	; 0x33fc <Lcd_SendData+0x66e>
	{
		_delay_ms(__us / 1000.0);
    3306:	6d a5       	ldd	r22, Y+45	; 0x2d
    3308:	7e a5       	ldd	r23, Y+46	; 0x2e
    330a:	8f a5       	ldd	r24, Y+47	; 0x2f
    330c:	98 a9       	ldd	r25, Y+48	; 0x30
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4a e7       	ldi	r20, 0x7A	; 122
    3314:	54 e4       	ldi	r21, 0x44	; 68
    3316:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	8c a3       	std	Y+36, r24	; 0x24
    3320:	9d a3       	std	Y+37, r25	; 0x25
    3322:	ae a3       	std	Y+38, r26	; 0x26
    3324:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3326:	6c a1       	ldd	r22, Y+36	; 0x24
    3328:	7d a1       	ldd	r23, Y+37	; 0x25
    332a:	8e a1       	ldd	r24, Y+38	; 0x26
    332c:	9f a1       	ldd	r25, Y+39	; 0x27
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	4a e7       	ldi	r20, 0x7A	; 122
    3334:	55 e4       	ldi	r21, 0x45	; 69
    3336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	88 a3       	std	Y+32, r24	; 0x20
    3340:	99 a3       	std	Y+33, r25	; 0x21
    3342:	aa a3       	std	Y+34, r26	; 0x22
    3344:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3346:	68 a1       	ldd	r22, Y+32	; 0x20
    3348:	79 a1       	ldd	r23, Y+33	; 0x21
    334a:	8a a1       	ldd	r24, Y+34	; 0x22
    334c:	9b a1       	ldd	r25, Y+35	; 0x23
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e8       	ldi	r20, 0x80	; 128
    3354:	5f e3       	ldi	r21, 0x3F	; 63
    3356:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    335a:	88 23       	and	r24, r24
    335c:	2c f4       	brge	.+10     	; 0x3368 <Lcd_SendData+0x5da>
		__ticks = 1;
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	9f 8f       	std	Y+31, r25	; 0x1f
    3364:	8e 8f       	std	Y+30, r24	; 0x1e
    3366:	3f c0       	rjmp	.+126    	; 0x33e6 <Lcd_SendData+0x658>
	else if (__tmp > 65535)
    3368:	68 a1       	ldd	r22, Y+32	; 0x20
    336a:	79 a1       	ldd	r23, Y+33	; 0x21
    336c:	8a a1       	ldd	r24, Y+34	; 0x22
    336e:	9b a1       	ldd	r25, Y+35	; 0x23
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	3f ef       	ldi	r19, 0xFF	; 255
    3374:	4f e7       	ldi	r20, 0x7F	; 127
    3376:	57 e4       	ldi	r21, 0x47	; 71
    3378:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    337c:	18 16       	cp	r1, r24
    337e:	4c f5       	brge	.+82     	; 0x33d2 <Lcd_SendData+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3380:	6c a1       	ldd	r22, Y+36	; 0x24
    3382:	7d a1       	ldd	r23, Y+37	; 0x25
    3384:	8e a1       	ldd	r24, Y+38	; 0x26
    3386:	9f a1       	ldd	r25, Y+39	; 0x27
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e2       	ldi	r20, 0x20	; 32
    338e:	51 e4       	ldi	r21, 0x41	; 65
    3390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	bc 01       	movw	r22, r24
    339a:	cd 01       	movw	r24, r26
    339c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	9f 8f       	std	Y+31, r25	; 0x1f
    33a6:	8e 8f       	std	Y+30, r24	; 0x1e
    33a8:	0f c0       	rjmp	.+30     	; 0x33c8 <Lcd_SendData+0x63a>
    33aa:	80 e9       	ldi	r24, 0x90	; 144
    33ac:	91 e0       	ldi	r25, 0x01	; 1
    33ae:	9d 8f       	std	Y+29, r25	; 0x1d
    33b0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <Lcd_SendData+0x628>
    33ba:	9d 8f       	std	Y+29, r25	; 0x1d
    33bc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	9f 8f       	std	Y+31, r25	; 0x1f
    33c6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	69 f7       	brne	.-38     	; 0x33aa <Lcd_SendData+0x61c>
    33d0:	24 c0       	rjmp	.+72     	; 0x341a <Lcd_SendData+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d2:	68 a1       	ldd	r22, Y+32	; 0x20
    33d4:	79 a1       	ldd	r23, Y+33	; 0x21
    33d6:	8a a1       	ldd	r24, Y+34	; 0x22
    33d8:	9b a1       	ldd	r25, Y+35	; 0x23
    33da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	9f 8f       	std	Y+31, r25	; 0x1f
    33e4:	8e 8f       	std	Y+30, r24	; 0x1e
    33e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33ea:	9b 8f       	std	Y+27, r25	; 0x1b
    33ec:	8a 8f       	std	Y+26, r24	; 0x1a
    33ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <Lcd_SendData+0x664>
    33f6:	9b 8f       	std	Y+27, r25	; 0x1b
    33f8:	8a 8f       	std	Y+26, r24	; 0x1a
    33fa:	0f c0       	rjmp	.+30     	; 0x341a <Lcd_SendData+0x68c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33fc:	69 a5       	ldd	r22, Y+41	; 0x29
    33fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    3400:	8b a5       	ldd	r24, Y+43	; 0x2b
    3402:	9c a5       	ldd	r25, Y+44	; 0x2c
    3404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	88 a7       	std	Y+40, r24	; 0x28
    340e:	88 a5       	ldd	r24, Y+40	; 0x28
    3410:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3412:	89 8d       	ldd	r24, Y+25	; 0x19
    3414:	8a 95       	dec	r24
    3416:	f1 f7       	brne	.-4      	; 0x3414 <Lcd_SendData+0x686>
    3418:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_WriteChannel(LCD_EN, STD_LOW);
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	0e 94 22 10 	call	0x2044	; 0x2044 <Dio_WriteChannel>
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	a0 e2       	ldi	r26, 0x20	; 32
    3428:	b1 e4       	ldi	r27, 0x41	; 65
    342a:	8d 8b       	std	Y+21, r24	; 0x15
    342c:	9e 8b       	std	Y+22, r25	; 0x16
    342e:	af 8b       	std	Y+23, r26	; 0x17
    3430:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3432:	6d 89       	ldd	r22, Y+21	; 0x15
    3434:	7e 89       	ldd	r23, Y+22	; 0x16
    3436:	8f 89       	ldd	r24, Y+23	; 0x17
    3438:	98 8d       	ldd	r25, Y+24	; 0x18
    343a:	2b ea       	ldi	r18, 0xAB	; 171
    343c:	3a ea       	ldi	r19, 0xAA	; 170
    343e:	4a ea       	ldi	r20, 0xAA	; 170
    3440:	50 e4       	ldi	r21, 0x40	; 64
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	89 8b       	std	Y+17, r24	; 0x11
    344c:	9a 8b       	std	Y+18, r25	; 0x12
    344e:	ab 8b       	std	Y+19, r26	; 0x13
    3450:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3452:	69 89       	ldd	r22, Y+17	; 0x11
    3454:	7a 89       	ldd	r23, Y+18	; 0x12
    3456:	8b 89       	ldd	r24, Y+19	; 0x13
    3458:	9c 89       	ldd	r25, Y+20	; 0x14
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e8       	ldi	r20, 0x80	; 128
    3460:	5f e3       	ldi	r21, 0x3F	; 63
    3462:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3466:	88 23       	and	r24, r24
    3468:	1c f4       	brge	.+6      	; 0x3470 <Lcd_SendData+0x6e2>
		__ticks = 1;
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	88 8b       	std	Y+16, r24	; 0x10
    346e:	91 c0       	rjmp	.+290    	; 0x3592 <Lcd_SendData+0x804>
	else if (__tmp > 255)
    3470:	69 89       	ldd	r22, Y+17	; 0x11
    3472:	7a 89       	ldd	r23, Y+18	; 0x12
    3474:	8b 89       	ldd	r24, Y+19	; 0x13
    3476:	9c 89       	ldd	r25, Y+20	; 0x14
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4f e7       	ldi	r20, 0x7F	; 127
    347e:	53 e4       	ldi	r21, 0x43	; 67
    3480:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3484:	18 16       	cp	r1, r24
    3486:	0c f0       	brlt	.+2      	; 0x348a <Lcd_SendData+0x6fc>
    3488:	7b c0       	rjmp	.+246    	; 0x3580 <Lcd_SendData+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    348a:	6d 89       	ldd	r22, Y+21	; 0x15
    348c:	7e 89       	ldd	r23, Y+22	; 0x16
    348e:	8f 89       	ldd	r24, Y+23	; 0x17
    3490:	98 8d       	ldd	r25, Y+24	; 0x18
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	4a e7       	ldi	r20, 0x7A	; 122
    3498:	54 e4       	ldi	r21, 0x44	; 68
    349a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	8c 87       	std	Y+12, r24	; 0x0c
    34a4:	9d 87       	std	Y+13, r25	; 0x0d
    34a6:	ae 87       	std	Y+14, r26	; 0x0e
    34a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    34ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    34ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    34b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	4a e7       	ldi	r20, 0x7A	; 122
    34b8:	55 e4       	ldi	r21, 0x45	; 69
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	88 87       	std	Y+8, r24	; 0x08
    34c4:	99 87       	std	Y+9, r25	; 0x09
    34c6:	aa 87       	std	Y+10, r26	; 0x0a
    34c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    34ca:	68 85       	ldd	r22, Y+8	; 0x08
    34cc:	79 85       	ldd	r23, Y+9	; 0x09
    34ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    34d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e8       	ldi	r20, 0x80	; 128
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34de:	88 23       	and	r24, r24
    34e0:	2c f4       	brge	.+10     	; 0x34ec <Lcd_SendData+0x75e>
		__ticks = 1;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9f 83       	std	Y+7, r25	; 0x07
    34e8:	8e 83       	std	Y+6, r24	; 0x06
    34ea:	3f c0       	rjmp	.+126    	; 0x356a <Lcd_SendData+0x7dc>
	else if (__tmp > 65535)
    34ec:	68 85       	ldd	r22, Y+8	; 0x08
    34ee:	79 85       	ldd	r23, Y+9	; 0x09
    34f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    34f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	4f e7       	ldi	r20, 0x7F	; 127
    34fa:	57 e4       	ldi	r21, 0x47	; 71
    34fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3500:	18 16       	cp	r1, r24
    3502:	4c f5       	brge	.+82     	; 0x3556 <Lcd_SendData+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	6c 85       	ldd	r22, Y+12	; 0x0c
    3506:	7d 85       	ldd	r23, Y+13	; 0x0d
    3508:	8e 85       	ldd	r24, Y+14	; 0x0e
    350a:	9f 85       	ldd	r25, Y+15	; 0x0f
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e2       	ldi	r20, 0x20	; 32
    3512:	51 e4       	ldi	r21, 0x41	; 65
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9f 83       	std	Y+7, r25	; 0x07
    352a:	8e 83       	std	Y+6, r24	; 0x06
    352c:	0f c0       	rjmp	.+30     	; 0x354c <Lcd_SendData+0x7be>
    352e:	80 e9       	ldi	r24, 0x90	; 144
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	9d 83       	std	Y+5, r25	; 0x05
    3534:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3536:	8c 81       	ldd	r24, Y+4	; 0x04
    3538:	9d 81       	ldd	r25, Y+5	; 0x05
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <Lcd_SendData+0x7ac>
    353e:	9d 83       	std	Y+5, r25	; 0x05
    3540:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3542:	8e 81       	ldd	r24, Y+6	; 0x06
    3544:	9f 81       	ldd	r25, Y+7	; 0x07
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	9f 83       	std	Y+7, r25	; 0x07
    354a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	8e 81       	ldd	r24, Y+6	; 0x06
    354e:	9f 81       	ldd	r25, Y+7	; 0x07
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	69 f7       	brne	.-38     	; 0x352e <Lcd_SendData+0x7a0>
    3554:	24 c0       	rjmp	.+72     	; 0x359e <Lcd_SendData+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3556:	68 85       	ldd	r22, Y+8	; 0x08
    3558:	79 85       	ldd	r23, Y+9	; 0x09
    355a:	8a 85       	ldd	r24, Y+10	; 0x0a
    355c:	9b 85       	ldd	r25, Y+11	; 0x0b
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	9f 83       	std	Y+7, r25	; 0x07
    3568:	8e 83       	std	Y+6, r24	; 0x06
    356a:	8e 81       	ldd	r24, Y+6	; 0x06
    356c:	9f 81       	ldd	r25, Y+7	; 0x07
    356e:	9b 83       	std	Y+3, r25	; 0x03
    3570:	8a 83       	std	Y+2, r24	; 0x02
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	9b 81       	ldd	r25, Y+3	; 0x03
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <Lcd_SendData+0x7e8>
    357a:	9b 83       	std	Y+3, r25	; 0x03
    357c:	8a 83       	std	Y+2, r24	; 0x02
    357e:	0f c0       	rjmp	.+30     	; 0x359e <Lcd_SendData+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3580:	69 89       	ldd	r22, Y+17	; 0x11
    3582:	7a 89       	ldd	r23, Y+18	; 0x12
    3584:	8b 89       	ldd	r24, Y+19	; 0x13
    3586:	9c 89       	ldd	r25, Y+20	; 0x14
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	88 8b       	std	Y+16, r24	; 0x10
    3592:	88 89       	ldd	r24, Y+16	; 0x10
    3594:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	8a 95       	dec	r24
    359a:	f1 f7       	brne	.-4      	; 0x3598 <Lcd_SendData+0x80a>
    359c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);  // Wait for the data to be displayed
}
    359e:	cf 59       	subi	r28, 0x9F	; 159
    35a0:	df 4f       	sbci	r29, 0xFF	; 255
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	1f 91       	pop	r17
    35b2:	0f 91       	pop	r16
    35b4:	08 95       	ret

000035b6 <Lcd_GoTo>:

void Lcd_GoTo(u8 row,u8 col){
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <Lcd_GoTo+0x6>
    35bc:	00 d0       	rcall	.+0      	; 0x35be <Lcd_GoTo+0x8>
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	6a 83       	std	Y+2, r22	; 0x02
	col--;
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	81 50       	subi	r24, 0x01	; 1
    35ca:	8a 83       	std	Y+2, r24	; 0x02
	switch (row){
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	3c 83       	std	Y+4, r19	; 0x04
    35d4:	2b 83       	std	Y+3, r18	; 0x03
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	9c 81       	ldd	r25, Y+4	; 0x04
    35da:	82 30       	cpi	r24, 0x02	; 2
    35dc:	91 05       	cpc	r25, r1
    35de:	d9 f0       	breq	.+54     	; 0x3616 <Lcd_GoTo+0x60>
    35e0:	2b 81       	ldd	r18, Y+3	; 0x03
    35e2:	3c 81       	ldd	r19, Y+4	; 0x04
    35e4:	23 30       	cpi	r18, 0x03	; 3
    35e6:	31 05       	cpc	r19, r1
    35e8:	34 f4       	brge	.+12     	; 0x35f6 <Lcd_GoTo+0x40>
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	9c 81       	ldd	r25, Y+4	; 0x04
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	91 05       	cpc	r25, r1
    35f2:	61 f0       	breq	.+24     	; 0x360c <Lcd_GoTo+0x56>
    35f4:	1e c0       	rjmp	.+60     	; 0x3632 <Lcd_GoTo+0x7c>
    35f6:	2b 81       	ldd	r18, Y+3	; 0x03
    35f8:	3c 81       	ldd	r19, Y+4	; 0x04
    35fa:	23 30       	cpi	r18, 0x03	; 3
    35fc:	31 05       	cpc	r19, r1
    35fe:	81 f0       	breq	.+32     	; 0x3620 <Lcd_GoTo+0x6a>
    3600:	8b 81       	ldd	r24, Y+3	; 0x03
    3602:	9c 81       	ldd	r25, Y+4	; 0x04
    3604:	84 30       	cpi	r24, 0x04	; 4
    3606:	91 05       	cpc	r25, r1
    3608:	81 f0       	breq	.+32     	; 0x362a <Lcd_GoTo+0x74>
    360a:	13 c0       	rjmp	.+38     	; 0x3632 <Lcd_GoTo+0x7c>
	        case ROW1:
	        	Lcd_SendCMD(0x80+col);
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	80 58       	subi	r24, 0x80	; 128
    3610:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
    3614:	0e c0       	rjmp	.+28     	; 0x3632 <Lcd_GoTo+0x7c>
	        break;
	        case ROW2:
	        	Lcd_SendCMD(0xC0+col);
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	80 54       	subi	r24, 0x40	; 64
    361a:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
    361e:	09 c0       	rjmp	.+18     	; 0x3632 <Lcd_GoTo+0x7c>
	        break;
	        case ROW3:
	        	Lcd_SendCMD(0x94+col);
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	8c 56       	subi	r24, 0x6C	; 108
    3624:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
    3628:	04 c0       	rjmp	.+8      	; 0x3632 <Lcd_GoTo+0x7c>
	        break;
	        case ROW4:
	        	Lcd_SendCMD(0xD4+col);
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	8c 52       	subi	r24, 0x2C	; 44
    362e:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
	        break;
	        default:break;

	    }
}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	08 95       	ret

00003640 <Lcd_PutChar>:

void Lcd_PutChar (u8 character)
{
    3640:	df 93       	push	r29
    3642:	cf 93       	push	r28
    3644:	0f 92       	push	r0
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendData(character);
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <Lcd_SendData>
}
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <Lcd_PutInt>:

void Lcd_PutInt(u32 Number)
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <Lcd_PutInt+0x6>
    3660:	00 d0       	rcall	.+0      	; 0x3662 <Lcd_PutInt+0x8>
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	69 83       	std	Y+1, r22	; 0x01
    3668:	7a 83       	std	Y+2, r23	; 0x02
    366a:	8b 83       	std	Y+3, r24	; 0x03
    366c:	9c 83       	std	Y+4, r25	; 0x04

	if(Number == 0 )
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	9a 81       	ldd	r25, Y+2	; 0x02
    3672:	ab 81       	ldd	r26, Y+3	; 0x03
    3674:	bc 81       	ldd	r27, Y+4	; 0x04
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	a1 05       	cpc	r26, r1
    367a:	b1 05       	cpc	r27, r1
    367c:	19 f1       	breq	.+70     	; 0x36c4 <Lcd_PutInt+0x6a>
		return ;
	else
		Lcd_PutInt(Number/10);
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	9a 81       	ldd	r25, Y+2	; 0x02
    3682:	ab 81       	ldd	r26, Y+3	; 0x03
    3684:	bc 81       	ldd	r27, Y+4	; 0x04
    3686:	2a e0       	ldi	r18, 0x0A	; 10
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e0       	ldi	r20, 0x00	; 0
    368c:	50 e0       	ldi	r21, 0x00	; 0
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__udivmodsi4>
    3696:	da 01       	movw	r26, r20
    3698:	c9 01       	movw	r24, r18
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 2d 1b 	call	0x365a	; 0x365a <Lcd_PutInt>
	///if(Number<255)
	 Lcd_SendData((Number%10)+0x30);
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	ab 81       	ldd	r26, Y+3	; 0x03
    36a8:	bc 81       	ldd	r27, Y+4	; 0x04
    36aa:	2a e0       	ldi	r18, 0x0A	; 10
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__udivmodsi4>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	80 5d       	subi	r24, 0xD0	; 208
    36c0:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <Lcd_SendData>
}
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	cf 91       	pop	r28
    36ce:	df 91       	pop	r29
    36d0:	08 95       	ret

000036d2 <Lcd_Init>:

void Lcd_Init(void) {
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	c6 54       	subi	r28, 0x46	; 70
    36e0:	d0 40       	sbci	r29, 0x00	; 0
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	fe 01       	movw	r30, r28
    36ee:	ed 5b       	subi	r30, 0xBD	; 189
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	a8 e4       	ldi	r26, 0x48	; 72
    36f8:	b2 e4       	ldi	r27, 0x42	; 66
    36fa:	80 83       	st	Z, r24
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	a2 83       	std	Z+2, r26	; 0x02
    3700:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3702:	8e 01       	movw	r16, r28
    3704:	01 5c       	subi	r16, 0xC1	; 193
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	ed 5b       	subi	r30, 0xBD	; 189
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	60 81       	ld	r22, Z
    3710:	71 81       	ldd	r23, Z+1	; 0x01
    3712:	82 81       	ldd	r24, Z+2	; 0x02
    3714:	93 81       	ldd	r25, Z+3	; 0x03
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	4a e7       	ldi	r20, 0x7A	; 122
    371c:	55 e4       	ldi	r21, 0x45	; 69
    371e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	f8 01       	movw	r30, r16
    3728:	80 83       	st	Z, r24
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	a2 83       	std	Z+2, r26	; 0x02
    372e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3730:	fe 01       	movw	r30, r28
    3732:	ff 96       	adiw	r30, 0x3f	; 63
    3734:	60 81       	ld	r22, Z
    3736:	71 81       	ldd	r23, Z+1	; 0x01
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e8       	ldi	r20, 0x80	; 128
    3742:	5f e3       	ldi	r21, 0x3F	; 63
    3744:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3748:	88 23       	and	r24, r24
    374a:	2c f4       	brge	.+10     	; 0x3756 <Lcd_Init+0x84>
		__ticks = 1;
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	9e af       	std	Y+62, r25	; 0x3e
    3752:	8d af       	std	Y+61, r24	; 0x3d
    3754:	46 c0       	rjmp	.+140    	; 0x37e2 <Lcd_Init+0x110>
	else if (__tmp > 65535)
    3756:	fe 01       	movw	r30, r28
    3758:	ff 96       	adiw	r30, 0x3f	; 63
    375a:	60 81       	ld	r22, Z
    375c:	71 81       	ldd	r23, Z+1	; 0x01
    375e:	82 81       	ldd	r24, Z+2	; 0x02
    3760:	93 81       	ldd	r25, Z+3	; 0x03
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	3f ef       	ldi	r19, 0xFF	; 255
    3766:	4f e7       	ldi	r20, 0x7F	; 127
    3768:	57 e4       	ldi	r21, 0x47	; 71
    376a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    376e:	18 16       	cp	r1, r24
    3770:	64 f5       	brge	.+88     	; 0x37ca <Lcd_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3772:	fe 01       	movw	r30, r28
    3774:	ed 5b       	subi	r30, 0xBD	; 189
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	60 81       	ld	r22, Z
    377a:	71 81       	ldd	r23, Z+1	; 0x01
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	93 81       	ldd	r25, Z+3	; 0x03
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e2       	ldi	r20, 0x20	; 32
    3786:	51 e4       	ldi	r21, 0x41	; 65
    3788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	bc 01       	movw	r22, r24
    3792:	cd 01       	movw	r24, r26
    3794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	9e af       	std	Y+62, r25	; 0x3e
    379e:	8d af       	std	Y+61, r24	; 0x3d
    37a0:	0f c0       	rjmp	.+30     	; 0x37c0 <Lcd_Init+0xee>
    37a2:	80 e9       	ldi	r24, 0x90	; 144
    37a4:	91 e0       	ldi	r25, 0x01	; 1
    37a6:	9c af       	std	Y+60, r25	; 0x3c
    37a8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    37ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	f1 f7       	brne	.-4      	; 0x37ae <Lcd_Init+0xdc>
    37b2:	9c af       	std	Y+60, r25	; 0x3c
    37b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    37b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	9e af       	std	Y+62, r25	; 0x3e
    37be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	69 f7       	brne	.-38     	; 0x37a2 <Lcd_Init+0xd0>
    37c8:	16 c0       	rjmp	.+44     	; 0x37f6 <Lcd_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ca:	fe 01       	movw	r30, r28
    37cc:	ff 96       	adiw	r30, 0x3f	; 63
    37ce:	60 81       	ld	r22, Z
    37d0:	71 81       	ldd	r23, Z+1	; 0x01
    37d2:	82 81       	ldd	r24, Z+2	; 0x02
    37d4:	93 81       	ldd	r25, Z+3	; 0x03
    37d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	9e af       	std	Y+62, r25	; 0x3e
    37e0:	8d af       	std	Y+61, r24	; 0x3d
    37e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    37e6:	9a af       	std	Y+58, r25	; 0x3a
    37e8:	89 af       	std	Y+57, r24	; 0x39
    37ea:	89 ad       	ldd	r24, Y+57	; 0x39
    37ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <Lcd_Init+0x11c>
    37f2:	9a af       	std	Y+58, r25	; 0x3a
    37f4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Lcd_SendCMD(HOME);
    37f6:	82 e0       	ldi	r24, 0x02	; 2
    37f8:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
	Lcd_SendCMD(FOUR_BIT);
    37fc:	88 e2       	ldi	r24, 0x28	; 40
    37fe:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	a0 e8       	ldi	r26, 0x80	; 128
    3808:	bf e3       	ldi	r27, 0x3F	; 63
    380a:	8d ab       	std	Y+53, r24	; 0x35
    380c:	9e ab       	std	Y+54, r25	; 0x36
    380e:	af ab       	std	Y+55, r26	; 0x37
    3810:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3812:	6d a9       	ldd	r22, Y+53	; 0x35
    3814:	7e a9       	ldd	r23, Y+54	; 0x36
    3816:	8f a9       	ldd	r24, Y+55	; 0x37
    3818:	98 ad       	ldd	r25, Y+56	; 0x38
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	4a e7       	ldi	r20, 0x7A	; 122
    3820:	55 e4       	ldi	r21, 0x45	; 69
    3822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	89 ab       	std	Y+49, r24	; 0x31
    382c:	9a ab       	std	Y+50, r25	; 0x32
    382e:	ab ab       	std	Y+51, r26	; 0x33
    3830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3832:	69 a9       	ldd	r22, Y+49	; 0x31
    3834:	7a a9       	ldd	r23, Y+50	; 0x32
    3836:	8b a9       	ldd	r24, Y+51	; 0x33
    3838:	9c a9       	ldd	r25, Y+52	; 0x34
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	40 e8       	ldi	r20, 0x80	; 128
    3840:	5f e3       	ldi	r21, 0x3F	; 63
    3842:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3846:	88 23       	and	r24, r24
    3848:	2c f4       	brge	.+10     	; 0x3854 <Lcd_Init+0x182>
		__ticks = 1;
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	98 ab       	std	Y+48, r25	; 0x30
    3850:	8f a7       	std	Y+47, r24	; 0x2f
    3852:	3f c0       	rjmp	.+126    	; 0x38d2 <Lcd_Init+0x200>
	else if (__tmp > 65535)
    3854:	69 a9       	ldd	r22, Y+49	; 0x31
    3856:	7a a9       	ldd	r23, Y+50	; 0x32
    3858:	8b a9       	ldd	r24, Y+51	; 0x33
    385a:	9c a9       	ldd	r25, Y+52	; 0x34
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	3f ef       	ldi	r19, 0xFF	; 255
    3860:	4f e7       	ldi	r20, 0x7F	; 127
    3862:	57 e4       	ldi	r21, 0x47	; 71
    3864:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3868:	18 16       	cp	r1, r24
    386a:	4c f5       	brge	.+82     	; 0x38be <Lcd_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386c:	6d a9       	ldd	r22, Y+53	; 0x35
    386e:	7e a9       	ldd	r23, Y+54	; 0x36
    3870:	8f a9       	ldd	r24, Y+55	; 0x37
    3872:	98 ad       	ldd	r25, Y+56	; 0x38
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	40 e2       	ldi	r20, 0x20	; 32
    387a:	51 e4       	ldi	r21, 0x41	; 65
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	bc 01       	movw	r22, r24
    3886:	cd 01       	movw	r24, r26
    3888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	98 ab       	std	Y+48, r25	; 0x30
    3892:	8f a7       	std	Y+47, r24	; 0x2f
    3894:	0f c0       	rjmp	.+30     	; 0x38b4 <Lcd_Init+0x1e2>
    3896:	80 e9       	ldi	r24, 0x90	; 144
    3898:	91 e0       	ldi	r25, 0x01	; 1
    389a:	9e a7       	std	Y+46, r25	; 0x2e
    389c:	8d a7       	std	Y+45, r24	; 0x2d
    389e:	8d a5       	ldd	r24, Y+45	; 0x2d
    38a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <Lcd_Init+0x1d0>
    38a6:	9e a7       	std	Y+46, r25	; 0x2e
    38a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ac:	98 a9       	ldd	r25, Y+48	; 0x30
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	98 ab       	std	Y+48, r25	; 0x30
    38b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b6:	98 a9       	ldd	r25, Y+48	; 0x30
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	69 f7       	brne	.-38     	; 0x3896 <Lcd_Init+0x1c4>
    38bc:	14 c0       	rjmp	.+40     	; 0x38e6 <Lcd_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38be:	69 a9       	ldd	r22, Y+49	; 0x31
    38c0:	7a a9       	ldd	r23, Y+50	; 0x32
    38c2:	8b a9       	ldd	r24, Y+51	; 0x33
    38c4:	9c a9       	ldd	r25, Y+52	; 0x34
    38c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	98 ab       	std	Y+48, r25	; 0x30
    38d0:	8f a7       	std	Y+47, r24	; 0x2f
    38d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d4:	98 a9       	ldd	r25, Y+48	; 0x30
    38d6:	9c a7       	std	Y+44, r25	; 0x2c
    38d8:	8b a7       	std	Y+43, r24	; 0x2b
    38da:	8b a5       	ldd	r24, Y+43	; 0x2b
    38dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	f1 f7       	brne	.-4      	; 0x38de <Lcd_Init+0x20c>
    38e2:	9c a7       	std	Y+44, r25	; 0x2c
    38e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Lcd_SendCMD(CURSER_ON);
    38e6:	8f e0       	ldi	r24, 0x0F	; 15
    38e8:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	a0 e8       	ldi	r26, 0x80	; 128
    38f2:	bf e3       	ldi	r27, 0x3F	; 63
    38f4:	8f a3       	std	Y+39, r24	; 0x27
    38f6:	98 a7       	std	Y+40, r25	; 0x28
    38f8:	a9 a7       	std	Y+41, r26	; 0x29
    38fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fc:	6f a1       	ldd	r22, Y+39	; 0x27
    38fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3900:	89 a5       	ldd	r24, Y+41	; 0x29
    3902:	9a a5       	ldd	r25, Y+42	; 0x2a
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4a e7       	ldi	r20, 0x7A	; 122
    390a:	55 e4       	ldi	r21, 0x45	; 69
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	8b a3       	std	Y+35, r24	; 0x23
    3916:	9c a3       	std	Y+36, r25	; 0x24
    3918:	ad a3       	std	Y+37, r26	; 0x25
    391a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    391c:	6b a1       	ldd	r22, Y+35	; 0x23
    391e:	7c a1       	ldd	r23, Y+36	; 0x24
    3920:	8d a1       	ldd	r24, Y+37	; 0x25
    3922:	9e a1       	ldd	r25, Y+38	; 0x26
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <Lcd_Init+0x26c>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9a a3       	std	Y+34, r25	; 0x22
    393a:	89 a3       	std	Y+33, r24	; 0x21
    393c:	3f c0       	rjmp	.+126    	; 0x39bc <Lcd_Init+0x2ea>
	else if (__tmp > 65535)
    393e:	6b a1       	ldd	r22, Y+35	; 0x23
    3940:	7c a1       	ldd	r23, Y+36	; 0x24
    3942:	8d a1       	ldd	r24, Y+37	; 0x25
    3944:	9e a1       	ldd	r25, Y+38	; 0x26
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	3f ef       	ldi	r19, 0xFF	; 255
    394a:	4f e7       	ldi	r20, 0x7F	; 127
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3952:	18 16       	cp	r1, r24
    3954:	4c f5       	brge	.+82     	; 0x39a8 <Lcd_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	6f a1       	ldd	r22, Y+39	; 0x27
    3958:	78 a5       	ldd	r23, Y+40	; 0x28
    395a:	89 a5       	ldd	r24, Y+41	; 0x29
    395c:	9a a5       	ldd	r25, Y+42	; 0x2a
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e2       	ldi	r20, 0x20	; 32
    3964:	51 e4       	ldi	r21, 0x41	; 65
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9a a3       	std	Y+34, r25	; 0x22
    397c:	89 a3       	std	Y+33, r24	; 0x21
    397e:	0f c0       	rjmp	.+30     	; 0x399e <Lcd_Init+0x2cc>
    3980:	80 e9       	ldi	r24, 0x90	; 144
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	98 a3       	std	Y+32, r25	; 0x20
    3986:	8f 8f       	std	Y+31, r24	; 0x1f
    3988:	8f 8d       	ldd	r24, Y+31	; 0x1f
    398a:	98 a1       	ldd	r25, Y+32	; 0x20
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <Lcd_Init+0x2ba>
    3990:	98 a3       	std	Y+32, r25	; 0x20
    3992:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	89 a1       	ldd	r24, Y+33	; 0x21
    3996:	9a a1       	ldd	r25, Y+34	; 0x22
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	9a a3       	std	Y+34, r25	; 0x22
    399c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	89 a1       	ldd	r24, Y+33	; 0x21
    39a0:	9a a1       	ldd	r25, Y+34	; 0x22
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f7       	brne	.-38     	; 0x3980 <Lcd_Init+0x2ae>
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <Lcd_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	6b a1       	ldd	r22, Y+35	; 0x23
    39aa:	7c a1       	ldd	r23, Y+36	; 0x24
    39ac:	8d a1       	ldd	r24, Y+37	; 0x25
    39ae:	9e a1       	ldd	r25, Y+38	; 0x26
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9a a3       	std	Y+34, r25	; 0x22
    39ba:	89 a3       	std	Y+33, r24	; 0x21
    39bc:	89 a1       	ldd	r24, Y+33	; 0x21
    39be:	9a a1       	ldd	r25, Y+34	; 0x22
    39c0:	9e 8f       	std	Y+30, r25	; 0x1e
    39c2:	8d 8f       	std	Y+29, r24	; 0x1d
    39c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <Lcd_Init+0x2f6>
    39cc:	9e 8f       	std	Y+30, r25	; 0x1e
    39ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_SendCMD(CLEAR);
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	a0 e8       	ldi	r26, 0x80	; 128
    39dc:	bf e3       	ldi	r27, 0x3F	; 63
    39de:	89 8f       	std	Y+25, r24	; 0x19
    39e0:	9a 8f       	std	Y+26, r25	; 0x1a
    39e2:	ab 8f       	std	Y+27, r26	; 0x1b
    39e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e6:	69 8d       	ldd	r22, Y+25	; 0x19
    39e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	4a e7       	ldi	r20, 0x7A	; 122
    39f4:	55 e4       	ldi	r21, 0x45	; 69
    39f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	8d 8b       	std	Y+21, r24	; 0x15
    3a00:	9e 8b       	std	Y+22, r25	; 0x16
    3a02:	af 8b       	std	Y+23, r26	; 0x17
    3a04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a06:	6d 89       	ldd	r22, Y+21	; 0x15
    3a08:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	40 e8       	ldi	r20, 0x80	; 128
    3a14:	5f e3       	ldi	r21, 0x3F	; 63
    3a16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a1a:	88 23       	and	r24, r24
    3a1c:	2c f4       	brge	.+10     	; 0x3a28 <Lcd_Init+0x356>
		__ticks = 1;
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	9c 8b       	std	Y+20, r25	; 0x14
    3a24:	8b 8b       	std	Y+19, r24	; 0x13
    3a26:	3f c0       	rjmp	.+126    	; 0x3aa6 <Lcd_Init+0x3d4>
	else if (__tmp > 65535)
    3a28:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	3f ef       	ldi	r19, 0xFF	; 255
    3a34:	4f e7       	ldi	r20, 0x7F	; 127
    3a36:	57 e4       	ldi	r21, 0x47	; 71
    3a38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a3c:	18 16       	cp	r1, r24
    3a3e:	4c f5       	brge	.+82     	; 0x3a92 <Lcd_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a40:	69 8d       	ldd	r22, Y+25	; 0x19
    3a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	40 e2       	ldi	r20, 0x20	; 32
    3a4e:	51 e4       	ldi	r21, 0x41	; 65
    3a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	bc 01       	movw	r22, r24
    3a5a:	cd 01       	movw	r24, r26
    3a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	9c 8b       	std	Y+20, r25	; 0x14
    3a66:	8b 8b       	std	Y+19, r24	; 0x13
    3a68:	0f c0       	rjmp	.+30     	; 0x3a88 <Lcd_Init+0x3b6>
    3a6a:	80 e9       	ldi	r24, 0x90	; 144
    3a6c:	91 e0       	ldi	r25, 0x01	; 1
    3a6e:	9a 8b       	std	Y+18, r25	; 0x12
    3a70:	89 8b       	std	Y+17, r24	; 0x11
    3a72:	89 89       	ldd	r24, Y+17	; 0x11
    3a74:	9a 89       	ldd	r25, Y+18	; 0x12
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	f1 f7       	brne	.-4      	; 0x3a76 <Lcd_Init+0x3a4>
    3a7a:	9a 8b       	std	Y+18, r25	; 0x12
    3a7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a80:	9c 89       	ldd	r25, Y+20	; 0x14
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	9c 8b       	std	Y+20, r25	; 0x14
    3a86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a88:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	69 f7       	brne	.-38     	; 0x3a6a <Lcd_Init+0x398>
    3a90:	14 c0       	rjmp	.+40     	; 0x3aba <Lcd_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a92:	6d 89       	ldd	r22, Y+21	; 0x15
    3a94:	7e 89       	ldd	r23, Y+22	; 0x16
    3a96:	8f 89       	ldd	r24, Y+23	; 0x17
    3a98:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	9c 8b       	std	Y+20, r25	; 0x14
    3aa4:	8b 8b       	std	Y+19, r24	; 0x13
    3aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    3aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aaa:	98 8b       	std	Y+16, r25	; 0x10
    3aac:	8f 87       	std	Y+15, r24	; 0x0f
    3aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab0:	98 89       	ldd	r25, Y+16	; 0x10
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	f1 f7       	brne	.-4      	; 0x3ab2 <Lcd_Init+0x3e0>
    3ab6:	98 8b       	std	Y+16, r25	; 0x10
    3ab8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_SendCMD(MODE);
    3aba:	86 e0       	ldi	r24, 0x06	; 6
    3abc:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	a0 e8       	ldi	r26, 0x80	; 128
    3ac6:	bf e3       	ldi	r27, 0x3F	; 63
    3ac8:	8b 87       	std	Y+11, r24	; 0x0b
    3aca:	9c 87       	std	Y+12, r25	; 0x0c
    3acc:	ad 87       	std	Y+13, r26	; 0x0d
    3ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	4a e7       	ldi	r20, 0x7A	; 122
    3ade:	55 e4       	ldi	r21, 0x45	; 69
    3ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	8f 83       	std	Y+7, r24	; 0x07
    3aea:	98 87       	std	Y+8, r25	; 0x08
    3aec:	a9 87       	std	Y+9, r26	; 0x09
    3aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af0:	6f 81       	ldd	r22, Y+7	; 0x07
    3af2:	78 85       	ldd	r23, Y+8	; 0x08
    3af4:	89 85       	ldd	r24, Y+9	; 0x09
    3af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	2c f4       	brge	.+10     	; 0x3b12 <Lcd_Init+0x440>
		__ticks = 1;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9e 83       	std	Y+6, r25	; 0x06
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
    3b10:	3f c0       	rjmp	.+126    	; 0x3b90 <Lcd_Init+0x4be>
	else if (__tmp > 65535)
    3b12:	6f 81       	ldd	r22, Y+7	; 0x07
    3b14:	78 85       	ldd	r23, Y+8	; 0x08
    3b16:	89 85       	ldd	r24, Y+9	; 0x09
    3b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	3f ef       	ldi	r19, 0xFF	; 255
    3b1e:	4f e7       	ldi	r20, 0x7F	; 127
    3b20:	57 e4       	ldi	r21, 0x47	; 71
    3b22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b26:	18 16       	cp	r1, r24
    3b28:	4c f5       	brge	.+82     	; 0x3b7c <Lcd_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e2       	ldi	r20, 0x20	; 32
    3b38:	51 e4       	ldi	r21, 0x41	; 65
    3b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	9e 83       	std	Y+6, r25	; 0x06
    3b50:	8d 83       	std	Y+5, r24	; 0x05
    3b52:	0f c0       	rjmp	.+30     	; 0x3b72 <Lcd_Init+0x4a0>
    3b54:	80 e9       	ldi	r24, 0x90	; 144
    3b56:	91 e0       	ldi	r25, 0x01	; 1
    3b58:	9c 83       	std	Y+4, r25	; 0x04
    3b5a:	8b 83       	std	Y+3, r24	; 0x03
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <Lcd_Init+0x48e>
    3b64:	9c 83       	std	Y+4, r25	; 0x04
    3b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b68:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	69 f7       	brne	.-38     	; 0x3b54 <Lcd_Init+0x482>
    3b7a:	14 c0       	rjmp	.+40     	; 0x3ba4 <Lcd_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7e:	78 85       	ldd	r23, Y+8	; 0x08
    3b80:	89 85       	ldd	r24, Y+9	; 0x09
    3b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9e 83       	std	Y+6, r25	; 0x06
    3b8e:	8d 83       	std	Y+5, r24	; 0x05
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	9e 81       	ldd	r25, Y+6	; 0x06
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <Lcd_Init+0x4ca>
    3ba0:	9a 83       	std	Y+2, r25	; 0x02
    3ba2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Lcd_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    3ba4:	8c e0       	ldi	r24, 0x0C	; 12
    3ba6:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
	Lcd_SendCMD(SET_DDRAM_ADDR);
    3baa:	80 e8       	ldi	r24, 0x80	; 128
    3bac:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
}
    3bb0:	ca 5b       	subi	r28, 0xBA	; 186
    3bb2:	df 4f       	sbci	r29, 0xFF	; 255
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	1f 91       	pop	r17
    3bc4:	0f 91       	pop	r16
    3bc6:	08 95       	ret

00003bc8 <Lcd_Clear>:
void Lcd_Clear(void){
    3bc8:	df 93       	push	r29
    3bca:	cf 93       	push	r28
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
Lcd_SendCMD(CLEAR);
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	0e 94 b3 12 	call	0x2566	; 0x2566 <Lcd_SendCMD>
}
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	08 95       	ret

00003bdc <Lcd_PutString>:


void Lcd_PutString (u8* str)
{
    3bdc:	df 93       	push	r29
    3bde:	cf 93       	push	r28
    3be0:	00 d0       	rcall	.+0      	; 0x3be2 <Lcd_PutString+0x6>
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	0a c0       	rjmp	.+20     	; 0x3c00 <Lcd_PutString+0x24>
	 while (*str !='\0'){
		Lcd_PutChar(*str);
    3bec:	e9 81       	ldd	r30, Y+1	; 0x01
    3bee:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf0:	80 81       	ld	r24, Z
    3bf2:	0e 94 20 1b 	call	0x3640	; 0x3640 <Lcd_PutChar>
		str++;
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfa:	01 96       	adiw	r24, 0x01	; 1
    3bfc:	9a 83       	std	Y+2, r25	; 0x02
    3bfe:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_PutString (u8* str)
{
	 while (*str !='\0'){
    3c00:	e9 81       	ldd	r30, Y+1	; 0x01
    3c02:	fa 81       	ldd	r31, Y+2	; 0x02
    3c04:	80 81       	ld	r24, Z
    3c06:	88 23       	and	r24, r24
    3c08:	89 f7       	brne	.-30     	; 0x3bec <Lcd_PutString+0x10>
		Lcd_PutChar(*str);
		str++;
		}
}
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	08 95       	ret

00003c14 <lcd4_disply_char_at_X_Y>:

void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    3c14:	df 93       	push	r29
    3c16:	cf 93       	push	r28
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <lcd4_disply_char_at_X_Y+0x6>
    3c1a:	0f 92       	push	r0
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	89 83       	std	Y+1, r24	; 0x01
    3c22:	6a 83       	std	Y+2, r22	; 0x02
    3c24:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoTo(row, col);
    3c26:	8a 81       	ldd	r24, Y+2	; 0x02
    3c28:	6b 81       	ldd	r22, Y+3	; 0x03
    3c2a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Lcd_GoTo>
	Lcd_SendData(data);
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <Lcd_SendData>
}
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <Lcd_PutString_x_Y>:


void Lcd_PutString_x_Y(u8* data, u8 row, u8 col)
{
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	00 d0       	rcall	.+0      	; 0x3c46 <Lcd_PutString_x_Y+0x6>
    3c46:	00 d0       	rcall	.+0      	; 0x3c48 <Lcd_PutString_x_Y+0x8>
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	9a 83       	std	Y+2, r25	; 0x02
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	6b 83       	std	Y+3, r22	; 0x03
    3c52:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_GoTo(row, col);
    3c54:	8b 81       	ldd	r24, Y+3	; 0x03
    3c56:	6c 81       	ldd	r22, Y+4	; 0x04
    3c58:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Lcd_GoTo>
	Lcd_PutString(data);
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c60:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <Lcd_PutString>
}
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	cf 91       	pop	r28
    3c6e:	df 91       	pop	r29
    3c70:	08 95       	ret

00003c72 <LED5>:
#include "MCAL/PORT/PORT.h"
#include "MCAL/PORT/PORT_cnf.h"
#include "OS/OS_interface.h"

void LED5(void)
{
    3c72:	df 93       	push	r29
    3c74:	cf 93       	push	r28
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_5);
    3c7a:	85 e0       	ldi	r24, 0x05	; 5
    3c7c:	0e 94 9f 11 	call	0x233e	; 0x233e <Dio_FlipChannel>
}
    3c80:	cf 91       	pop	r28
    3c82:	df 91       	pop	r29
    3c84:	08 95       	ret

00003c86 <LED4>:

void LED4(void)
{
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_4);
    3c8e:	84 e0       	ldi	r24, 0x04	; 4
    3c90:	0e 94 9f 11 	call	0x233e	; 0x233e <Dio_FlipChannel>
}
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <LED6>:

void LED6(void)
{
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(PA_6);
    3ca2:	86 e0       	ldi	r24, 0x06	; 6
    3ca4:	0e 94 9f 11 	call	0x233e	; 0x233e <Dio_FlipChannel>
}
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <main>:

int main() {
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62

Port_Init(pin_cfg);
    3cb6:	88 e6       	ldi	r24, 0x68	; 104
    3cb8:	91 e0       	ldi	r25, 0x01	; 1
    3cba:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Port_Init>
GI_voidEnable();
    3cbe:	0e 94 06 10 	call	0x200c	; 0x200c <GI_voidEnable>

	OS_voidCreateTask(0 , 200, 0, LED4);
    3cc2:	23 e4       	ldi	r18, 0x43	; 67
    3cc4:	3e e1       	ldi	r19, 0x1E	; 30
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	68 ec       	ldi	r22, 0xC8	; 200
    3cca:	70 e0       	ldi	r23, 0x00	; 0
    3ccc:	40 e0       	ldi	r20, 0x00	; 0
    3cce:	50 e0       	ldi	r21, 0x00	; 0
    3cd0:	0e 94 0a 08 	call	0x1014	; 0x1014 <OS_voidCreateTask>
	OS_voidCreateTask(1 , 200, 50, LED5);
    3cd4:	29 e3       	ldi	r18, 0x39	; 57
    3cd6:	3e e1       	ldi	r19, 0x1E	; 30
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	68 ec       	ldi	r22, 0xC8	; 200
    3cdc:	70 e0       	ldi	r23, 0x00	; 0
    3cde:	42 e3       	ldi	r20, 0x32	; 50
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	0e 94 0a 08 	call	0x1014	; 0x1014 <OS_voidCreateTask>
	OS_voidCreateTask(2 , 200, 100, LED6);
    3ce6:	2d e4       	ldi	r18, 0x4D	; 77
    3ce8:	3e e1       	ldi	r19, 0x1E	; 30
    3cea:	82 e0       	ldi	r24, 0x02	; 2
    3cec:	68 ec       	ldi	r22, 0xC8	; 200
    3cee:	70 e0       	ldi	r23, 0x00	; 0
    3cf0:	44 e6       	ldi	r20, 0x64	; 100
    3cf2:	50 e0       	ldi	r21, 0x00	; 0
    3cf4:	0e 94 0a 08 	call	0x1014	; 0x1014 <OS_voidCreateTask>

	OS_voidStartScheduler();
    3cf8:	0e 94 bd 08 	call	0x117a	; 0x117a <OS_voidStartScheduler>
    3cfc:	ff cf       	rjmp	.-2      	; 0x3cfc <main+0x4e>

00003cfe <__udivmodhi4>:
    3cfe:	aa 1b       	sub	r26, r26
    3d00:	bb 1b       	sub	r27, r27
    3d02:	51 e1       	ldi	r21, 0x11	; 17
    3d04:	07 c0       	rjmp	.+14     	; 0x3d14 <__udivmodhi4_ep>

00003d06 <__udivmodhi4_loop>:
    3d06:	aa 1f       	adc	r26, r26
    3d08:	bb 1f       	adc	r27, r27
    3d0a:	a6 17       	cp	r26, r22
    3d0c:	b7 07       	cpc	r27, r23
    3d0e:	10 f0       	brcs	.+4      	; 0x3d14 <__udivmodhi4_ep>
    3d10:	a6 1b       	sub	r26, r22
    3d12:	b7 0b       	sbc	r27, r23

00003d14 <__udivmodhi4_ep>:
    3d14:	88 1f       	adc	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	5a 95       	dec	r21
    3d1a:	a9 f7       	brne	.-22     	; 0x3d06 <__udivmodhi4_loop>
    3d1c:	80 95       	com	r24
    3d1e:	90 95       	com	r25
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	08 95       	ret

00003d26 <__udivmodsi4>:
    3d26:	a1 e2       	ldi	r26, 0x21	; 33
    3d28:	1a 2e       	mov	r1, r26
    3d2a:	aa 1b       	sub	r26, r26
    3d2c:	bb 1b       	sub	r27, r27
    3d2e:	fd 01       	movw	r30, r26
    3d30:	0d c0       	rjmp	.+26     	; 0x3d4c <__udivmodsi4_ep>

00003d32 <__udivmodsi4_loop>:
    3d32:	aa 1f       	adc	r26, r26
    3d34:	bb 1f       	adc	r27, r27
    3d36:	ee 1f       	adc	r30, r30
    3d38:	ff 1f       	adc	r31, r31
    3d3a:	a2 17       	cp	r26, r18
    3d3c:	b3 07       	cpc	r27, r19
    3d3e:	e4 07       	cpc	r30, r20
    3d40:	f5 07       	cpc	r31, r21
    3d42:	20 f0       	brcs	.+8      	; 0x3d4c <__udivmodsi4_ep>
    3d44:	a2 1b       	sub	r26, r18
    3d46:	b3 0b       	sbc	r27, r19
    3d48:	e4 0b       	sbc	r30, r20
    3d4a:	f5 0b       	sbc	r31, r21

00003d4c <__udivmodsi4_ep>:
    3d4c:	66 1f       	adc	r22, r22
    3d4e:	77 1f       	adc	r23, r23
    3d50:	88 1f       	adc	r24, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	1a 94       	dec	r1
    3d56:	69 f7       	brne	.-38     	; 0x3d32 <__udivmodsi4_loop>
    3d58:	60 95       	com	r22
    3d5a:	70 95       	com	r23
    3d5c:	80 95       	com	r24
    3d5e:	90 95       	com	r25
    3d60:	9b 01       	movw	r18, r22
    3d62:	ac 01       	movw	r20, r24
    3d64:	bd 01       	movw	r22, r26
    3d66:	cf 01       	movw	r24, r30
    3d68:	08 95       	ret

00003d6a <__prologue_saves__>:
    3d6a:	2f 92       	push	r2
    3d6c:	3f 92       	push	r3
    3d6e:	4f 92       	push	r4
    3d70:	5f 92       	push	r5
    3d72:	6f 92       	push	r6
    3d74:	7f 92       	push	r7
    3d76:	8f 92       	push	r8
    3d78:	9f 92       	push	r9
    3d7a:	af 92       	push	r10
    3d7c:	bf 92       	push	r11
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	ca 1b       	sub	r28, r26
    3d94:	db 0b       	sbc	r29, r27
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	f8 94       	cli
    3d9a:	de bf       	out	0x3e, r29	; 62
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	09 94       	ijmp

00003da2 <__epilogue_restores__>:
    3da2:	2a 88       	ldd	r2, Y+18	; 0x12
    3da4:	39 88       	ldd	r3, Y+17	; 0x11
    3da6:	48 88       	ldd	r4, Y+16	; 0x10
    3da8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3daa:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dac:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dae:	8c 84       	ldd	r8, Y+12	; 0x0c
    3db0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3db2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3db4:	b9 84       	ldd	r11, Y+9	; 0x09
    3db6:	c8 84       	ldd	r12, Y+8	; 0x08
    3db8:	df 80       	ldd	r13, Y+7	; 0x07
    3dba:	ee 80       	ldd	r14, Y+6	; 0x06
    3dbc:	fd 80       	ldd	r15, Y+5	; 0x05
    3dbe:	0c 81       	ldd	r16, Y+4	; 0x04
    3dc0:	1b 81       	ldd	r17, Y+3	; 0x03
    3dc2:	aa 81       	ldd	r26, Y+2	; 0x02
    3dc4:	b9 81       	ldd	r27, Y+1	; 0x01
    3dc6:	ce 0f       	add	r28, r30
    3dc8:	d1 1d       	adc	r29, r1
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	ed 01       	movw	r28, r26
    3dd6:	08 95       	ret

00003dd8 <_exit>:
    3dd8:	f8 94       	cli

00003dda <__stop_program>:
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <__stop_program>
